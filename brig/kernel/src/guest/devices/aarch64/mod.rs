//! aarch64
#![allow(non_snake_case)]
#![allow(unused_assignments)]
#![allow(unused_mut)]
#![allow(unused_parens)]
#![allow(unused_variables)]
#![allow(unused_imports)]
#![allow(dead_code)]
#![allow(unreachable_code)]
#![allow(unused_doc_comments)]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
use crate::dbt::{
    emitter::{Emitter, Type, TypeKind, BlockResult},
    x86::{
        emitter::{
            UnaryOperationKind, BinaryOperationKind, CastOperationKind,
            ShiftOperationKind, X86BlockRef, X86Emitter, X86NodeRef, X86SymbolRef,
        },
        X86TranslationContext,
    },
    TranslationContext,
};
fn u__DecodeA64_SME(ctx: &mut X86TranslationContext, a: X86NodeRef, b: X86NodeRef) {
    todo!();
}
fn u__DecodeA64_Unallocated1(
    ctx: &mut X86TranslationContext,
    a: X86NodeRef,
    b: X86NodeRef,
) {
    todo!();
}
fn u__DecodeA64_Unallocated2(
    ctx: &mut X86TranslationContext,
    a: X86NodeRef,
    b: X86NodeRef,
) {
    todo!();
}
fn u__DecodeA64_SVE(ctx: &mut X86TranslationContext, a: X86NodeRef, b: X86NodeRef) {
    todo!();
}
fn u__DecodeA64_DataProcImm(
    ctx: &mut X86TranslationContext,
    a: X86NodeRef,
    b: X86NodeRef,
) {
    todo!();
}
fn u__DecodeA64_BranchExcSys(
    ctx: &mut X86TranslationContext,
    a: X86NodeRef,
    b: X86NodeRef,
) {
    todo!();
}
fn u__DecodeA64_LoadStore(
    ctx: &mut X86TranslationContext,
    a: X86NodeRef,
    b: X86NodeRef,
) {
    todo!();
}
fn u__DecodeA64_DataProcFPSIMD(
    ctx: &mut X86TranslationContext,
    a: X86NodeRef,
    b: X86NodeRef,
) {
    todo!();
}
fn u__DecodeA64_Reserved(ctx: &mut X86TranslationContext, a: X86NodeRef, b: X86NodeRef) {
    todo!();
}
#[inline(never)]
pub fn u__DecodeA64(
    ctx: &mut X86TranslationContext,
    pc: X86NodeRef,
    opcode: X86NodeRef,
) -> () {
    struct FunctionState {
        v__21: X86SymbolRef,
        v__0: X86SymbolRef,
        v__3: X86SymbolRef,
        pc: X86SymbolRef,
        opcode: X86SymbolRef,
        block_refs: [X86BlockRef; 24usize],
    }
    let fn_state = FunctionState {
        v__21: ctx.create_symbol(),
        v__0: ctx.create_symbol(),
        v__3: ctx.create_symbol(),
        pc: ctx.create_symbol(),
        opcode: ctx.create_symbol(),
        block_refs: [
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
        ],
    };
    {
        let emitter = ctx.emitter();
        ctx.emitter().write_variable(fn_state.pc.clone(), pc);
        ctx.emitter().write_variable(fn_state.opcode.clone(), opcode);
    }
    const BLOCK_FUNCTIONS: [fn(
        &mut X86TranslationContext,
        &FunctionState,
    ) -> BlockResult; 24usize] = [
        block_0,
        block_1,
        block_2,
        block_3,
        block_4,
        block_5,
        block_6,
        block_7,
        block_8,
        block_9,
        block_10,
        block_11,
        block_12,
        block_13,
        block_14,
        block_15,
        block_16,
        block_17,
        block_18,
        block_19,
        block_20,
        block_21,
        block_22,
        block_23,
    ];
    fn lookup_block_idx_by_ref(block_refs: &[X86BlockRef], block: X86BlockRef) -> usize {
        block_refs.iter().position(|r| *r == block).unwrap()
    }
    enum Block {
        Static(usize),
        Dynamic(usize),
    }
    let mut block_queue = alloc::vec![Block::Static(0)];
    while let Some(block) = block_queue.pop() {
        let result = match block {
            Block::Static(i) => {
                log::debug!("static block {i}");
                BLOCK_FUNCTIONS[i](ctx, &fn_state)
            }
            Block::Dynamic(i) => {
                log::debug!("dynamic block {i}");
                ctx.emitter().set_current_block(fn_state.block_refs[i].clone());
                BLOCK_FUNCTIONS[i](ctx, &fn_state)
            }
        };
        match result {
            BlockResult::None => {}
            BlockResult::Static(block) => {
                block_queue
                    .push(
                        Block::Static(
                            lookup_block_idx_by_ref(&fn_state.block_refs, block),
                        ),
                    );
            }
            BlockResult::Dynamic(b0, b1) => {
                block_queue
                    .push(
                        Block::Dynamic(lookup_block_idx_by_ref(&fn_state.block_refs, b0)),
                    );
                block_queue
                    .push(
                        Block::Dynamic(lookup_block_idx_by_ref(&fn_state.block_refs, b1)),
                    );
            }
        }
    }
    fn block_0(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b0_s0: read-var opcode:u32
        let b0_s0 = ctx.emitter().read_variable(fn_state.opcode.clone());
        // b0_s1: write-var v__0:u32 <= b0_s0:u32
        ctx.emitter().write_variable(fn_state.v__0.clone(), b0_s0.clone());
        // b0_s2: const #31s : i5
        let b0_s2 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b0_s3: const #1s : i0
        let b0_s3 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b0_s4: bit-extract b0_s0 b0_s2 b0_s3
        let b0_s4 = ctx
            .emitter()
            .bit_extract(b0_s0.clone(), b0_s2.clone(), b0_s3.clone());
        // b0_s5: cast reint b0_s4 -> u1
        let b0_s5 = ctx
            .emitter()
            .cast(
                b0_s4.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b0_s6: const #0u : u1
        let b0_s6 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b0_s7: cmp-eq b0_s5 b0_s6
        let b0_s7 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b0_s5.clone(), b0_s6.clone()),
            );
        // b0_s8: branch b0_s7 block22 block1
        return ctx
            .emitter()
            .branch(
                b0_s7.clone(),
                fn_state.block_refs[22usize].clone(),
                fn_state.block_refs[1usize].clone(),
            );
    }
    fn block_1(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b1_s0: read-var opcode:u32
        let b1_s0 = ctx.emitter().read_variable(fn_state.opcode.clone());
        // b1_s1: write-var v__3:u32 <= b1_s0:u32
        ctx.emitter().write_variable(fn_state.v__3.clone(), b1_s0.clone());
        // b1_s2: const #31s : i5
        let b1_s2 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b1_s3: const #1s : i0
        let b1_s3 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b1_s4: bit-extract b1_s0 b1_s2 b1_s3
        let b1_s4 = ctx
            .emitter()
            .bit_extract(b1_s0.clone(), b1_s2.clone(), b1_s3.clone());
        // b1_s5: cast reint b1_s4 -> u1
        let b1_s5 = ctx
            .emitter()
            .cast(
                b1_s4.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b1_s6: const #1u : u1
        let b1_s6 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b1_s7: cmp-eq b1_s5 b1_s6
        let b1_s7 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b1_s5.clone(), b1_s6.clone()),
            );
        // b1_s8: branch b1_s7 block20 block2
        return ctx
            .emitter()
            .branch(
                b1_s7.clone(),
                fn_state.block_refs[20usize].clone(),
                fn_state.block_refs[2usize].clone(),
            );
    }
    fn block_2(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b2_s0: read-var opcode:u32
        let b2_s0 = ctx.emitter().read_variable(fn_state.opcode.clone());
        // b2_s1: const #25s : i5
        let b2_s1 = ctx
            .emitter()
            .constant(
                25isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b2_s2: const #4s : i2
        let b2_s2 = ctx
            .emitter()
            .constant(
                4isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b2_s3: bit-extract b2_s0 b2_s1 b2_s2
        let b2_s3 = ctx
            .emitter()
            .bit_extract(b2_s0.clone(), b2_s1.clone(), b2_s2.clone());
        // b2_s4: cast reint b2_s3 -> u4
        let b2_s4 = ctx
            .emitter()
            .cast(
                b2_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 4,
                },
                CastOperationKind::Reinterpret,
            );
        // b2_s5: const #1u : u4
        let b2_s5 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 4,
                },
            );
        // b2_s6: cmp-eq b2_s4 b2_s5
        let b2_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b2_s4.clone(), b2_s5.clone()),
            );
        // b2_s7: not b2_s6
        let b2_s7 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b2_s6.clone()));
        // b2_s8: branch b2_s7 block6 block3
        return ctx
            .emitter()
            .branch(
                b2_s7.clone(),
                fn_state.block_refs[6usize].clone(),
                fn_state.block_refs[3usize].clone(),
            );
    }
    fn block_3(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b3_s0: read-var pc:i
        let b3_s0 = ctx.emitter().read_variable(fn_state.pc.clone());
        // b3_s1: read-var opcode:u32
        let b3_s1 = ctx.emitter().read_variable(fn_state.opcode.clone());
        // b3_s2: call __DecodeA64_Unallocated1(b3_s0, b3_s1)
        let b3_s2 = u__DecodeA64_Unallocated1(ctx, b3_s0, b3_s1);
        // b3_s3: const #15616u : u32
        let b3_s3 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b3_s4: read-reg b3_s3:u1
        let b3_s4 = ctx
            .emitter()
            .read_register(
                b3_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b3_s5: branch b3_s4 block5 block4
        return ctx
            .emitter()
            .branch(
                b3_s4.clone(),
                fn_state.block_refs[5usize].clone(),
                fn_state.block_refs[4usize].clone(),
            );
    }
    fn block_4(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b4_s0: return
        return BlockResult::None;
    }
    fn block_5(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b5_s0: return
        return BlockResult::None;
    }
    fn block_6(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b6_s0: read-var opcode:u32
        let b6_s0 = ctx.emitter().read_variable(fn_state.opcode.clone());
        // b6_s1: const #25s : i5
        let b6_s1 = ctx
            .emitter()
            .constant(
                25isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b6_s2: const #4s : i2
        let b6_s2 = ctx
            .emitter()
            .constant(
                4isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b6_s3: bit-extract b6_s0 b6_s1 b6_s2
        let b6_s3 = ctx
            .emitter()
            .bit_extract(b6_s0.clone(), b6_s1.clone(), b6_s2.clone());
        // b6_s4: cast reint b6_s3 -> u4
        let b6_s4 = ctx
            .emitter()
            .cast(
                b6_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 4,
                },
                CastOperationKind::Reinterpret,
            );
        // b6_s5: const #2u : u4
        let b6_s5 = ctx
            .emitter()
            .constant(
                2,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 4,
                },
            );
        // b6_s6: cmp-eq b6_s4 b6_s5
        let b6_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b6_s4.clone(), b6_s5.clone()),
            );
        // b6_s7: not b6_s6
        let b6_s7 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b6_s6.clone()));
        // b6_s8: branch b6_s7 block8 block7
        return ctx
            .emitter()
            .branch(
                b6_s7.clone(),
                fn_state.block_refs[8usize].clone(),
                fn_state.block_refs[7usize].clone(),
            );
    }
    fn block_7(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b7_s0: read-var pc:i
        let b7_s0 = ctx.emitter().read_variable(fn_state.pc.clone());
        // b7_s1: read-var opcode:u32
        let b7_s1 = ctx.emitter().read_variable(fn_state.opcode.clone());
        // b7_s2: call __DecodeA64_SVE(b7_s0, b7_s1)
        let b7_s2 = u__DecodeA64_SVE(ctx, b7_s0, b7_s1);
        // b7_s3: const #15616u : u32
        let b7_s3 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b7_s4: read-reg b7_s3:u1
        let b7_s4 = ctx
            .emitter()
            .read_register(
                b7_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b7_s5: branch b7_s4 block5 block4
        return ctx
            .emitter()
            .branch(
                b7_s4.clone(),
                fn_state.block_refs[5usize].clone(),
                fn_state.block_refs[4usize].clone(),
            );
    }
    fn block_8(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b8_s0: read-var opcode:u32
        let b8_s0 = ctx.emitter().read_variable(fn_state.opcode.clone());
        // b8_s1: const #25s : i5
        let b8_s1 = ctx
            .emitter()
            .constant(
                25isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b8_s2: const #4s : i2
        let b8_s2 = ctx
            .emitter()
            .constant(
                4isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b8_s3: bit-extract b8_s0 b8_s1 b8_s2
        let b8_s3 = ctx
            .emitter()
            .bit_extract(b8_s0.clone(), b8_s1.clone(), b8_s2.clone());
        // b8_s4: cast reint b8_s3 -> u4
        let b8_s4 = ctx
            .emitter()
            .cast(
                b8_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 4,
                },
                CastOperationKind::Reinterpret,
            );
        // b8_s5: const #3u : u4
        let b8_s5 = ctx
            .emitter()
            .constant(
                3,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 4,
                },
            );
        // b8_s6: cmp-eq b8_s4 b8_s5
        let b8_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b8_s4.clone(), b8_s5.clone()),
            );
        // b8_s7: not b8_s6
        let b8_s7 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b8_s6.clone()));
        // b8_s8: branch b8_s7 block10 block9
        return ctx
            .emitter()
            .branch(
                b8_s7.clone(),
                fn_state.block_refs[10usize].clone(),
                fn_state.block_refs[9usize].clone(),
            );
    }
    fn block_9(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b9_s0: read-var pc:i
        let b9_s0 = ctx.emitter().read_variable(fn_state.pc.clone());
        // b9_s1: read-var opcode:u32
        let b9_s1 = ctx.emitter().read_variable(fn_state.opcode.clone());
        // b9_s2: call __DecodeA64_Unallocated2(b9_s0, b9_s1)
        let b9_s2 = u__DecodeA64_Unallocated2(ctx, b9_s0, b9_s1);
        // b9_s3: const #15616u : u32
        let b9_s3 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b9_s4: read-reg b9_s3:u1
        let b9_s4 = ctx
            .emitter()
            .read_register(
                b9_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b9_s5: branch b9_s4 block5 block4
        return ctx
            .emitter()
            .branch(
                b9_s4.clone(),
                fn_state.block_refs[5usize].clone(),
                fn_state.block_refs[4usize].clone(),
            );
    }
    fn block_10(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b10_s0: read-var opcode:u32
        let b10_s0 = ctx.emitter().read_variable(fn_state.opcode.clone());
        // b10_s1: const #26s : i5
        let b10_s1 = ctx
            .emitter()
            .constant(
                26isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b10_s2: const #3s : i2
        let b10_s2 = ctx
            .emitter()
            .constant(
                3isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b10_s3: bit-extract b10_s0 b10_s1 b10_s2
        let b10_s3 = ctx
            .emitter()
            .bit_extract(b10_s0.clone(), b10_s1.clone(), b10_s2.clone());
        // b10_s4: cast reint b10_s3 -> u3
        let b10_s4 = ctx
            .emitter()
            .cast(
                b10_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 3,
                },
                CastOperationKind::Reinterpret,
            );
        // b10_s5: const #4u : u3
        let b10_s5 = ctx
            .emitter()
            .constant(
                4,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 3,
                },
            );
        // b10_s6: cmp-eq b10_s4 b10_s5
        let b10_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b10_s4.clone(), b10_s5.clone()),
            );
        // b10_s7: not b10_s6
        let b10_s7 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b10_s6.clone()));
        // b10_s8: branch b10_s7 block12 block11
        return ctx
            .emitter()
            .branch(
                b10_s7.clone(),
                fn_state.block_refs[12usize].clone(),
                fn_state.block_refs[11usize].clone(),
            );
    }
    fn block_11(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b11_s0: read-var pc:i
        let b11_s0 = ctx.emitter().read_variable(fn_state.pc.clone());
        // b11_s1: read-var opcode:u32
        let b11_s1 = ctx.emitter().read_variable(fn_state.opcode.clone());
        // b11_s2: call __DecodeA64_DataProcImm(b11_s0, b11_s1)
        let b11_s2 = u__DecodeA64_DataProcImm(ctx, b11_s0, b11_s1);
        // b11_s3: const #15616u : u32
        let b11_s3 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b11_s4: read-reg b11_s3:u1
        let b11_s4 = ctx
            .emitter()
            .read_register(
                b11_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b11_s5: branch b11_s4 block5 block4
        return ctx
            .emitter()
            .branch(
                b11_s4.clone(),
                fn_state.block_refs[5usize].clone(),
                fn_state.block_refs[4usize].clone(),
            );
    }
    fn block_12(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b12_s0: read-var opcode:u32
        let b12_s0 = ctx.emitter().read_variable(fn_state.opcode.clone());
        // b12_s1: const #26s : i5
        let b12_s1 = ctx
            .emitter()
            .constant(
                26isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b12_s2: const #3s : i2
        let b12_s2 = ctx
            .emitter()
            .constant(
                3isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b12_s3: bit-extract b12_s0 b12_s1 b12_s2
        let b12_s3 = ctx
            .emitter()
            .bit_extract(b12_s0.clone(), b12_s1.clone(), b12_s2.clone());
        // b12_s4: cast reint b12_s3 -> u3
        let b12_s4 = ctx
            .emitter()
            .cast(
                b12_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 3,
                },
                CastOperationKind::Reinterpret,
            );
        // b12_s5: const #5u : u3
        let b12_s5 = ctx
            .emitter()
            .constant(
                5,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 3,
                },
            );
        // b12_s6: cmp-eq b12_s4 b12_s5
        let b12_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b12_s4.clone(), b12_s5.clone()),
            );
        // b12_s7: not b12_s6
        let b12_s7 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b12_s6.clone()));
        // b12_s8: branch b12_s7 block14 block13
        return ctx
            .emitter()
            .branch(
                b12_s7.clone(),
                fn_state.block_refs[14usize].clone(),
                fn_state.block_refs[13usize].clone(),
            );
    }
    fn block_13(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b13_s0: read-var pc:i
        let b13_s0 = ctx.emitter().read_variable(fn_state.pc.clone());
        // b13_s1: read-var opcode:u32
        let b13_s1 = ctx.emitter().read_variable(fn_state.opcode.clone());
        // b13_s2: call __DecodeA64_BranchExcSys(b13_s0, b13_s1)
        let b13_s2 = u__DecodeA64_BranchExcSys(ctx, b13_s0, b13_s1);
        // b13_s3: const #15616u : u32
        let b13_s3 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b13_s4: read-reg b13_s3:u1
        let b13_s4 = ctx
            .emitter()
            .read_register(
                b13_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b13_s5: branch b13_s4 block5 block4
        return ctx
            .emitter()
            .branch(
                b13_s4.clone(),
                fn_state.block_refs[5usize].clone(),
                fn_state.block_refs[4usize].clone(),
            );
    }
    fn block_14(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b14_s0: read-var opcode:u32
        let b14_s0 = ctx.emitter().read_variable(fn_state.opcode.clone());
        // b14_s1: write-var v__21:u32 <= b14_s0:u32
        ctx.emitter().write_variable(fn_state.v__21.clone(), b14_s0.clone());
        // b14_s2: const #27s : i5
        let b14_s2 = ctx
            .emitter()
            .constant(
                27isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b14_s3: const #1s : i0
        let b14_s3 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b14_s4: bit-extract b14_s0 b14_s2 b14_s3
        let b14_s4 = ctx
            .emitter()
            .bit_extract(b14_s0.clone(), b14_s2.clone(), b14_s3.clone());
        // b14_s5: cast reint b14_s4 -> u1
        let b14_s5 = ctx
            .emitter()
            .cast(
                b14_s4.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b14_s6: const #1u : u1
        let b14_s6 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b14_s7: cmp-eq b14_s5 b14_s6
        let b14_s7 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b14_s5.clone(), b14_s6.clone()),
            );
        // b14_s8: branch b14_s7 block18 block15
        return ctx
            .emitter()
            .branch(
                b14_s7.clone(),
                fn_state.block_refs[18usize].clone(),
                fn_state.block_refs[15usize].clone(),
            );
    }
    fn block_15(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b15_s0: read-var opcode:u32
        let b15_s0 = ctx.emitter().read_variable(fn_state.opcode.clone());
        // b15_s1: const #25s : i5
        let b15_s1 = ctx
            .emitter()
            .constant(
                25isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b15_s2: const #3s : i2
        let b15_s2 = ctx
            .emitter()
            .constant(
                3isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b15_s3: bit-extract b15_s0 b15_s1 b15_s2
        let b15_s3 = ctx
            .emitter()
            .bit_extract(b15_s0.clone(), b15_s1.clone(), b15_s2.clone());
        // b15_s4: cast reint b15_s3 -> u3
        let b15_s4 = ctx
            .emitter()
            .cast(
                b15_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 3,
                },
                CastOperationKind::Reinterpret,
            );
        // b15_s5: const #5u : u3
        let b15_s5 = ctx
            .emitter()
            .constant(
                5,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 3,
                },
            );
        // b15_s6: cmp-eq b15_s4 b15_s5
        let b15_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b15_s4.clone(), b15_s5.clone()),
            );
        // b15_s7: not b15_s6
        let b15_s7 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b15_s6.clone()));
        // b15_s8: branch b15_s7 block17 block16
        return ctx
            .emitter()
            .branch(
                b15_s7.clone(),
                fn_state.block_refs[17usize].clone(),
                fn_state.block_refs[16usize].clone(),
            );
    }
    fn block_16(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b16_s0: read-var pc:i
        let b16_s0 = ctx.emitter().read_variable(fn_state.pc.clone());
        // b16_s1: read-var opcode:u32
        let b16_s1 = ctx.emitter().read_variable(fn_state.opcode.clone());
        // b16_s2: call __DecodeA64_DataProcReg(b16_s0, b16_s1)
        let b16_s2 = u__DecodeA64_DataProcReg(ctx, b16_s0, b16_s1);
        // b16_s3: const #15616u : u32
        let b16_s3 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b16_s4: read-reg b16_s3:u1
        let b16_s4 = ctx
            .emitter()
            .read_register(
                b16_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b16_s5: branch b16_s4 block5 block4
        return ctx
            .emitter()
            .branch(
                b16_s4.clone(),
                fn_state.block_refs[5usize].clone(),
                fn_state.block_refs[4usize].clone(),
            );
    }
    fn block_17(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b17_s0: read-var pc:i
        let b17_s0 = ctx.emitter().read_variable(fn_state.pc.clone());
        // b17_s1: read-var opcode:u32
        let b17_s1 = ctx.emitter().read_variable(fn_state.opcode.clone());
        // b17_s2: call __DecodeA64_DataProcFPSIMD(b17_s0, b17_s1)
        let b17_s2 = u__DecodeA64_DataProcFPSIMD(ctx, b17_s0, b17_s1);
        // b17_s3: const #15616u : u32
        let b17_s3 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b17_s4: read-reg b17_s3:u1
        let b17_s4 = ctx
            .emitter()
            .read_register(
                b17_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b17_s5: branch b17_s4 block5 block4
        return ctx
            .emitter()
            .branch(
                b17_s4.clone(),
                fn_state.block_refs[5usize].clone(),
                fn_state.block_refs[4usize].clone(),
            );
    }
    fn block_18(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b18_s0: const #25s : i5
        let b18_s0 = ctx
            .emitter()
            .constant(
                25isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b18_s1: read-var v__21:u32
        let b18_s1 = ctx.emitter().read_variable(fn_state.v__21.clone());
        // b18_s2: const #1s : i0
        let b18_s2 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b18_s3: bit-extract b18_s1 b18_s0 b18_s2
        let b18_s3 = ctx
            .emitter()
            .bit_extract(b18_s1.clone(), b18_s0.clone(), b18_s2.clone());
        // b18_s4: cast reint b18_s3 -> u1
        let b18_s4 = ctx
            .emitter()
            .cast(
                b18_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b18_s5: const #0u : u1
        let b18_s5 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b18_s6: cmp-eq b18_s4 b18_s5
        let b18_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b18_s4.clone(), b18_s5.clone()),
            );
        // b18_s7: not b18_s6
        let b18_s7 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b18_s6.clone()));
        // b18_s8: branch b18_s7 block15 block19
        return ctx
            .emitter()
            .branch(
                b18_s7.clone(),
                fn_state.block_refs[15usize].clone(),
                fn_state.block_refs[19usize].clone(),
            );
    }
    fn block_19(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b19_s0: read-var pc:i
        let b19_s0 = ctx.emitter().read_variable(fn_state.pc.clone());
        // b19_s1: read-var opcode:u32
        let b19_s1 = ctx.emitter().read_variable(fn_state.opcode.clone());
        // b19_s2: call __DecodeA64_LoadStore(b19_s0, b19_s1)
        let b19_s2 = u__DecodeA64_LoadStore(ctx, b19_s0, b19_s1);
        // b19_s3: const #15616u : u32
        let b19_s3 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b19_s4: read-reg b19_s3:u1
        let b19_s4 = ctx
            .emitter()
            .read_register(
                b19_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b19_s5: branch b19_s4 block5 block4
        return ctx
            .emitter()
            .branch(
                b19_s4.clone(),
                fn_state.block_refs[5usize].clone(),
                fn_state.block_refs[4usize].clone(),
            );
    }
    fn block_20(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b20_s0: const #25s : i5
        let b20_s0 = ctx
            .emitter()
            .constant(
                25isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b20_s1: read-var v__3:u32
        let b20_s1 = ctx.emitter().read_variable(fn_state.v__3.clone());
        // b20_s2: const #4s : i2
        let b20_s2 = ctx
            .emitter()
            .constant(
                4isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b20_s3: bit-extract b20_s1 b20_s0 b20_s2
        let b20_s3 = ctx
            .emitter()
            .bit_extract(b20_s1.clone(), b20_s0.clone(), b20_s2.clone());
        // b20_s4: cast reint b20_s3 -> u4
        let b20_s4 = ctx
            .emitter()
            .cast(
                b20_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 4,
                },
                CastOperationKind::Reinterpret,
            );
        // b20_s5: const #0u : u4
        let b20_s5 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 4,
                },
            );
        // b20_s6: cmp-eq b20_s4 b20_s5
        let b20_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b20_s4.clone(), b20_s5.clone()),
            );
        // b20_s7: not b20_s6
        let b20_s7 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b20_s6.clone()));
        // b20_s8: branch b20_s7 block2 block21
        return ctx
            .emitter()
            .branch(
                b20_s7.clone(),
                fn_state.block_refs[2usize].clone(),
                fn_state.block_refs[21usize].clone(),
            );
    }
    fn block_21(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b21_s0: read-var pc:i
        let b21_s0 = ctx.emitter().read_variable(fn_state.pc.clone());
        // b21_s1: read-var opcode:u32
        let b21_s1 = ctx.emitter().read_variable(fn_state.opcode.clone());
        // b21_s2: call __DecodeA64_SME(b21_s0, b21_s1)
        let b21_s2 = u__DecodeA64_SME(ctx, b21_s0, b21_s1);
        // b21_s3: const #15616u : u32
        let b21_s3 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b21_s4: read-reg b21_s3:u1
        let b21_s4 = ctx
            .emitter()
            .read_register(
                b21_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b21_s5: branch b21_s4 block5 block4
        return ctx
            .emitter()
            .branch(
                b21_s4.clone(),
                fn_state.block_refs[5usize].clone(),
                fn_state.block_refs[4usize].clone(),
            );
    }
    fn block_22(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b22_s0: const #25s : i5
        let b22_s0 = ctx
            .emitter()
            .constant(
                25isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b22_s1: read-var v__0:u32
        let b22_s1 = ctx.emitter().read_variable(fn_state.v__0.clone());
        // b22_s2: const #4s : i2
        let b22_s2 = ctx
            .emitter()
            .constant(
                4isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b22_s3: bit-extract b22_s1 b22_s0 b22_s2
        let b22_s3 = ctx
            .emitter()
            .bit_extract(b22_s1.clone(), b22_s0.clone(), b22_s2.clone());
        // b22_s4: cast reint b22_s3 -> u4
        let b22_s4 = ctx
            .emitter()
            .cast(
                b22_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 4,
                },
                CastOperationKind::Reinterpret,
            );
        // b22_s5: const #0u : u4
        let b22_s5 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 4,
                },
            );
        // b22_s6: cmp-eq b22_s4 b22_s5
        let b22_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b22_s4.clone(), b22_s5.clone()),
            );
        // b22_s7: not b22_s6
        let b22_s7 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b22_s6.clone()));
        // b22_s8: branch b22_s7 block1 block23
        return ctx
            .emitter()
            .branch(
                b22_s7.clone(),
                fn_state.block_refs[1usize].clone(),
                fn_state.block_refs[23usize].clone(),
            );
    }
    fn block_23(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b23_s0: read-var pc:i
        let b23_s0 = ctx.emitter().read_variable(fn_state.pc.clone());
        // b23_s1: read-var opcode:u32
        let b23_s1 = ctx.emitter().read_variable(fn_state.opcode.clone());
        // b23_s2: call __DecodeA64_Reserved(b23_s0, b23_s1)
        let b23_s2 = u__DecodeA64_Reserved(ctx, b23_s0, b23_s1);
        // b23_s3: const #15616u : u32
        let b23_s3 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b23_s4: read-reg b23_s3:u1
        let b23_s4 = ctx
            .emitter()
            .read_register(
                b23_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b23_s5: branch b23_s4 block5 block4
        return ctx
            .emitter()
            .branch(
                b23_s4.clone(),
                fn_state.block_refs[5usize].clone(),
                fn_state.block_refs[4usize].clone(),
            );
    }
}
#[inline(never)]
pub fn u__DecodeA64_DataProcReg(
    ctx: &mut X86TranslationContext,
    gs_382119: X86NodeRef,
    gs_382120: X86NodeRef,
) -> () {
    struct FunctionState {
        u_25955: X86SymbolRef,
        u_26083: X86SymbolRef,
        u_25843: X86SymbolRef,
        u_25813: X86SymbolRef,
        u_26009: X86SymbolRef,
        u_26144: X86SymbolRef,
        u_26116: X86SymbolRef,
        u_26004: X86SymbolRef,
        u_25915: X86SymbolRef,
        u_26096: X86SymbolRef,
        u_25803: X86SymbolRef,
        u_25977: X86SymbolRef,
        u_26155: X86SymbolRef,
        u_26035: X86SymbolRef,
        u_25863: X86SymbolRef,
        u_26174: X86SymbolRef,
        u_25727: X86SymbolRef,
        u_25680: X86SymbolRef,
        u_25923: X86SymbolRef,
        u_26066: X86SymbolRef,
        u_25755: X86SymbolRef,
        u_25890: X86SymbolRef,
        u_26180: X86SymbolRef,
        u_26030: X86SymbolRef,
        u_25685: X86SymbolRef,
        u_25765: X86SymbolRef,
        u_26108: X86SymbolRef,
        u_25961: X86SymbolRef,
        u_26149: X86SymbolRef,
        u_26148: X86SymbolRef,
        u_25793: X86SymbolRef,
        u_25894: X86SymbolRef,
        u_25833: X86SymbolRef,
        u_26151: X86SymbolRef,
        u__opcode: X86SymbolRef,
        merge_var: X86SymbolRef,
        u_25944: X86SymbolRef,
        u_26055: X86SymbolRef,
        u_25950: X86SymbolRef,
        u_26089: X86SymbolRef,
        u_25709: X86SymbolRef,
        u_25909: X86SymbolRef,
        u_26022: X86SymbolRef,
        u_25930: X86SymbolRef,
        u_26016: X86SymbolRef,
        u_25747: X86SymbolRef,
        u_26158: X86SymbolRef,
        u_26168: X86SymbolRef,
        u_25995: X86SymbolRef,
        u_26078: X86SymbolRef,
        u_25693: X86SymbolRef,
        u_26101: X86SymbolRef,
        u_25701: X86SymbolRef,
        u_25717: X86SymbolRef,
        u_25883: X86SymbolRef,
        u_25986: X86SymbolRef,
        u_26145: X86SymbolRef,
        u_26154: X86SymbolRef,
        u_26072: X86SymbolRef,
        u_25785: X86SymbolRef,
        u_25853: X86SymbolRef,
        u_26163: X86SymbolRef,
        u_25737: X86SymbolRef,
        u_26045: X86SymbolRef,
        u_26138: X86SymbolRef,
        u_26050: X86SymbolRef,
        u_26156: X86SymbolRef,
        u_25899: X86SymbolRef,
        u_26132: X86SymbolRef,
        u_25775: X86SymbolRef,
        u_25938: X86SymbolRef,
        u_25823: X86SymbolRef,
        u_26147: X86SymbolRef,
        u_26152: X86SymbolRef,
        u_26153: X86SymbolRef,
        u_25969: X86SymbolRef,
        u_25904: X86SymbolRef,
        u_26060: X86SymbolRef,
        u_25876: X86SymbolRef,
        u_25869: X86SymbolRef,
        u_26040: X86SymbolRef,
        u_26124: X86SymbolRef,
        u_26011: X86SymbolRef,
        u_26146: X86SymbolRef,
        gs_382119: X86SymbolRef,
        gs_382120: X86SymbolRef,
        block_refs: [X86BlockRef; 300usize],
    }
    let fn_state = FunctionState {
        u_25955: ctx.create_symbol(),
        u_26083: ctx.create_symbol(),
        u_25843: ctx.create_symbol(),
        u_25813: ctx.create_symbol(),
        u_26009: ctx.create_symbol(),
        u_26144: ctx.create_symbol(),
        u_26116: ctx.create_symbol(),
        u_26004: ctx.create_symbol(),
        u_25915: ctx.create_symbol(),
        u_26096: ctx.create_symbol(),
        u_25803: ctx.create_symbol(),
        u_25977: ctx.create_symbol(),
        u_26155: ctx.create_symbol(),
        u_26035: ctx.create_symbol(),
        u_25863: ctx.create_symbol(),
        u_26174: ctx.create_symbol(),
        u_25727: ctx.create_symbol(),
        u_25680: ctx.create_symbol(),
        u_25923: ctx.create_symbol(),
        u_26066: ctx.create_symbol(),
        u_25755: ctx.create_symbol(),
        u_25890: ctx.create_symbol(),
        u_26180: ctx.create_symbol(),
        u_26030: ctx.create_symbol(),
        u_25685: ctx.create_symbol(),
        u_25765: ctx.create_symbol(),
        u_26108: ctx.create_symbol(),
        u_25961: ctx.create_symbol(),
        u_26149: ctx.create_symbol(),
        u_26148: ctx.create_symbol(),
        u_25793: ctx.create_symbol(),
        u_25894: ctx.create_symbol(),
        u_25833: ctx.create_symbol(),
        u_26151: ctx.create_symbol(),
        u__opcode: ctx.create_symbol(),
        merge_var: ctx.create_symbol(),
        u_25944: ctx.create_symbol(),
        u_26055: ctx.create_symbol(),
        u_25950: ctx.create_symbol(),
        u_26089: ctx.create_symbol(),
        u_25709: ctx.create_symbol(),
        u_25909: ctx.create_symbol(),
        u_26022: ctx.create_symbol(),
        u_25930: ctx.create_symbol(),
        u_26016: ctx.create_symbol(),
        u_25747: ctx.create_symbol(),
        u_26158: ctx.create_symbol(),
        u_26168: ctx.create_symbol(),
        u_25995: ctx.create_symbol(),
        u_26078: ctx.create_symbol(),
        u_25693: ctx.create_symbol(),
        u_26101: ctx.create_symbol(),
        u_25701: ctx.create_symbol(),
        u_25717: ctx.create_symbol(),
        u_25883: ctx.create_symbol(),
        u_25986: ctx.create_symbol(),
        u_26145: ctx.create_symbol(),
        u_26154: ctx.create_symbol(),
        u_26072: ctx.create_symbol(),
        u_25785: ctx.create_symbol(),
        u_25853: ctx.create_symbol(),
        u_26163: ctx.create_symbol(),
        u_25737: ctx.create_symbol(),
        u_26045: ctx.create_symbol(),
        u_26138: ctx.create_symbol(),
        u_26050: ctx.create_symbol(),
        u_26156: ctx.create_symbol(),
        u_25899: ctx.create_symbol(),
        u_26132: ctx.create_symbol(),
        u_25775: ctx.create_symbol(),
        u_25938: ctx.create_symbol(),
        u_25823: ctx.create_symbol(),
        u_26147: ctx.create_symbol(),
        u_26152: ctx.create_symbol(),
        u_26153: ctx.create_symbol(),
        u_25969: ctx.create_symbol(),
        u_25904: ctx.create_symbol(),
        u_26060: ctx.create_symbol(),
        u_25876: ctx.create_symbol(),
        u_25869: ctx.create_symbol(),
        u_26040: ctx.create_symbol(),
        u_26124: ctx.create_symbol(),
        u_26011: ctx.create_symbol(),
        u_26146: ctx.create_symbol(),
        gs_382119: ctx.create_symbol(),
        gs_382120: ctx.create_symbol(),
        block_refs: [
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
            ctx.create_block(),
        ],
    };
    {
        let emitter = ctx.emitter();
        ctx.emitter().write_variable(fn_state.gs_382119.clone(), gs_382119);
        ctx.emitter().write_variable(fn_state.gs_382120.clone(), gs_382120);
    }
    const BLOCK_FUNCTIONS: [fn(
        &mut X86TranslationContext,
        &FunctionState,
    ) -> BlockResult; 300usize] = [
        block_0,
        block_1,
        block_2,
        block_3,
        block_4,
        block_5,
        block_6,
        block_7,
        block_8,
        block_9,
        block_10,
        block_11,
        block_12,
        block_13,
        block_14,
        block_15,
        block_16,
        block_17,
        block_18,
        block_19,
        block_20,
        block_21,
        block_22,
        block_23,
        block_24,
        block_25,
        block_26,
        block_27,
        block_28,
        block_29,
        block_30,
        block_31,
        block_32,
        block_33,
        block_34,
        block_35,
        block_36,
        block_37,
        block_38,
        block_39,
        block_40,
        block_41,
        block_42,
        block_43,
        block_44,
        block_45,
        block_46,
        block_47,
        block_48,
        block_49,
        block_50,
        block_51,
        block_52,
        block_53,
        block_54,
        block_55,
        block_56,
        block_57,
        block_58,
        block_59,
        block_60,
        block_61,
        block_62,
        block_63,
        block_64,
        block_65,
        block_66,
        block_67,
        block_68,
        block_69,
        block_70,
        block_71,
        block_72,
        block_73,
        block_74,
        block_75,
        block_76,
        block_77,
        block_78,
        block_79,
        block_80,
        block_81,
        block_82,
        block_83,
        block_84,
        block_85,
        block_86,
        block_87,
        block_88,
        block_89,
        block_90,
        block_91,
        block_92,
        block_93,
        block_94,
        block_95,
        block_96,
        block_97,
        block_98,
        block_99,
        block_100,
        block_101,
        block_102,
        block_103,
        block_104,
        block_105,
        block_106,
        block_107,
        block_108,
        block_109,
        block_110,
        block_111,
        block_112,
        block_113,
        block_114,
        block_115,
        block_116,
        block_117,
        block_118,
        block_119,
        block_120,
        block_121,
        block_122,
        block_123,
        block_124,
        block_125,
        block_126,
        block_127,
        block_128,
        block_129,
        block_130,
        block_131,
        block_132,
        block_133,
        block_134,
        block_135,
        block_136,
        block_137,
        block_138,
        block_139,
        block_140,
        block_141,
        block_142,
        block_143,
        block_144,
        block_145,
        block_146,
        block_147,
        block_148,
        block_149,
        block_150,
        block_151,
        block_152,
        block_153,
        block_154,
        block_155,
        block_156,
        block_157,
        block_158,
        block_159,
        block_160,
        block_161,
        block_162,
        block_163,
        block_164,
        block_165,
        block_166,
        block_167,
        block_168,
        block_169,
        block_170,
        block_171,
        block_172,
        block_173,
        block_174,
        block_175,
        block_176,
        block_177,
        block_178,
        block_179,
        block_180,
        block_181,
        block_182,
        block_183,
        block_184,
        block_185,
        block_186,
        block_187,
        block_188,
        block_189,
        block_190,
        block_191,
        block_192,
        block_193,
        block_194,
        block_195,
        block_196,
        block_197,
        block_198,
        block_199,
        block_200,
        block_201,
        block_202,
        block_203,
        block_204,
        block_205,
        block_206,
        block_207,
        block_208,
        block_209,
        block_210,
        block_211,
        block_212,
        block_213,
        block_214,
        block_215,
        block_216,
        block_217,
        block_218,
        block_219,
        block_220,
        block_221,
        block_222,
        block_223,
        block_224,
        block_225,
        block_226,
        block_227,
        block_228,
        block_229,
        block_230,
        block_231,
        block_232,
        block_233,
        block_234,
        block_235,
        block_236,
        block_237,
        block_238,
        block_239,
        block_240,
        block_241,
        block_242,
        block_243,
        block_244,
        block_245,
        block_246,
        block_247,
        block_248,
        block_249,
        block_250,
        block_251,
        block_252,
        block_253,
        block_254,
        block_255,
        block_256,
        block_257,
        block_258,
        block_259,
        block_260,
        block_261,
        block_262,
        block_263,
        block_264,
        block_265,
        block_266,
        block_267,
        block_268,
        block_269,
        block_270,
        block_271,
        block_272,
        block_273,
        block_274,
        block_275,
        block_276,
        block_277,
        block_278,
        block_279,
        block_280,
        block_281,
        block_282,
        block_283,
        block_284,
        block_285,
        block_286,
        block_287,
        block_288,
        block_289,
        block_290,
        block_291,
        block_292,
        block_293,
        block_294,
        block_295,
        block_296,
        block_297,
        block_298,
        block_299,
    ];
    fn lookup_block_idx_by_ref(block_refs: &[X86BlockRef], block: X86BlockRef) -> usize {
        block_refs.iter().position(|r| *r == block).unwrap()
    }
    enum Block {
        Static(usize),
        Dynamic(usize),
    }
    let mut block_queue = alloc::vec![Block::Static(0)];
    while let Some(block) = block_queue.pop() {
        let result = match block {
            Block::Static(i) => {
                log::debug!("static block {i}");
                BLOCK_FUNCTIONS[i](ctx, &fn_state)
            }
            Block::Dynamic(i) => {
                log::debug!("dynamic block {i}");
                ctx.emitter().set_current_block(fn_state.block_refs[i].clone());
                BLOCK_FUNCTIONS[i](ctx, &fn_state)
            }
        };
        match result {
            BlockResult::None => {}
            BlockResult::Static(block) => {
                block_queue
                    .push(
                        Block::Static(
                            lookup_block_idx_by_ref(&fn_state.block_refs, block),
                        ),
                    );
            }
            BlockResult::Dynamic(b0, b1) => {
                block_queue
                    .push(
                        Block::Dynamic(lookup_block_idx_by_ref(&fn_state.block_refs, b0)),
                    );
                block_queue
                    .push(
                        Block::Dynamic(lookup_block_idx_by_ref(&fn_state.block_refs, b1)),
                    );
            }
        }
    }
    fn block_0(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b0_s0: read-var gs#382119:i
        let b0_s0 = ctx.emitter().read_variable(fn_state.gs_382119.clone());
        // b0_s1: read-var merge#var:struct
        let b0_s1 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b0_s2: update-field b0_s1.tuple#%i_%bv320 <- b0_s0
        let b0_s2 = {
            let mut local = b0_s1;
            local.tuple__pcnt_i__pcnt_bv320 = b0_s0;
            local
        };
        // b0_s3: write-var merge#var:struct <= b0_s2:struct
        ctx.emitter().write_variable(fn_state.merge_var.clone(), b0_s2.clone());
        // b0_s4: read-var gs#382120:u32
        let b0_s4 = ctx.emitter().read_variable(fn_state.gs_382120.clone());
        // b0_s5: update-field b0_s2.tuple#%i_%bv321 <- b0_s4
        let b0_s5 = {
            let mut local = b0_s2;
            local.tuple__pcnt_i__pcnt_bv321 = b0_s4;
            local
        };
        // b0_s6: write-var merge#var:struct <= b0_s5:struct
        ctx.emitter().write_variable(fn_state.merge_var.clone(), b0_s5.clone());
        // b0_s7: extract-field b0_s5.tuple#%i_%bv321
        let b0_s7 = b0_s5.tuple__pcnt_i__pcnt_bv321;
        // b0_s8: write-var __opcode:u32 <= b0_s7:u32
        ctx.emitter().write_variable(fn_state.u__opcode.clone(), b0_s7.clone());
        // b0_s9: const #10s : i4
        let b0_s9 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b0_s10: const #21s : i5
        let b0_s10 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b0_s11: bit-extract b0_s7 b0_s9 b0_s10
        let b0_s11 = ctx
            .emitter()
            .bit_extract(b0_s7.clone(), b0_s9.clone(), b0_s10.clone());
        // b0_s12: cast reint b0_s11 -> u21
        let b0_s12 = ctx
            .emitter()
            .cast(
                b0_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 21,
                },
                CastOperationKind::Reinterpret,
            );
        // b0_s13: const #1486856u : u21
        let b0_s13 = ctx
            .emitter()
            .constant(
                1486856,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 21,
                },
            );
        // b0_s14: cmp-eq b0_s12 b0_s13
        let b0_s14 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b0_s12.clone(), b0_s13.clone()),
            );
        // b0_s15: branch b0_s14 block298 block1
        return ctx
            .emitter()
            .branch(
                b0_s14.clone(),
                fn_state.block_refs[298usize].clone(),
                fn_state.block_refs[1usize].clone(),
            );
    }
    fn block_1(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b1_s0: read-var merge#var:struct
        let b1_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b1_s1: extract-field b1_s0.tuple#%i_%bv321
        let b1_s1 = b1_s0.tuple__pcnt_i__pcnt_bv321;
        // b1_s2: write-var u#25680:u32 <= b1_s1:u32
        ctx.emitter().write_variable(fn_state.u_25680.clone(), b1_s1.clone());
        // b1_s3: const #21s : i5
        let b1_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b1_s4: const #10s : i4
        let b1_s4 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b1_s5: bit-extract b1_s1 b1_s3 b1_s4
        let b1_s5 = ctx
            .emitter()
            .bit_extract(b1_s1.clone(), b1_s3.clone(), b1_s4.clone());
        // b1_s6: cast reint b1_s5 -> u10
        let b1_s6 = ctx
            .emitter()
            .cast(
                b1_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
                CastOperationKind::Reinterpret,
            );
        // b1_s7: const #208u : u10
        let b1_s7 = ctx
            .emitter()
            .constant(
                208,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
            );
        // b1_s8: cmp-eq b1_s6 b1_s7
        let b1_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b1_s6.clone(), b1_s7.clone()),
            );
        // b1_s9: branch b1_s8 block295 block2
        return ctx
            .emitter()
            .branch(
                b1_s8.clone(),
                fn_state.block_refs[295usize].clone(),
                fn_state.block_refs[2usize].clone(),
            );
    }
    fn block_2(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b2_s0: read-var merge#var:struct
        let b2_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b2_s1: extract-field b2_s0.tuple#%i_%bv321
        let b2_s1 = b2_s0.tuple__pcnt_i__pcnt_bv321;
        // b2_s2: write-var u#25685:u32 <= b2_s1:u32
        ctx.emitter().write_variable(fn_state.u_25685.clone(), b2_s1.clone());
        // b2_s3: const #21s : i5
        let b2_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b2_s4: const #10s : i4
        let b2_s4 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b2_s5: bit-extract b2_s1 b2_s3 b2_s4
        let b2_s5 = ctx
            .emitter()
            .bit_extract(b2_s1.clone(), b2_s3.clone(), b2_s4.clone());
        // b2_s6: cast reint b2_s5 -> u10
        let b2_s6 = ctx
            .emitter()
            .cast(
                b2_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
                CastOperationKind::Reinterpret,
            );
        // b2_s7: const #464u : u10
        let b2_s7 = ctx
            .emitter()
            .constant(
                464,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
            );
        // b2_s8: cmp-eq b2_s6 b2_s7
        let b2_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b2_s6.clone(), b2_s7.clone()),
            );
        // b2_s9: branch b2_s8 block292 block3
        return ctx
            .emitter()
            .branch(
                b2_s8.clone(),
                fn_state.block_refs[292usize].clone(),
                fn_state.block_refs[3usize].clone(),
            );
    }
    fn block_3(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b3_s0: read-var merge#var:struct
        let b3_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b3_s1: extract-field b3_s0.tuple#%i_%bv321
        let b3_s1 = b3_s0.tuple__pcnt_i__pcnt_bv321;
        // b3_s2: write-var u#25693:u32 <= b3_s1:u32
        ctx.emitter().write_variable(fn_state.u_25693.clone(), b3_s1.clone());
        // b3_s3: const #21s : i5
        let b3_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b3_s4: const #10s : i4
        let b3_s4 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b3_s5: bit-extract b3_s1 b3_s3 b3_s4
        let b3_s5 = ctx
            .emitter()
            .bit_extract(b3_s1.clone(), b3_s3.clone(), b3_s4.clone());
        // b3_s6: cast reint b3_s5 -> u10
        let b3_s6 = ctx
            .emitter()
            .cast(
                b3_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
                CastOperationKind::Reinterpret,
            );
        // b3_s7: const #720u : u10
        let b3_s7 = ctx
            .emitter()
            .constant(
                720,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
            );
        // b3_s8: cmp-eq b3_s6 b3_s7
        let b3_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b3_s6.clone(), b3_s7.clone()),
            );
        // b3_s9: branch b3_s8 block289 block4
        return ctx
            .emitter()
            .branch(
                b3_s8.clone(),
                fn_state.block_refs[289usize].clone(),
                fn_state.block_refs[4usize].clone(),
            );
    }
    fn block_4(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b4_s0: read-var merge#var:struct
        let b4_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b4_s1: extract-field b4_s0.tuple#%i_%bv321
        let b4_s1 = b4_s0.tuple__pcnt_i__pcnt_bv321;
        // b4_s2: write-var u#25701:u32 <= b4_s1:u32
        ctx.emitter().write_variable(fn_state.u_25701.clone(), b4_s1.clone());
        // b4_s3: const #21s : i5
        let b4_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b4_s4: const #10s : i4
        let b4_s4 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b4_s5: bit-extract b4_s1 b4_s3 b4_s4
        let b4_s5 = ctx
            .emitter()
            .bit_extract(b4_s1.clone(), b4_s3.clone(), b4_s4.clone());
        // b4_s6: cast reint b4_s5 -> u10
        let b4_s6 = ctx
            .emitter()
            .cast(
                b4_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
                CastOperationKind::Reinterpret,
            );
        // b4_s7: const #976u : u10
        let b4_s7 = ctx
            .emitter()
            .constant(
                976,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
            );
        // b4_s8: cmp-eq b4_s6 b4_s7
        let b4_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b4_s6.clone(), b4_s7.clone()),
            );
        // b4_s9: branch b4_s8 block286 block5
        return ctx
            .emitter()
            .branch(
                b4_s8.clone(),
                fn_state.block_refs[286usize].clone(),
                fn_state.block_refs[5usize].clone(),
            );
    }
    fn block_5(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b5_s0: read-var merge#var:struct
        let b5_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b5_s1: extract-field b5_s0.tuple#%i_%bv321
        let b5_s1 = b5_s0.tuple__pcnt_i__pcnt_bv321;
        // b5_s2: write-var u#25709:u32 <= b5_s1:u32
        ctx.emitter().write_variable(fn_state.u_25709.clone(), b5_s1.clone());
        // b5_s3: const #24s : i5
        let b5_s3 = ctx
            .emitter()
            .constant(
                24isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b5_s4: const #7s : i3
        let b5_s4 = ctx
            .emitter()
            .constant(
                7isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b5_s5: bit-extract b5_s1 b5_s3 b5_s4
        let b5_s5 = ctx
            .emitter()
            .bit_extract(b5_s1.clone(), b5_s3.clone(), b5_s4.clone());
        // b5_s6: cast reint b5_s5 -> u7
        let b5_s6 = ctx
            .emitter()
            .cast(
                b5_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 7,
                },
                CastOperationKind::Reinterpret,
            );
        // b5_s7: const #11u : u7
        let b5_s7 = ctx
            .emitter()
            .constant(
                11,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 7,
                },
            );
        // b5_s8: cmp-eq b5_s6 b5_s7
        let b5_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b5_s6.clone(), b5_s7.clone()),
            );
        // b5_s9: branch b5_s8 block283 block6
        return ctx
            .emitter()
            .branch(
                b5_s8.clone(),
                fn_state.block_refs[283usize].clone(),
                fn_state.block_refs[6usize].clone(),
            );
    }
    fn block_6(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b6_s0: read-var merge#var:struct
        let b6_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b6_s1: extract-field b6_s0.tuple#%i_%bv321
        let b6_s1 = b6_s0.tuple__pcnt_i__pcnt_bv321;
        // b6_s2: write-var u#25717:u32 <= b6_s1:u32
        ctx.emitter().write_variable(fn_state.u_25717.clone(), b6_s1.clone());
        // b6_s3: const #24s : i5
        let b6_s3 = ctx
            .emitter()
            .constant(
                24isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b6_s4: const #7s : i3
        let b6_s4 = ctx
            .emitter()
            .constant(
                7isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b6_s5: bit-extract b6_s1 b6_s3 b6_s4
        let b6_s5 = ctx
            .emitter()
            .bit_extract(b6_s1.clone(), b6_s3.clone(), b6_s4.clone());
        // b6_s6: cast reint b6_s5 -> u7
        let b6_s6 = ctx
            .emitter()
            .cast(
                b6_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 7,
                },
                CastOperationKind::Reinterpret,
            );
        // b6_s7: const #43u : u7
        let b6_s7 = ctx
            .emitter()
            .constant(
                43,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 7,
                },
            );
        // b6_s8: cmp-eq b6_s6 b6_s7
        let b6_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b6_s6.clone(), b6_s7.clone()),
            );
        // b6_s9: branch b6_s8 block280 block7
        return ctx
            .emitter()
            .branch(
                b6_s8.clone(),
                fn_state.block_refs[280usize].clone(),
                fn_state.block_refs[7usize].clone(),
            );
    }
    fn block_7(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b7_s0: read-var merge#var:struct
        let b7_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b7_s1: extract-field b7_s0.tuple#%i_%bv321
        let b7_s1 = b7_s0.tuple__pcnt_i__pcnt_bv321;
        // b7_s2: write-var u#25727:u32 <= b7_s1:u32
        ctx.emitter().write_variable(fn_state.u_25727.clone(), b7_s1.clone());
        // b7_s3: const #24s : i5
        let b7_s3 = ctx
            .emitter()
            .constant(
                24isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b7_s4: const #7s : i3
        let b7_s4 = ctx
            .emitter()
            .constant(
                7isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b7_s5: bit-extract b7_s1 b7_s3 b7_s4
        let b7_s5 = ctx
            .emitter()
            .bit_extract(b7_s1.clone(), b7_s3.clone(), b7_s4.clone());
        // b7_s6: cast reint b7_s5 -> u7
        let b7_s6 = ctx
            .emitter()
            .cast(
                b7_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 7,
                },
                CastOperationKind::Reinterpret,
            );
        // b7_s7: const #75u : u7
        let b7_s7 = ctx
            .emitter()
            .constant(
                75,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 7,
                },
            );
        // b7_s8: cmp-eq b7_s6 b7_s7
        let b7_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b7_s6.clone(), b7_s7.clone()),
            );
        // b7_s9: branch b7_s8 block277 block8
        return ctx
            .emitter()
            .branch(
                b7_s8.clone(),
                fn_state.block_refs[277usize].clone(),
                fn_state.block_refs[8usize].clone(),
            );
    }
    fn block_8(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b8_s0: read-var merge#var:struct
        let b8_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b8_s1: extract-field b8_s0.tuple#%i_%bv321
        let b8_s1 = b8_s0.tuple__pcnt_i__pcnt_bv321;
        // b8_s2: write-var u#25737:u32 <= b8_s1:u32
        ctx.emitter().write_variable(fn_state.u_25737.clone(), b8_s1.clone());
        // b8_s3: const #24s : i5
        let b8_s3 = ctx
            .emitter()
            .constant(
                24isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b8_s4: const #7s : i3
        let b8_s4 = ctx
            .emitter()
            .constant(
                7isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b8_s5: bit-extract b8_s1 b8_s3 b8_s4
        let b8_s5 = ctx
            .emitter()
            .bit_extract(b8_s1.clone(), b8_s3.clone(), b8_s4.clone());
        // b8_s6: cast reint b8_s5 -> u7
        let b8_s6 = ctx
            .emitter()
            .cast(
                b8_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 7,
                },
                CastOperationKind::Reinterpret,
            );
        // b8_s7: const #107u : u7
        let b8_s7 = ctx
            .emitter()
            .constant(
                107,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 7,
                },
            );
        // b8_s8: cmp-eq b8_s6 b8_s7
        let b8_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b8_s6.clone(), b8_s7.clone()),
            );
        // b8_s9: branch b8_s8 block274 block9
        return ctx
            .emitter()
            .branch(
                b8_s8.clone(),
                fn_state.block_refs[274usize].clone(),
                fn_state.block_refs[9usize].clone(),
            );
    }
    fn block_9(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b9_s0: read-var merge#var:struct
        let b9_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b9_s1: extract-field b9_s0.tuple#%i_%bv321
        let b9_s1 = b9_s0.tuple__pcnt_i__pcnt_bv321;
        // b9_s2: write-var u#25747:u32 <= b9_s1:u32
        ctx.emitter().write_variable(fn_state.u_25747.clone(), b9_s1.clone());
        // b9_s3: const #21s : i5
        let b9_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b9_s4: const #10s : i4
        let b9_s4 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b9_s5: bit-extract b9_s1 b9_s3 b9_s4
        let b9_s5 = ctx
            .emitter()
            .bit_extract(b9_s1.clone(), b9_s3.clone(), b9_s4.clone());
        // b9_s6: cast reint b9_s5 -> u10
        let b9_s6 = ctx
            .emitter()
            .cast(
                b9_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
                CastOperationKind::Reinterpret,
            );
        // b9_s7: const #89u : u10
        let b9_s7 = ctx
            .emitter()
            .constant(
                89,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
            );
        // b9_s8: cmp-eq b9_s6 b9_s7
        let b9_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b9_s6.clone(), b9_s7.clone()),
            );
        // b9_s9: branch b9_s8 block272 block10
        return ctx
            .emitter()
            .branch(
                b9_s8.clone(),
                fn_state.block_refs[272usize].clone(),
                fn_state.block_refs[10usize].clone(),
            );
    }
    fn block_10(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b10_s0: read-var merge#var:struct
        let b10_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b10_s1: extract-field b10_s0.tuple#%i_%bv321
        let b10_s1 = b10_s0.tuple__pcnt_i__pcnt_bv321;
        // b10_s2: write-var u#25755:u32 <= b10_s1:u32
        ctx.emitter().write_variable(fn_state.u_25755.clone(), b10_s1.clone());
        // b10_s3: const #21s : i5
        let b10_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b10_s4: const #10s : i4
        let b10_s4 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b10_s5: bit-extract b10_s1 b10_s3 b10_s4
        let b10_s5 = ctx
            .emitter()
            .bit_extract(b10_s1.clone(), b10_s3.clone(), b10_s4.clone());
        // b10_s6: cast reint b10_s5 -> u10
        let b10_s6 = ctx
            .emitter()
            .cast(
                b10_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
                CastOperationKind::Reinterpret,
            );
        // b10_s7: const #345u : u10
        let b10_s7 = ctx
            .emitter()
            .constant(
                345,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
            );
        // b10_s8: cmp-eq b10_s6 b10_s7
        let b10_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b10_s6.clone(), b10_s7.clone()),
            );
        // b10_s9: branch b10_s8 block270 block11
        return ctx
            .emitter()
            .branch(
                b10_s8.clone(),
                fn_state.block_refs[270usize].clone(),
                fn_state.block_refs[11usize].clone(),
            );
    }
    fn block_11(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b11_s0: read-var merge#var:struct
        let b11_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b11_s1: extract-field b11_s0.tuple#%i_%bv321
        let b11_s1 = b11_s0.tuple__pcnt_i__pcnt_bv321;
        // b11_s2: write-var u#25765:u32 <= b11_s1:u32
        ctx.emitter().write_variable(fn_state.u_25765.clone(), b11_s1.clone());
        // b11_s3: const #21s : i5
        let b11_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b11_s4: const #10s : i4
        let b11_s4 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b11_s5: bit-extract b11_s1 b11_s3 b11_s4
        let b11_s5 = ctx
            .emitter()
            .bit_extract(b11_s1.clone(), b11_s3.clone(), b11_s4.clone());
        // b11_s6: cast reint b11_s5 -> u10
        let b11_s6 = ctx
            .emitter()
            .cast(
                b11_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
                CastOperationKind::Reinterpret,
            );
        // b11_s7: const #601u : u10
        let b11_s7 = ctx
            .emitter()
            .constant(
                601,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
            );
        // b11_s8: cmp-eq b11_s6 b11_s7
        let b11_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b11_s6.clone(), b11_s7.clone()),
            );
        // b11_s9: branch b11_s8 block268 block12
        return ctx
            .emitter()
            .branch(
                b11_s8.clone(),
                fn_state.block_refs[268usize].clone(),
                fn_state.block_refs[12usize].clone(),
            );
    }
    fn block_12(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b12_s0: read-var merge#var:struct
        let b12_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b12_s1: extract-field b12_s0.tuple#%i_%bv321
        let b12_s1 = b12_s0.tuple__pcnt_i__pcnt_bv321;
        // b12_s2: write-var u#25775:u32 <= b12_s1:u32
        ctx.emitter().write_variable(fn_state.u_25775.clone(), b12_s1.clone());
        // b12_s3: const #21s : i5
        let b12_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b12_s4: const #10s : i4
        let b12_s4 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b12_s5: bit-extract b12_s1 b12_s3 b12_s4
        let b12_s5 = ctx
            .emitter()
            .bit_extract(b12_s1.clone(), b12_s3.clone(), b12_s4.clone());
        // b12_s6: cast reint b12_s5 -> u10
        let b12_s6 = ctx
            .emitter()
            .cast(
                b12_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
                CastOperationKind::Reinterpret,
            );
        // b12_s7: const #857u : u10
        let b12_s7 = ctx
            .emitter()
            .constant(
                857,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
            );
        // b12_s8: cmp-eq b12_s6 b12_s7
        let b12_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b12_s6.clone(), b12_s7.clone()),
            );
        // b12_s9: branch b12_s8 block266 block13
        return ctx
            .emitter()
            .branch(
                b12_s8.clone(),
                fn_state.block_refs[266usize].clone(),
                fn_state.block_refs[13usize].clone(),
            );
    }
    fn block_13(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b13_s0: read-var merge#var:struct
        let b13_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b13_s1: extract-field b13_s0.tuple#%i_%bv321
        let b13_s1 = b13_s0.tuple__pcnt_i__pcnt_bv321;
        // b13_s2: write-var u#25785:u32 <= b13_s1:u32
        ctx.emitter().write_variable(fn_state.u_25785.clone(), b13_s1.clone());
        // b13_s3: const #24s : i5
        let b13_s3 = ctx
            .emitter()
            .constant(
                24isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b13_s4: const #7s : i3
        let b13_s4 = ctx
            .emitter()
            .constant(
                7isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b13_s5: bit-extract b13_s1 b13_s3 b13_s4
        let b13_s5 = ctx
            .emitter()
            .bit_extract(b13_s1.clone(), b13_s3.clone(), b13_s4.clone());
        // b13_s6: cast reint b13_s5 -> u7
        let b13_s6 = ctx
            .emitter()
            .cast(
                b13_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 7,
                },
                CastOperationKind::Reinterpret,
            );
        // b13_s7: const #10u : u7
        let b13_s7 = ctx
            .emitter()
            .constant(
                10,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 7,
                },
            );
        // b13_s8: cmp-eq b13_s6 b13_s7
        let b13_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b13_s6.clone(), b13_s7.clone()),
            );
        // b13_s9: branch b13_s8 block263 block14
        return ctx
            .emitter()
            .branch(
                b13_s8.clone(),
                fn_state.block_refs[263usize].clone(),
                fn_state.block_refs[14usize].clone(),
            );
    }
    fn block_14(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b14_s0: read-var merge#var:struct
        let b14_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b14_s1: extract-field b14_s0.tuple#%i_%bv321
        let b14_s1 = b14_s0.tuple__pcnt_i__pcnt_bv321;
        // b14_s2: write-var u#25793:u32 <= b14_s1:u32
        ctx.emitter().write_variable(fn_state.u_25793.clone(), b14_s1.clone());
        // b14_s3: const #24s : i5
        let b14_s3 = ctx
            .emitter()
            .constant(
                24isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b14_s4: const #7s : i3
        let b14_s4 = ctx
            .emitter()
            .constant(
                7isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b14_s5: bit-extract b14_s1 b14_s3 b14_s4
        let b14_s5 = ctx
            .emitter()
            .bit_extract(b14_s1.clone(), b14_s3.clone(), b14_s4.clone());
        // b14_s6: cast reint b14_s5 -> u7
        let b14_s6 = ctx
            .emitter()
            .cast(
                b14_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 7,
                },
                CastOperationKind::Reinterpret,
            );
        // b14_s7: const #106u : u7
        let b14_s7 = ctx
            .emitter()
            .constant(
                106,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 7,
                },
            );
        // b14_s8: cmp-eq b14_s6 b14_s7
        let b14_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b14_s6.clone(), b14_s7.clone()),
            );
        // b14_s9: branch b14_s8 block260 block15
        return ctx
            .emitter()
            .branch(
                b14_s8.clone(),
                fn_state.block_refs[260usize].clone(),
                fn_state.block_refs[15usize].clone(),
            );
    }
    fn block_15(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b15_s0: read-var merge#var:struct
        let b15_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b15_s1: extract-field b15_s0.tuple#%i_%bv321
        let b15_s1 = b15_s0.tuple__pcnt_i__pcnt_bv321;
        // b15_s2: write-var u#25803:u32 <= b15_s1:u32
        ctx.emitter().write_variable(fn_state.u_25803.clone(), b15_s1.clone());
        // b15_s3: const #24s : i5
        let b15_s3 = ctx
            .emitter()
            .constant(
                24isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b15_s4: const #7s : i3
        let b15_s4 = ctx
            .emitter()
            .constant(
                7isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b15_s5: bit-extract b15_s1 b15_s3 b15_s4
        let b15_s5 = ctx
            .emitter()
            .bit_extract(b15_s1.clone(), b15_s3.clone(), b15_s4.clone());
        // b15_s6: cast reint b15_s5 -> u7
        let b15_s6 = ctx
            .emitter()
            .cast(
                b15_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 7,
                },
                CastOperationKind::Reinterpret,
            );
        // b15_s7: const #10u : u7
        let b15_s7 = ctx
            .emitter()
            .constant(
                10,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 7,
                },
            );
        // b15_s8: cmp-eq b15_s6 b15_s7
        let b15_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b15_s6.clone(), b15_s7.clone()),
            );
        // b15_s9: branch b15_s8 block257 block16
        return ctx
            .emitter()
            .branch(
                b15_s8.clone(),
                fn_state.block_refs[257usize].clone(),
                fn_state.block_refs[16usize].clone(),
            );
    }
    fn block_16(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b16_s0: read-var merge#var:struct
        let b16_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b16_s1: extract-field b16_s0.tuple#%i_%bv321
        let b16_s1 = b16_s0.tuple__pcnt_i__pcnt_bv321;
        // b16_s2: write-var u#25813:u32 <= b16_s1:u32
        ctx.emitter().write_variable(fn_state.u_25813.clone(), b16_s1.clone());
        // b16_s3: const #24s : i5
        let b16_s3 = ctx
            .emitter()
            .constant(
                24isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b16_s4: const #7s : i3
        let b16_s4 = ctx
            .emitter()
            .constant(
                7isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b16_s5: bit-extract b16_s1 b16_s3 b16_s4
        let b16_s5 = ctx
            .emitter()
            .bit_extract(b16_s1.clone(), b16_s3.clone(), b16_s4.clone());
        // b16_s6: cast reint b16_s5 -> u7
        let b16_s6 = ctx
            .emitter()
            .cast(
                b16_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 7,
                },
                CastOperationKind::Reinterpret,
            );
        // b16_s7: const #106u : u7
        let b16_s7 = ctx
            .emitter()
            .constant(
                106,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 7,
                },
            );
        // b16_s8: cmp-eq b16_s6 b16_s7
        let b16_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b16_s6.clone(), b16_s7.clone()),
            );
        // b16_s9: branch b16_s8 block254 block17
        return ctx
            .emitter()
            .branch(
                b16_s8.clone(),
                fn_state.block_refs[254usize].clone(),
                fn_state.block_refs[17usize].clone(),
            );
    }
    fn block_17(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b17_s0: read-var merge#var:struct
        let b17_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b17_s1: extract-field b17_s0.tuple#%i_%bv321
        let b17_s1 = b17_s0.tuple__pcnt_i__pcnt_bv321;
        // b17_s2: write-var u#25823:u32 <= b17_s1:u32
        ctx.emitter().write_variable(fn_state.u_25823.clone(), b17_s1.clone());
        // b17_s3: const #24s : i5
        let b17_s3 = ctx
            .emitter()
            .constant(
                24isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b17_s4: const #7s : i3
        let b17_s4 = ctx
            .emitter()
            .constant(
                7isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b17_s5: bit-extract b17_s1 b17_s3 b17_s4
        let b17_s5 = ctx
            .emitter()
            .bit_extract(b17_s1.clone(), b17_s3.clone(), b17_s4.clone());
        // b17_s6: cast reint b17_s5 -> u7
        let b17_s6 = ctx
            .emitter()
            .cast(
                b17_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 7,
                },
                CastOperationKind::Reinterpret,
            );
        // b17_s7: const #74u : u7
        let b17_s7 = ctx
            .emitter()
            .constant(
                74,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 7,
                },
            );
        // b17_s8: cmp-eq b17_s6 b17_s7
        let b17_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b17_s6.clone(), b17_s7.clone()),
            );
        // b17_s9: branch b17_s8 block251 block18
        return ctx
            .emitter()
            .branch(
                b17_s8.clone(),
                fn_state.block_refs[251usize].clone(),
                fn_state.block_refs[18usize].clone(),
            );
    }
    fn block_18(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b18_s0: read-var merge#var:struct
        let b18_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b18_s1: extract-field b18_s0.tuple#%i_%bv321
        let b18_s1 = b18_s0.tuple__pcnt_i__pcnt_bv321;
        // b18_s2: write-var u#25833:u32 <= b18_s1:u32
        ctx.emitter().write_variable(fn_state.u_25833.clone(), b18_s1.clone());
        // b18_s3: const #24s : i5
        let b18_s3 = ctx
            .emitter()
            .constant(
                24isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b18_s4: const #7s : i3
        let b18_s4 = ctx
            .emitter()
            .constant(
                7isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b18_s5: bit-extract b18_s1 b18_s3 b18_s4
        let b18_s5 = ctx
            .emitter()
            .bit_extract(b18_s1.clone(), b18_s3.clone(), b18_s4.clone());
        // b18_s6: cast reint b18_s5 -> u7
        let b18_s6 = ctx
            .emitter()
            .cast(
                b18_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 7,
                },
                CastOperationKind::Reinterpret,
            );
        // b18_s7: const #74u : u7
        let b18_s7 = ctx
            .emitter()
            .constant(
                74,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 7,
                },
            );
        // b18_s8: cmp-eq b18_s6 b18_s7
        let b18_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b18_s6.clone(), b18_s7.clone()),
            );
        // b18_s9: branch b18_s8 block248 block19
        return ctx
            .emitter()
            .branch(
                b18_s8.clone(),
                fn_state.block_refs[248usize].clone(),
                fn_state.block_refs[19usize].clone(),
            );
    }
    fn block_19(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b19_s0: read-var merge#var:struct
        let b19_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b19_s1: extract-field b19_s0.tuple#%i_%bv321
        let b19_s1 = b19_s0.tuple__pcnt_i__pcnt_bv321;
        // b19_s2: write-var u#25843:u32 <= b19_s1:u32
        ctx.emitter().write_variable(fn_state.u_25843.clone(), b19_s1.clone());
        // b19_s3: const #24s : i5
        let b19_s3 = ctx
            .emitter()
            .constant(
                24isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b19_s4: const #7s : i3
        let b19_s4 = ctx
            .emitter()
            .constant(
                7isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b19_s5: bit-extract b19_s1 b19_s3 b19_s4
        let b19_s5 = ctx
            .emitter()
            .bit_extract(b19_s1.clone(), b19_s3.clone(), b19_s4.clone());
        // b19_s6: cast reint b19_s5 -> u7
        let b19_s6 = ctx
            .emitter()
            .cast(
                b19_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 7,
                },
                CastOperationKind::Reinterpret,
            );
        // b19_s7: const #42u : u7
        let b19_s7 = ctx
            .emitter()
            .constant(
                42,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 7,
                },
            );
        // b19_s8: cmp-eq b19_s6 b19_s7
        let b19_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b19_s6.clone(), b19_s7.clone()),
            );
        // b19_s9: branch b19_s8 block245 block20
        return ctx
            .emitter()
            .branch(
                b19_s8.clone(),
                fn_state.block_refs[245usize].clone(),
                fn_state.block_refs[20usize].clone(),
            );
    }
    fn block_20(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b20_s0: read-var merge#var:struct
        let b20_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b20_s1: extract-field b20_s0.tuple#%i_%bv321
        let b20_s1 = b20_s0.tuple__pcnt_i__pcnt_bv321;
        // b20_s2: write-var u#25853:u32 <= b20_s1:u32
        ctx.emitter().write_variable(fn_state.u_25853.clone(), b20_s1.clone());
        // b20_s3: const #24s : i5
        let b20_s3 = ctx
            .emitter()
            .constant(
                24isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b20_s4: const #7s : i3
        let b20_s4 = ctx
            .emitter()
            .constant(
                7isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b20_s5: bit-extract b20_s1 b20_s3 b20_s4
        let b20_s5 = ctx
            .emitter()
            .bit_extract(b20_s1.clone(), b20_s3.clone(), b20_s4.clone());
        // b20_s6: cast reint b20_s5 -> u7
        let b20_s6 = ctx
            .emitter()
            .cast(
                b20_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 7,
                },
                CastOperationKind::Reinterpret,
            );
        // b20_s7: const #42u : u7
        let b20_s7 = ctx
            .emitter()
            .constant(
                42,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 7,
                },
            );
        // b20_s8: cmp-eq b20_s6 b20_s7
        let b20_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b20_s6.clone(), b20_s7.clone()),
            );
        // b20_s9: branch b20_s8 block242 block21
        return ctx
            .emitter()
            .branch(
                b20_s8.clone(),
                fn_state.block_refs[242usize].clone(),
                fn_state.block_refs[21usize].clone(),
            );
    }
    fn block_21(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b21_s0: read-var merge#var:struct
        let b21_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b21_s1: extract-field b21_s0.tuple#%i_%bv321
        let b21_s1 = b21_s0.tuple__pcnt_i__pcnt_bv321;
        // b21_s2: write-var u#25863:u32 <= b21_s1:u32
        ctx.emitter().write_variable(fn_state.u_25863.clone(), b21_s1.clone());
        // b21_s3: const #21s : i5
        let b21_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b21_s4: const #10s : i4
        let b21_s4 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b21_s5: bit-extract b21_s1 b21_s3 b21_s4
        let b21_s5 = ctx
            .emitter()
            .bit_extract(b21_s1.clone(), b21_s3.clone(), b21_s4.clone());
        // b21_s6: cast reint b21_s5 -> u10
        let b21_s6 = ctx
            .emitter()
            .cast(
                b21_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
                CastOperationKind::Reinterpret,
            );
        // b21_s7: const #214u : u10
        let b21_s7 = ctx
            .emitter()
            .constant(
                214,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
            );
        // b21_s8: cmp-eq b21_s6 b21_s7
        let b21_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b21_s6.clone(), b21_s7.clone()),
            );
        // b21_s9: branch b21_s8 block239 block22
        return ctx
            .emitter()
            .branch(
                b21_s8.clone(),
                fn_state.block_refs[239usize].clone(),
                fn_state.block_refs[22usize].clone(),
            );
    }
    fn block_22(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b22_s0: read-var merge#var:struct
        let b22_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b22_s1: extract-field b22_s0.tuple#%i_%bv321
        let b22_s1 = b22_s0.tuple__pcnt_i__pcnt_bv321;
        // b22_s2: write-var u#25869:u32 <= b22_s1:u32
        ctx.emitter().write_variable(fn_state.u_25869.clone(), b22_s1.clone());
        // b22_s3: const #21s : i5
        let b22_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b22_s4: const #10s : i4
        let b22_s4 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b22_s5: bit-extract b22_s1 b22_s3 b22_s4
        let b22_s5 = ctx
            .emitter()
            .bit_extract(b22_s1.clone(), b22_s3.clone(), b22_s4.clone());
        // b22_s6: cast reint b22_s5 -> u10
        let b22_s6 = ctx
            .emitter()
            .cast(
                b22_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
                CastOperationKind::Reinterpret,
            );
        // b22_s7: const #214u : u10
        let b22_s7 = ctx
            .emitter()
            .constant(
                214,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
            );
        // b22_s8: cmp-eq b22_s6 b22_s7
        let b22_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b22_s6.clone(), b22_s7.clone()),
            );
        // b22_s9: branch b22_s8 block236 block23
        return ctx
            .emitter()
            .branch(
                b22_s8.clone(),
                fn_state.block_refs[236usize].clone(),
                fn_state.block_refs[23usize].clone(),
            );
    }
    fn block_23(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b23_s0: read-var merge#var:struct
        let b23_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b23_s1: extract-field b23_s0.tuple#%i_%bv321
        let b23_s1 = b23_s0.tuple__pcnt_i__pcnt_bv321;
        // b23_s2: write-var u#25876:u32 <= b23_s1:u32
        ctx.emitter().write_variable(fn_state.u_25876.clone(), b23_s1.clone());
        // b23_s3: const #21s : i5
        let b23_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b23_s4: const #10s : i4
        let b23_s4 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b23_s5: bit-extract b23_s1 b23_s3 b23_s4
        let b23_s5 = ctx
            .emitter()
            .bit_extract(b23_s1.clone(), b23_s3.clone(), b23_s4.clone());
        // b23_s6: cast reint b23_s5 -> u10
        let b23_s6 = ctx
            .emitter()
            .cast(
                b23_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
                CastOperationKind::Reinterpret,
            );
        // b23_s7: const #214u : u10
        let b23_s7 = ctx
            .emitter()
            .constant(
                214,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
            );
        // b23_s8: cmp-eq b23_s6 b23_s7
        let b23_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b23_s6.clone(), b23_s7.clone()),
            );
        // b23_s9: branch b23_s8 block233 block24
        return ctx
            .emitter()
            .branch(
                b23_s8.clone(),
                fn_state.block_refs[233usize].clone(),
                fn_state.block_refs[24usize].clone(),
            );
    }
    fn block_24(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b24_s0: read-var merge#var:struct
        let b24_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b24_s1: extract-field b24_s0.tuple#%i_%bv321
        let b24_s1 = b24_s0.tuple__pcnt_i__pcnt_bv321;
        // b24_s2: write-var u#25883:u32 <= b24_s1:u32
        ctx.emitter().write_variable(fn_state.u_25883.clone(), b24_s1.clone());
        // b24_s3: const #21s : i5
        let b24_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b24_s4: const #10s : i4
        let b24_s4 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b24_s5: bit-extract b24_s1 b24_s3 b24_s4
        let b24_s5 = ctx
            .emitter()
            .bit_extract(b24_s1.clone(), b24_s3.clone(), b24_s4.clone());
        // b24_s6: cast reint b24_s5 -> u10
        let b24_s6 = ctx
            .emitter()
            .cast(
                b24_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
                CastOperationKind::Reinterpret,
            );
        // b24_s7: const #214u : u10
        let b24_s7 = ctx
            .emitter()
            .constant(
                214,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
            );
        // b24_s8: cmp-eq b24_s6 b24_s7
        let b24_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b24_s6.clone(), b24_s7.clone()),
            );
        // b24_s9: branch b24_s8 block230 block25
        return ctx
            .emitter()
            .branch(
                b24_s8.clone(),
                fn_state.block_refs[230usize].clone(),
                fn_state.block_refs[25usize].clone(),
            );
    }
    fn block_25(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b25_s0: read-var merge#var:struct
        let b25_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b25_s1: extract-field b25_s0.tuple#%i_%bv321
        let b25_s1 = b25_s0.tuple__pcnt_i__pcnt_bv321;
        // b25_s2: write-var u#25890:u32 <= b25_s1:u32
        ctx.emitter().write_variable(fn_state.u_25890.clone(), b25_s1.clone());
        // b25_s3: const #14s : i4
        let b25_s3 = ctx
            .emitter()
            .constant(
                14isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b25_s4: const #18s : i5
        let b25_s4 = ctx
            .emitter()
            .constant(
                18isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b25_s5: bit-extract b25_s1 b25_s3 b25_s4
        let b25_s5 = ctx
            .emitter()
            .bit_extract(b25_s1.clone(), b25_s3.clone(), b25_s4.clone());
        // b25_s6: cast reint b25_s5 -> u18
        let b25_s6 = ctx
            .emitter()
            .cast(
                b25_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 18,
                },
                CastOperationKind::Reinterpret,
            );
        // b25_s7: const #224004u : u18
        let b25_s7 = ctx
            .emitter()
            .constant(
                224004,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 18,
                },
            );
        // b25_s8: cmp-eq b25_s6 b25_s7
        let b25_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b25_s6.clone(), b25_s7.clone()),
            );
        // b25_s9: branch b25_s8 block227 block26
        return ctx
            .emitter()
            .branch(
                b25_s8.clone(),
                fn_state.block_refs[227usize].clone(),
                fn_state.block_refs[26usize].clone(),
            );
    }
    fn block_26(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b26_s0: read-var merge#var:struct
        let b26_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b26_s1: extract-field b26_s0.tuple#%i_%bv321
        let b26_s1 = b26_s0.tuple__pcnt_i__pcnt_bv321;
        // b26_s2: write-var u#25894:u32 <= b26_s1:u32
        ctx.emitter().write_variable(fn_state.u_25894.clone(), b26_s1.clone());
        // b26_s3: const #14s : i4
        let b26_s3 = ctx
            .emitter()
            .constant(
                14isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b26_s4: const #18s : i5
        let b26_s4 = ctx
            .emitter()
            .constant(
                18isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b26_s5: bit-extract b26_s1 b26_s3 b26_s4
        let b26_s5 = ctx
            .emitter()
            .bit_extract(b26_s1.clone(), b26_s3.clone(), b26_s4.clone());
        // b26_s6: cast reint b26_s5 -> u18
        let b26_s6 = ctx
            .emitter()
            .cast(
                b26_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 18,
                },
                CastOperationKind::Reinterpret,
            );
        // b26_s7: const #224004u : u18
        let b26_s7 = ctx
            .emitter()
            .constant(
                224004,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 18,
                },
            );
        // b26_s8: cmp-eq b26_s6 b26_s7
        let b26_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b26_s6.clone(), b26_s7.clone()),
            );
        // b26_s9: branch b26_s8 block224 block27
        return ctx
            .emitter()
            .branch(
                b26_s8.clone(),
                fn_state.block_refs[224usize].clone(),
                fn_state.block_refs[27usize].clone(),
            );
    }
    fn block_27(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b27_s0: read-var merge#var:struct
        let b27_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b27_s1: extract-field b27_s0.tuple#%i_%bv321
        let b27_s1 = b27_s0.tuple__pcnt_i__pcnt_bv321;
        // b27_s2: write-var u#25899:u32 <= b27_s1:u32
        ctx.emitter().write_variable(fn_state.u_25899.clone(), b27_s1.clone());
        // b27_s3: const #14s : i4
        let b27_s3 = ctx
            .emitter()
            .constant(
                14isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b27_s4: const #18s : i5
        let b27_s4 = ctx
            .emitter()
            .constant(
                18isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b27_s5: bit-extract b27_s1 b27_s3 b27_s4
        let b27_s5 = ctx
            .emitter()
            .bit_extract(b27_s1.clone(), b27_s3.clone(), b27_s4.clone());
        // b27_s6: cast reint b27_s5 -> u18
        let b27_s6 = ctx
            .emitter()
            .cast(
                b27_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 18,
                },
                CastOperationKind::Reinterpret,
            );
        // b27_s7: const #224004u : u18
        let b27_s7 = ctx
            .emitter()
            .constant(
                224004,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 18,
                },
            );
        // b27_s8: cmp-eq b27_s6 b27_s7
        let b27_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b27_s6.clone(), b27_s7.clone()),
            );
        // b27_s9: branch b27_s8 block221 block28
        return ctx
            .emitter()
            .branch(
                b27_s8.clone(),
                fn_state.block_refs[221usize].clone(),
                fn_state.block_refs[28usize].clone(),
            );
    }
    fn block_28(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b28_s0: read-var merge#var:struct
        let b28_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b28_s1: extract-field b28_s0.tuple#%i_%bv321
        let b28_s1 = b28_s0.tuple__pcnt_i__pcnt_bv321;
        // b28_s2: write-var u#25904:u32 <= b28_s1:u32
        ctx.emitter().write_variable(fn_state.u_25904.clone(), b28_s1.clone());
        // b28_s3: const #14s : i4
        let b28_s3 = ctx
            .emitter()
            .constant(
                14isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b28_s4: const #18s : i5
        let b28_s4 = ctx
            .emitter()
            .constant(
                18isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b28_s5: bit-extract b28_s1 b28_s3 b28_s4
        let b28_s5 = ctx
            .emitter()
            .bit_extract(b28_s1.clone(), b28_s3.clone(), b28_s4.clone());
        // b28_s6: cast reint b28_s5 -> u18
        let b28_s6 = ctx
            .emitter()
            .cast(
                b28_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 18,
                },
                CastOperationKind::Reinterpret,
            );
        // b28_s7: const #224004u : u18
        let b28_s7 = ctx
            .emitter()
            .constant(
                224004,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 18,
                },
            );
        // b28_s8: cmp-eq b28_s6 b28_s7
        let b28_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b28_s6.clone(), b28_s7.clone()),
            );
        // b28_s9: branch b28_s8 block218 block29
        return ctx
            .emitter()
            .branch(
                b28_s8.clone(),
                fn_state.block_refs[218usize].clone(),
                fn_state.block_refs[29usize].clone(),
            );
    }
    fn block_29(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b29_s0: read-var merge#var:struct
        let b29_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b29_s1: extract-field b29_s0.tuple#%i_%bv321
        let b29_s1 = b29_s0.tuple__pcnt_i__pcnt_bv321;
        // b29_s2: write-var u#25909:u32 <= b29_s1:u32
        ctx.emitter().write_variable(fn_state.u_25909.clone(), b29_s1.clone());
        // b29_s3: const #21s : i5
        let b29_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b29_s4: const #10s : i4
        let b29_s4 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b29_s5: bit-extract b29_s1 b29_s3 b29_s4
        let b29_s5 = ctx
            .emitter()
            .bit_extract(b29_s1.clone(), b29_s3.clone(), b29_s4.clone());
        // b29_s6: cast reint b29_s5 -> u10
        let b29_s6 = ctx
            .emitter()
            .cast(
                b29_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
                CastOperationKind::Reinterpret,
            );
        // b29_s7: const #466u : u10
        let b29_s7 = ctx
            .emitter()
            .constant(
                466,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
            );
        // b29_s8: cmp-eq b29_s6 b29_s7
        let b29_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b29_s6.clone(), b29_s7.clone()),
            );
        // b29_s9: branch b29_s8 block214 block30
        return ctx
            .emitter()
            .branch(
                b29_s8.clone(),
                fn_state.block_refs[214usize].clone(),
                fn_state.block_refs[30usize].clone(),
            );
    }
    fn block_30(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b30_s0: read-var merge#var:struct
        let b30_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b30_s1: extract-field b30_s0.tuple#%i_%bv321
        let b30_s1 = b30_s0.tuple__pcnt_i__pcnt_bv321;
        // b30_s2: write-var u#25915:u32 <= b30_s1:u32
        ctx.emitter().write_variable(fn_state.u_25915.clone(), b30_s1.clone());
        // b30_s3: const #21s : i5
        let b30_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b30_s4: const #10s : i4
        let b30_s4 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b30_s5: bit-extract b30_s1 b30_s3 b30_s4
        let b30_s5 = ctx
            .emitter()
            .bit_extract(b30_s1.clone(), b30_s3.clone(), b30_s4.clone());
        // b30_s6: cast reint b30_s5 -> u10
        let b30_s6 = ctx
            .emitter()
            .cast(
                b30_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
                CastOperationKind::Reinterpret,
            );
        // b30_s7: const #978u : u10
        let b30_s7 = ctx
            .emitter()
            .constant(
                978,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
            );
        // b30_s8: cmp-eq b30_s6 b30_s7
        let b30_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b30_s6.clone(), b30_s7.clone()),
            );
        // b30_s9: branch b30_s8 block210 block31
        return ctx
            .emitter()
            .branch(
                b30_s8.clone(),
                fn_state.block_refs[210usize].clone(),
                fn_state.block_refs[31usize].clone(),
            );
    }
    fn block_31(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b31_s0: read-var merge#var:struct
        let b31_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b31_s1: extract-field b31_s0.tuple#%i_%bv321
        let b31_s1 = b31_s0.tuple__pcnt_i__pcnt_bv321;
        // b31_s2: write-var u#25923:u32 <= b31_s1:u32
        ctx.emitter().write_variable(fn_state.u_25923.clone(), b31_s1.clone());
        // b31_s3: const #21s : i5
        let b31_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b31_s4: const #10s : i4
        let b31_s4 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b31_s5: bit-extract b31_s1 b31_s3 b31_s4
        let b31_s5 = ctx
            .emitter()
            .bit_extract(b31_s1.clone(), b31_s3.clone(), b31_s4.clone());
        // b31_s6: cast reint b31_s5 -> u10
        let b31_s6 = ctx
            .emitter()
            .cast(
                b31_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
                CastOperationKind::Reinterpret,
            );
        // b31_s7: const #466u : u10
        let b31_s7 = ctx
            .emitter()
            .constant(
                466,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
            );
        // b31_s8: cmp-eq b31_s6 b31_s7
        let b31_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b31_s6.clone(), b31_s7.clone()),
            );
        // b31_s9: branch b31_s8 block206 block32
        return ctx
            .emitter()
            .branch(
                b31_s8.clone(),
                fn_state.block_refs[206usize].clone(),
                fn_state.block_refs[32usize].clone(),
            );
    }
    fn block_32(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b32_s0: read-var merge#var:struct
        let b32_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b32_s1: extract-field b32_s0.tuple#%i_%bv321
        let b32_s1 = b32_s0.tuple__pcnt_i__pcnt_bv321;
        // b32_s2: write-var u#25930:u32 <= b32_s1:u32
        ctx.emitter().write_variable(fn_state.u_25930.clone(), b32_s1.clone());
        // b32_s3: const #21s : i5
        let b32_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b32_s4: const #10s : i4
        let b32_s4 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b32_s5: bit-extract b32_s1 b32_s3 b32_s4
        let b32_s5 = ctx
            .emitter()
            .bit_extract(b32_s1.clone(), b32_s3.clone(), b32_s4.clone());
        // b32_s6: cast reint b32_s5 -> u10
        let b32_s6 = ctx
            .emitter()
            .cast(
                b32_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
                CastOperationKind::Reinterpret,
            );
        // b32_s7: const #978u : u10
        let b32_s7 = ctx
            .emitter()
            .constant(
                978,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
            );
        // b32_s8: cmp-eq b32_s6 b32_s7
        let b32_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b32_s6.clone(), b32_s7.clone()),
            );
        // b32_s9: branch b32_s8 block202 block33
        return ctx
            .emitter()
            .branch(
                b32_s8.clone(),
                fn_state.block_refs[202usize].clone(),
                fn_state.block_refs[33usize].clone(),
            );
    }
    fn block_33(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b33_s0: read-var merge#var:struct
        let b33_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b33_s1: extract-field b33_s0.tuple#%i_%bv321
        let b33_s1 = b33_s0.tuple__pcnt_i__pcnt_bv321;
        // b33_s2: write-var u#25938:u32 <= b33_s1:u32
        ctx.emitter().write_variable(fn_state.u_25938.clone(), b33_s1.clone());
        // b33_s3: const #10s : i4
        let b33_s3 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b33_s4: const #21s : i5
        let b33_s4 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b33_s5: bit-extract b33_s1 b33_s3 b33_s4
        let b33_s5 = ctx
            .emitter()
            .bit_extract(b33_s1.clone(), b33_s3.clone(), b33_s4.clone());
        // b33_s6: cast reint b33_s5 -> u21
        let b33_s6 = ctx
            .emitter()
            .cast(
                b33_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 21,
                },
                CastOperationKind::Reinterpret,
            );
        // b33_s7: const #1486853u : u21
        let b33_s7 = ctx
            .emitter()
            .constant(
                1486853,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 21,
                },
            );
        // b33_s8: cmp-eq b33_s6 b33_s7
        let b33_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b33_s6.clone(), b33_s7.clone()),
            );
        // b33_s9: branch b33_s8 block200 block34
        return ctx
            .emitter()
            .branch(
                b33_s8.clone(),
                fn_state.block_refs[200usize].clone(),
                fn_state.block_refs[34usize].clone(),
            );
    }
    fn block_34(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b34_s0: read-var merge#var:struct
        let b34_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b34_s1: extract-field b34_s0.tuple#%i_%bv321
        let b34_s1 = b34_s0.tuple__pcnt_i__pcnt_bv321;
        // b34_s2: write-var u#25944:u32 <= b34_s1:u32
        ctx.emitter().write_variable(fn_state.u_25944.clone(), b34_s1.clone());
        // b34_s3: const #10s : i4
        let b34_s3 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b34_s4: const #21s : i5
        let b34_s4 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b34_s5: bit-extract b34_s1 b34_s3 b34_s4
        let b34_s5 = ctx
            .emitter()
            .bit_extract(b34_s1.clone(), b34_s3.clone(), b34_s4.clone());
        // b34_s6: cast reint b34_s5 -> u21
        let b34_s6 = ctx
            .emitter()
            .cast(
                b34_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 21,
                },
                CastOperationKind::Reinterpret,
            );
        // b34_s7: const #1486852u : u21
        let b34_s7 = ctx
            .emitter()
            .constant(
                1486852,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 21,
                },
            );
        // b34_s8: cmp-eq b34_s6 b34_s7
        let b34_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b34_s6.clone(), b34_s7.clone()),
            );
        // b34_s9: branch b34_s8 block198 block35
        return ctx
            .emitter()
            .branch(
                b34_s8.clone(),
                fn_state.block_refs[198usize].clone(),
                fn_state.block_refs[35usize].clone(),
            );
    }
    fn block_35(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b35_s0: read-var merge#var:struct
        let b35_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b35_s1: extract-field b35_s0.tuple#%i_%bv321
        let b35_s1 = b35_s0.tuple__pcnt_i__pcnt_bv321;
        // b35_s2: write-var u#25950:u32 <= b35_s1:u32
        ctx.emitter().write_variable(fn_state.u_25950.clone(), b35_s1.clone());
        // b35_s3: const #10s : i4
        let b35_s3 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b35_s4: const #21s : i5
        let b35_s4 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b35_s5: bit-extract b35_s1 b35_s3 b35_s4
        let b35_s5 = ctx
            .emitter()
            .bit_extract(b35_s1.clone(), b35_s3.clone(), b35_s4.clone());
        // b35_s6: cast reint b35_s5 -> u21
        let b35_s6 = ctx
            .emitter()
            .cast(
                b35_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 21,
                },
                CastOperationKind::Reinterpret,
            );
        // b35_s7: const #1486855u : u21
        let b35_s7 = ctx
            .emitter()
            .constant(
                1486855,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 21,
                },
            );
        // b35_s8: cmp-eq b35_s6 b35_s7
        let b35_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b35_s6.clone(), b35_s7.clone()),
            );
        // b35_s9: branch b35_s8 block196 block36
        return ctx
            .emitter()
            .branch(
                b35_s8.clone(),
                fn_state.block_refs[196usize].clone(),
                fn_state.block_refs[36usize].clone(),
            );
    }
    fn block_36(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b36_s0: read-var merge#var:struct
        let b36_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b36_s1: extract-field b36_s0.tuple#%i_%bv321
        let b36_s1 = b36_s0.tuple__pcnt_i__pcnt_bv321;
        // b36_s2: write-var u#25955:u32 <= b36_s1:u32
        ctx.emitter().write_variable(fn_state.u_25955.clone(), b36_s1.clone());
        // b36_s3: const #21s : i5
        let b36_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b36_s4: const #10s : i4
        let b36_s4 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b36_s5: bit-extract b36_s1 b36_s3 b36_s4
        let b36_s5 = ctx
            .emitter()
            .bit_extract(b36_s1.clone(), b36_s3.clone(), b36_s4.clone());
        // b36_s6: cast reint b36_s5 -> u10
        let b36_s6 = ctx
            .emitter()
            .cast(
                b36_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
                CastOperationKind::Reinterpret,
            );
        // b36_s7: const #214u : u10
        let b36_s7 = ctx
            .emitter()
            .constant(
                214,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
            );
        // b36_s8: cmp-eq b36_s6 b36_s7
        let b36_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b36_s6.clone(), b36_s7.clone()),
            );
        // b36_s9: branch b36_s8 block193 block37
        return ctx
            .emitter()
            .branch(
                b36_s8.clone(),
                fn_state.block_refs[193usize].clone(),
                fn_state.block_refs[37usize].clone(),
            );
    }
    fn block_37(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b37_s0: read-var merge#var:struct
        let b37_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b37_s1: extract-field b37_s0.tuple#%i_%bv321
        let b37_s1 = b37_s0.tuple__pcnt_i__pcnt_bv321;
        // b37_s2: write-var u#25961:u32 <= b37_s1:u32
        ctx.emitter().write_variable(fn_state.u_25961.clone(), b37_s1.clone());
        // b37_s3: const #21s : i5
        let b37_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b37_s4: const #10s : i4
        let b37_s4 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b37_s5: bit-extract b37_s1 b37_s3 b37_s4
        let b37_s5 = ctx
            .emitter()
            .bit_extract(b37_s1.clone(), b37_s3.clone(), b37_s4.clone());
        // b37_s6: cast reint b37_s5 -> u10
        let b37_s6 = ctx
            .emitter()
            .cast(
                b37_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
                CastOperationKind::Reinterpret,
            );
        // b37_s7: const #214u : u10
        let b37_s7 = ctx
            .emitter()
            .constant(
                214,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
            );
        // b37_s8: cmp-eq b37_s6 b37_s7
        let b37_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b37_s6.clone(), b37_s7.clone()),
            );
        // b37_s9: branch b37_s8 block190 block38
        return ctx
            .emitter()
            .branch(
                b37_s8.clone(),
                fn_state.block_refs[190usize].clone(),
                fn_state.block_refs[38usize].clone(),
            );
    }
    fn block_38(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b38_s0: read-var merge#var:struct
        let b38_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b38_s1: extract-field b38_s0.tuple#%i_%bv321
        let b38_s1 = b38_s0.tuple__pcnt_i__pcnt_bv321;
        // b38_s2: write-var u#25969:u32 <= b38_s1:u32
        ctx.emitter().write_variable(fn_state.u_25969.clone(), b38_s1.clone());
        // b38_s3: const #21s : i5
        let b38_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b38_s4: const #10s : i4
        let b38_s4 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b38_s5: bit-extract b38_s1 b38_s3 b38_s4
        let b38_s5 = ctx
            .emitter()
            .bit_extract(b38_s1.clone(), b38_s3.clone(), b38_s4.clone());
        // b38_s6: cast reint b38_s5 -> u10
        let b38_s6 = ctx
            .emitter()
            .cast(
                b38_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
                CastOperationKind::Reinterpret,
            );
        // b38_s7: const #212u : u10
        let b38_s7 = ctx
            .emitter()
            .constant(
                212,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
            );
        // b38_s8: cmp-eq b38_s6 b38_s7
        let b38_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b38_s6.clone(), b38_s7.clone()),
            );
        // b38_s9: branch b38_s8 block187 block39
        return ctx
            .emitter()
            .branch(
                b38_s8.clone(),
                fn_state.block_refs[187usize].clone(),
                fn_state.block_refs[39usize].clone(),
            );
    }
    fn block_39(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b39_s0: read-var merge#var:struct
        let b39_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b39_s1: extract-field b39_s0.tuple#%i_%bv321
        let b39_s1 = b39_s0.tuple__pcnt_i__pcnt_bv321;
        // b39_s2: write-var u#25977:u32 <= b39_s1:u32
        ctx.emitter().write_variable(fn_state.u_25977.clone(), b39_s1.clone());
        // b39_s3: const #21s : i5
        let b39_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b39_s4: const #10s : i4
        let b39_s4 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b39_s5: bit-extract b39_s1 b39_s3 b39_s4
        let b39_s5 = ctx
            .emitter()
            .bit_extract(b39_s1.clone(), b39_s3.clone(), b39_s4.clone());
        // b39_s6: cast reint b39_s5 -> u10
        let b39_s6 = ctx
            .emitter()
            .cast(
                b39_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
                CastOperationKind::Reinterpret,
            );
        // b39_s7: const #212u : u10
        let b39_s7 = ctx
            .emitter()
            .constant(
                212,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
            );
        // b39_s8: cmp-eq b39_s6 b39_s7
        let b39_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b39_s6.clone(), b39_s7.clone()),
            );
        // b39_s9: branch b39_s8 block184 block40
        return ctx
            .emitter()
            .branch(
                b39_s8.clone(),
                fn_state.block_refs[184usize].clone(),
                fn_state.block_refs[40usize].clone(),
            );
    }
    fn block_40(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b40_s0: read-var merge#var:struct
        let b40_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b40_s1: extract-field b40_s0.tuple#%i_%bv321
        let b40_s1 = b40_s0.tuple__pcnt_i__pcnt_bv321;
        // b40_s2: write-var u#25986:u32 <= b40_s1:u32
        ctx.emitter().write_variable(fn_state.u_25986.clone(), b40_s1.clone());
        // b40_s3: const #21s : i5
        let b40_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b40_s4: const #10s : i4
        let b40_s4 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b40_s5: bit-extract b40_s1 b40_s3 b40_s4
        let b40_s5 = ctx
            .emitter()
            .bit_extract(b40_s1.clone(), b40_s3.clone(), b40_s4.clone());
        // b40_s6: cast reint b40_s5 -> u10
        let b40_s6 = ctx
            .emitter()
            .cast(
                b40_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
                CastOperationKind::Reinterpret,
            );
        // b40_s7: const #724u : u10
        let b40_s7 = ctx
            .emitter()
            .constant(
                724,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
            );
        // b40_s8: cmp-eq b40_s6 b40_s7
        let b40_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b40_s6.clone(), b40_s7.clone()),
            );
        // b40_s9: branch b40_s8 block181 block41
        return ctx
            .emitter()
            .branch(
                b40_s8.clone(),
                fn_state.block_refs[181usize].clone(),
                fn_state.block_refs[41usize].clone(),
            );
    }
    fn block_41(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b41_s0: read-var merge#var:struct
        let b41_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b41_s1: extract-field b41_s0.tuple#%i_%bv321
        let b41_s1 = b41_s0.tuple__pcnt_i__pcnt_bv321;
        // b41_s2: write-var u#25995:u32 <= b41_s1:u32
        ctx.emitter().write_variable(fn_state.u_25995.clone(), b41_s1.clone());
        // b41_s3: const #21s : i5
        let b41_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b41_s4: const #10s : i4
        let b41_s4 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b41_s5: bit-extract b41_s1 b41_s3 b41_s4
        let b41_s5 = ctx
            .emitter()
            .bit_extract(b41_s1.clone(), b41_s3.clone(), b41_s4.clone());
        // b41_s6: cast reint b41_s5 -> u10
        let b41_s6 = ctx
            .emitter()
            .cast(
                b41_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
                CastOperationKind::Reinterpret,
            );
        // b41_s7: const #724u : u10
        let b41_s7 = ctx
            .emitter()
            .constant(
                724,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
            );
        // b41_s8: cmp-eq b41_s6 b41_s7
        let b41_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b41_s6.clone(), b41_s7.clone()),
            );
        // b41_s9: branch b41_s8 block178 block42
        return ctx
            .emitter()
            .branch(
                b41_s8.clone(),
                fn_state.block_refs[178usize].clone(),
                fn_state.block_refs[42usize].clone(),
            );
    }
    fn block_42(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b42_s0: read-var merge#var:struct
        let b42_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b42_s1: extract-field b42_s0.tuple#%i_%bv321
        let b42_s1 = b42_s0.tuple__pcnt_i__pcnt_bv321;
        // b42_s2: write-var u#26004:u32 <= b42_s1:u32
        ctx.emitter().write_variable(fn_state.u_26004.clone(), b42_s1.clone());
        // b42_s3: const #10s : i4
        let b42_s3 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b42_s4: const #21s : i5
        let b42_s4 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b42_s5: bit-extract b42_s1 b42_s3 b42_s4
        let b42_s5 = ctx
            .emitter()
            .bit_extract(b42_s1.clone(), b42_s3.clone(), b42_s4.clone());
        // b42_s6: cast reint b42_s5 -> u21
        let b42_s6 = ctx
            .emitter()
            .cast(
                b42_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 21,
                },
                CastOperationKind::Reinterpret,
            );
        // b42_s7: const #1486854u : u21
        let b42_s7 = ctx
            .emitter()
            .constant(
                1486854,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 21,
                },
            );
        // b42_s8: cmp-eq b42_s6 b42_s7
        let b42_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b42_s6.clone(), b42_s7.clone()),
            );
        // b42_s9: branch b42_s8 block176 block43
        return ctx
            .emitter()
            .branch(
                b42_s8.clone(),
                fn_state.block_refs[176usize].clone(),
                fn_state.block_refs[43usize].clone(),
            );
    }
    fn block_43(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b43_s0: read-var merge#var:struct
        let b43_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b43_s1: extract-field b43_s0.tuple#%i_%bv321
        let b43_s1 = b43_s0.tuple__pcnt_i__pcnt_bv321;
        // b43_s2: write-var u#26009:u32 <= b43_s1:u32
        ctx.emitter().write_variable(fn_state.u_26009.clone(), b43_s1.clone());
        // b43_s3: const #21s : i5
        let b43_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b43_s4: const #11s : i4
        let b43_s4 = ctx
            .emitter()
            .constant(
                11isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b43_s5: bit-extract b43_s1 b43_s3 b43_s4
        let b43_s5 = ctx
            .emitter()
            .bit_extract(b43_s1.clone(), b43_s3.clone(), b43_s4.clone());
        // b43_s6: cast reint b43_s5 -> u11
        let b43_s6 = ctx
            .emitter()
            .cast(
                b43_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 11,
                },
                CastOperationKind::Reinterpret,
            );
        // b43_s7: const #1238u : u11
        let b43_s7 = ctx
            .emitter()
            .constant(
                1238,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 11,
                },
            );
        // b43_s8: cmp-eq b43_s6 b43_s7
        let b43_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b43_s6.clone(), b43_s7.clone()),
            );
        // b43_s9: branch b43_s8 block173 block44
        return ctx
            .emitter()
            .branch(
                b43_s8.clone(),
                fn_state.block_refs[173usize].clone(),
                fn_state.block_refs[44usize].clone(),
            );
    }
    fn block_44(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b44_s0: read-var merge#var:struct
        let b44_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b44_s1: extract-field b44_s0.tuple#%i_%bv321
        let b44_s1 = b44_s0.tuple__pcnt_i__pcnt_bv321;
        // b44_s2: write-var u#26011:u32 <= b44_s1:u32
        ctx.emitter().write_variable(fn_state.u_26011.clone(), b44_s1.clone());
        // b44_s3: const #21s : i5
        let b44_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b44_s4: const #11s : i4
        let b44_s4 = ctx
            .emitter()
            .constant(
                11isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b44_s5: bit-extract b44_s1 b44_s3 b44_s4
        let b44_s5 = ctx
            .emitter()
            .bit_extract(b44_s1.clone(), b44_s3.clone(), b44_s4.clone());
        // b44_s6: cast reint b44_s5 -> u11
        let b44_s6 = ctx
            .emitter()
            .cast(
                b44_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 11,
                },
                CastOperationKind::Reinterpret,
            );
        // b44_s7: const #1238u : u11
        let b44_s7 = ctx
            .emitter()
            .constant(
                1238,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 11,
                },
            );
        // b44_s8: cmp-eq b44_s6 b44_s7
        let b44_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b44_s6.clone(), b44_s7.clone()),
            );
        // b44_s9: branch b44_s8 block170 block45
        return ctx
            .emitter()
            .branch(
                b44_s8.clone(),
                fn_state.block_refs[170usize].clone(),
                fn_state.block_refs[45usize].clone(),
            );
    }
    fn block_45(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b45_s0: read-var merge#var:struct
        let b45_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b45_s1: extract-field b45_s0.tuple#%i_%bv321
        let b45_s1 = b45_s0.tuple__pcnt_i__pcnt_bv321;
        // b45_s2: write-var u#26016:u32 <= b45_s1:u32
        ctx.emitter().write_variable(fn_state.u_26016.clone(), b45_s1.clone());
        // b45_s3: const #21s : i5
        let b45_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b45_s4: const #10s : i4
        let b45_s4 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b45_s5: bit-extract b45_s1 b45_s3 b45_s4
        let b45_s5 = ctx
            .emitter()
            .bit_extract(b45_s1.clone(), b45_s3.clone(), b45_s4.clone());
        // b45_s6: cast reint b45_s5 -> u10
        let b45_s6 = ctx
            .emitter()
            .cast(
                b45_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
                CastOperationKind::Reinterpret,
            );
        // b45_s7: const #216u : u10
        let b45_s7 = ctx
            .emitter()
            .constant(
                216,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
            );
        // b45_s8: cmp-eq b45_s6 b45_s7
        let b45_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b45_s6.clone(), b45_s7.clone()),
            );
        // b45_s9: branch b45_s8 block167 block46
        return ctx
            .emitter()
            .branch(
                b45_s8.clone(),
                fn_state.block_refs[167usize].clone(),
                fn_state.block_refs[46usize].clone(),
            );
    }
    fn block_46(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b46_s0: read-var merge#var:struct
        let b46_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b46_s1: extract-field b46_s0.tuple#%i_%bv321
        let b46_s1 = b46_s0.tuple__pcnt_i__pcnt_bv321;
        // b46_s2: write-var u#26022:u32 <= b46_s1:u32
        ctx.emitter().write_variable(fn_state.u_26022.clone(), b46_s1.clone());
        // b46_s3: const #21s : i5
        let b46_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b46_s4: const #10s : i4
        let b46_s4 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b46_s5: bit-extract b46_s1 b46_s3 b46_s4
        let b46_s5 = ctx
            .emitter()
            .bit_extract(b46_s1.clone(), b46_s3.clone(), b46_s4.clone());
        // b46_s6: cast reint b46_s5 -> u10
        let b46_s6 = ctx
            .emitter()
            .cast(
                b46_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
                CastOperationKind::Reinterpret,
            );
        // b46_s7: const #216u : u10
        let b46_s7 = ctx
            .emitter()
            .constant(
                216,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
            );
        // b46_s8: cmp-eq b46_s6 b46_s7
        let b46_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b46_s6.clone(), b46_s7.clone()),
            );
        // b46_s9: branch b46_s8 block164 block47
        return ctx
            .emitter()
            .branch(
                b46_s8.clone(),
                fn_state.block_refs[164usize].clone(),
                fn_state.block_refs[47usize].clone(),
            );
    }
    fn block_47(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b47_s0: read-var merge#var:struct
        let b47_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b47_s1: extract-field b47_s0.tuple#%i_%bv321
        let b47_s1 = b47_s0.tuple__pcnt_i__pcnt_bv321;
        // b47_s2: write-var u#26030:u32 <= b47_s1:u32
        ctx.emitter().write_variable(fn_state.u_26030.clone(), b47_s1.clone());
        // b47_s3: const #14s : i4
        let b47_s3 = ctx
            .emitter()
            .constant(
                14isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b47_s4: const #18s : i5
        let b47_s4 = ctx
            .emitter()
            .constant(
                18isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b47_s5: bit-extract b47_s1 b47_s3 b47_s4
        let b47_s5 = ctx
            .emitter()
            .bit_extract(b47_s1.clone(), b47_s3.clone(), b47_s4.clone());
        // b47_s6: cast reint b47_s5 -> u18
        let b47_s6 = ctx
            .emitter()
            .cast(
                b47_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 18,
                },
                CastOperationKind::Reinterpret,
            );
        // b47_s7: const #224004u : u18
        let b47_s7 = ctx
            .emitter()
            .constant(
                224004,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 18,
                },
            );
        // b47_s8: cmp-eq b47_s6 b47_s7
        let b47_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b47_s6.clone(), b47_s7.clone()),
            );
        // b47_s9: branch b47_s8 block161 block48
        return ctx
            .emitter()
            .branch(
                b47_s8.clone(),
                fn_state.block_refs[161usize].clone(),
                fn_state.block_refs[48usize].clone(),
            );
    }
    fn block_48(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b48_s0: read-var merge#var:struct
        let b48_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b48_s1: extract-field b48_s0.tuple#%i_%bv321
        let b48_s1 = b48_s0.tuple__pcnt_i__pcnt_bv321;
        // b48_s2: write-var u#26035:u32 <= b48_s1:u32
        ctx.emitter().write_variable(fn_state.u_26035.clone(), b48_s1.clone());
        // b48_s3: const #14s : i4
        let b48_s3 = ctx
            .emitter()
            .constant(
                14isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b48_s4: const #18s : i5
        let b48_s4 = ctx
            .emitter()
            .constant(
                18isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b48_s5: bit-extract b48_s1 b48_s3 b48_s4
        let b48_s5 = ctx
            .emitter()
            .bit_extract(b48_s1.clone(), b48_s3.clone(), b48_s4.clone());
        // b48_s6: cast reint b48_s5 -> u18
        let b48_s6 = ctx
            .emitter()
            .cast(
                b48_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 18,
                },
                CastOperationKind::Reinterpret,
            );
        // b48_s7: const #224004u : u18
        let b48_s7 = ctx
            .emitter()
            .constant(
                224004,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 18,
                },
            );
        // b48_s8: cmp-eq b48_s6 b48_s7
        let b48_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b48_s6.clone(), b48_s7.clone()),
            );
        // b48_s9: branch b48_s8 block158 block49
        return ctx
            .emitter()
            .branch(
                b48_s8.clone(),
                fn_state.block_refs[158usize].clone(),
                fn_state.block_refs[49usize].clone(),
            );
    }
    fn block_49(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b49_s0: read-var merge#var:struct
        let b49_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b49_s1: extract-field b49_s0.tuple#%i_%bv321
        let b49_s1 = b49_s0.tuple__pcnt_i__pcnt_bv321;
        // b49_s2: write-var u#26040:u32 <= b49_s1:u32
        ctx.emitter().write_variable(fn_state.u_26040.clone(), b49_s1.clone());
        // b49_s3: const #21s : i5
        let b49_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b49_s4: const #11s : i4
        let b49_s4 = ctx
            .emitter()
            .constant(
                11isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b49_s5: bit-extract b49_s1 b49_s3 b49_s4
        let b49_s5 = ctx
            .emitter()
            .bit_extract(b49_s1.clone(), b49_s3.clone(), b49_s4.clone());
        // b49_s6: cast reint b49_s5 -> u11
        let b49_s6 = ctx
            .emitter()
            .cast(
                b49_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 11,
                },
                CastOperationKind::Reinterpret,
            );
        // b49_s7: const #1238u : u11
        let b49_s7 = ctx
            .emitter()
            .constant(
                1238,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 11,
                },
            );
        // b49_s8: cmp-eq b49_s6 b49_s7
        let b49_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b49_s6.clone(), b49_s7.clone()),
            );
        // b49_s9: branch b49_s8 block155 block50
        return ctx
            .emitter()
            .branch(
                b49_s8.clone(),
                fn_state.block_refs[155usize].clone(),
                fn_state.block_refs[50usize].clone(),
            );
    }
    fn block_50(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b50_s0: read-var merge#var:struct
        let b50_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b50_s1: extract-field b50_s0.tuple#%i_%bv321
        let b50_s1 = b50_s0.tuple__pcnt_i__pcnt_bv321;
        // b50_s2: write-var u#26045:u32 <= b50_s1:u32
        ctx.emitter().write_variable(fn_state.u_26045.clone(), b50_s1.clone());
        // b50_s3: const #14s : i4
        let b50_s3 = ctx
            .emitter()
            .constant(
                14isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b50_s4: const #18s : i5
        let b50_s4 = ctx
            .emitter()
            .constant(
                18isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b50_s5: bit-extract b50_s1 b50_s3 b50_s4
        let b50_s5 = ctx
            .emitter()
            .bit_extract(b50_s1.clone(), b50_s3.clone(), b50_s4.clone());
        // b50_s6: cast reint b50_s5 -> u18
        let b50_s6 = ctx
            .emitter()
            .cast(
                b50_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 18,
                },
                CastOperationKind::Reinterpret,
            );
        // b50_s7: const #224004u : u18
        let b50_s7 = ctx
            .emitter()
            .constant(
                224004,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 18,
                },
            );
        // b50_s8: cmp-eq b50_s6 b50_s7
        let b50_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b50_s6.clone(), b50_s7.clone()),
            );
        // b50_s9: branch b50_s8 block152 block51
        return ctx
            .emitter()
            .branch(
                b50_s8.clone(),
                fn_state.block_refs[152usize].clone(),
                fn_state.block_refs[51usize].clone(),
            );
    }
    fn block_51(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b51_s0: read-var merge#var:struct
        let b51_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b51_s1: extract-field b51_s0.tuple#%i_%bv321
        let b51_s1 = b51_s0.tuple__pcnt_i__pcnt_bv321;
        // b51_s2: write-var u#26050:u32 <= b51_s1:u32
        ctx.emitter().write_variable(fn_state.u_26050.clone(), b51_s1.clone());
        // b51_s3: const #14s : i4
        let b51_s3 = ctx
            .emitter()
            .constant(
                14isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b51_s4: const #18s : i5
        let b51_s4 = ctx
            .emitter()
            .constant(
                18isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b51_s5: bit-extract b51_s1 b51_s3 b51_s4
        let b51_s5 = ctx
            .emitter()
            .bit_extract(b51_s1.clone(), b51_s3.clone(), b51_s4.clone());
        // b51_s6: cast reint b51_s5 -> u18
        let b51_s6 = ctx
            .emitter()
            .cast(
                b51_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 18,
                },
                CastOperationKind::Reinterpret,
            );
        // b51_s7: const #224004u : u18
        let b51_s7 = ctx
            .emitter()
            .constant(
                224004,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 18,
                },
            );
        // b51_s8: cmp-eq b51_s6 b51_s7
        let b51_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b51_s6.clone(), b51_s7.clone()),
            );
        // b51_s9: branch b51_s8 block149 block52
        return ctx
            .emitter()
            .branch(
                b51_s8.clone(),
                fn_state.block_refs[149usize].clone(),
                fn_state.block_refs[52usize].clone(),
            );
    }
    fn block_52(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b52_s0: read-var merge#var:struct
        let b52_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b52_s1: extract-field b52_s0.tuple#%i_%bv321
        let b52_s1 = b52_s0.tuple__pcnt_i__pcnt_bv321;
        // b52_s2: write-var u#26055:u32 <= b52_s1:u32
        ctx.emitter().write_variable(fn_state.u_26055.clone(), b52_s1.clone());
        // b52_s3: const #10s : i4
        let b52_s3 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b52_s4: const #21s : i5
        let b52_s4 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b52_s5: bit-extract b52_s1 b52_s3 b52_s4
        let b52_s5 = ctx
            .emitter()
            .bit_extract(b52_s1.clone(), b52_s3.clone(), b52_s4.clone());
        // b52_s6: cast reint b52_s5 -> u21
        let b52_s6 = ctx
            .emitter()
            .cast(
                b52_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 21,
                },
                CastOperationKind::Reinterpret,
            );
        // b52_s7: const #1486848u : u21
        let b52_s7 = ctx
            .emitter()
            .constant(
                1486848,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 21,
                },
            );
        // b52_s8: cmp-eq b52_s6 b52_s7
        let b52_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b52_s6.clone(), b52_s7.clone()),
            );
        // b52_s9: branch b52_s8 block147 block53
        return ctx
            .emitter()
            .branch(
                b52_s8.clone(),
                fn_state.block_refs[147usize].clone(),
                fn_state.block_refs[53usize].clone(),
            );
    }
    fn block_53(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b53_s0: read-var merge#var:struct
        let b53_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b53_s1: extract-field b53_s0.tuple#%i_%bv321
        let b53_s1 = b53_s0.tuple__pcnt_i__pcnt_bv321;
        // b53_s2: write-var u#26060:u32 <= b53_s1:u32
        ctx.emitter().write_variable(fn_state.u_26060.clone(), b53_s1.clone());
        // b53_s3: const #11s : i4
        let b53_s3 = ctx
            .emitter()
            .constant(
                11isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b53_s4: const #20s : i5
        let b53_s4 = ctx
            .emitter()
            .constant(
                20isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b53_s5: bit-extract b53_s1 b53_s3 b53_s4
        let b53_s5 = ctx
            .emitter()
            .bit_extract(b53_s1.clone(), b53_s3.clone(), b53_s4.clone());
        // b53_s6: cast reint b53_s5 -> u20
        let b53_s6 = ctx
            .emitter()
            .cast(
                b53_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 20,
                },
                CastOperationKind::Reinterpret,
            );
        // b53_s7: const #743425u : u20
        let b53_s7 = ctx
            .emitter()
            .constant(
                743425,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 20,
                },
            );
        // b53_s8: cmp-eq b53_s6 b53_s7
        let b53_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b53_s6.clone(), b53_s7.clone()),
            );
        // b53_s9: branch b53_s8 block145 block54
        return ctx
            .emitter()
            .branch(
                b53_s8.clone(),
                fn_state.block_refs[145usize].clone(),
                fn_state.block_refs[54usize].clone(),
            );
    }
    fn block_54(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b54_s0: read-var merge#var:struct
        let b54_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b54_s1: extract-field b54_s0.tuple#%i_%bv321
        let b54_s1 = b54_s0.tuple__pcnt_i__pcnt_bv321;
        // b54_s2: write-var u#26066:u32 <= b54_s1:u32
        ctx.emitter().write_variable(fn_state.u_26066.clone(), b54_s1.clone());
        // b54_s3: const #10s : i4
        let b54_s3 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b54_s4: const #21s : i5
        let b54_s4 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b54_s5: bit-extract b54_s1 b54_s3 b54_s4
        let b54_s5 = ctx
            .emitter()
            .bit_extract(b54_s1.clone(), b54_s3.clone(), b54_s4.clone());
        // b54_s6: cast reint b54_s5 -> u21
        let b54_s6 = ctx
            .emitter()
            .cast(
                b54_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 21,
                },
                CastOperationKind::Reinterpret,
            );
        // b54_s7: const #1486849u : u21
        let b54_s7 = ctx
            .emitter()
            .constant(
                1486849,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 21,
                },
            );
        // b54_s8: cmp-eq b54_s6 b54_s7
        let b54_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b54_s6.clone(), b54_s7.clone()),
            );
        // b54_s9: branch b54_s8 block143 block55
        return ctx
            .emitter()
            .branch(
                b54_s8.clone(),
                fn_state.block_refs[143usize].clone(),
                fn_state.block_refs[55usize].clone(),
            );
    }
    fn block_55(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b55_s0: read-var merge#var:struct
        let b55_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b55_s1: extract-field b55_s0.tuple#%i_%bv321
        let b55_s1 = b55_s0.tuple__pcnt_i__pcnt_bv321;
        // b55_s2: write-var u#26072:u32 <= b55_s1:u32
        ctx.emitter().write_variable(fn_state.u_26072.clone(), b55_s1.clone());
        // b55_s3: const #10s : i4
        let b55_s3 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b55_s4: const #22s : i5
        let b55_s4 = ctx
            .emitter()
            .constant(
                22isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b55_s5: bit-extract b55_s1 b55_s3 b55_s4
        let b55_s5 = ctx
            .emitter()
            .bit_extract(b55_s1.clone(), b55_s3.clone(), b55_s4.clone());
        // b55_s6: cast reint b55_s5 -> u22
        let b55_s6 = ctx
            .emitter()
            .cast(
                b55_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 22,
                },
                CastOperationKind::Reinterpret,
            );
        // b55_s7: const #3584002u : u22
        let b55_s7 = ctx
            .emitter()
            .constant(
                3584002,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 22,
                },
            );
        // b55_s8: cmp-eq b55_s6 b55_s7
        let b55_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b55_s6.clone(), b55_s7.clone()),
            );
        // b55_s9: branch b55_s8 block141 block56
        return ctx
            .emitter()
            .branch(
                b55_s8.clone(),
                fn_state.block_refs[141usize].clone(),
                fn_state.block_refs[56usize].clone(),
            );
    }
    fn block_56(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b56_s0: read-var merge#var:struct
        let b56_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b56_s1: extract-field b56_s0.tuple#%i_%bv321
        let b56_s1 = b56_s0.tuple__pcnt_i__pcnt_bv321;
        // b56_s2: write-var u#26078:u32 <= b56_s1:u32
        ctx.emitter().write_variable(fn_state.u_26078.clone(), b56_s1.clone());
        // b56_s3: const #21s : i5
        let b56_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b56_s4: const #11s : i4
        let b56_s4 = ctx
            .emitter()
            .constant(
                11isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b56_s5: bit-extract b56_s1 b56_s3 b56_s4
        let b56_s5 = ctx
            .emitter()
            .bit_extract(b56_s1.clone(), b56_s3.clone(), b56_s4.clone());
        // b56_s6: cast reint b56_s5 -> u11
        let b56_s6 = ctx
            .emitter()
            .cast(
                b56_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 11,
                },
                CastOperationKind::Reinterpret,
            );
        // b56_s7: const #1488u : u11
        let b56_s7 = ctx
            .emitter()
            .constant(
                1488,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 11,
                },
            );
        // b56_s8: cmp-eq b56_s6 b56_s7
        let b56_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b56_s6.clone(), b56_s7.clone()),
            );
        // b56_s9: branch b56_s8 block137 block57
        return ctx
            .emitter()
            .branch(
                b56_s8.clone(),
                fn_state.block_refs[137usize].clone(),
                fn_state.block_refs[57usize].clone(),
            );
    }
    fn block_57(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b57_s0: read-var merge#var:struct
        let b57_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b57_s1: extract-field b57_s0.tuple#%i_%bv321
        let b57_s1 = b57_s0.tuple__pcnt_i__pcnt_bv321;
        // b57_s2: write-var u#26083:u32 <= b57_s1:u32
        ctx.emitter().write_variable(fn_state.u_26083.clone(), b57_s1.clone());
        // b57_s3: const #21s : i5
        let b57_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b57_s4: const #10s : i4
        let b57_s4 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b57_s5: bit-extract b57_s1 b57_s3 b57_s4
        let b57_s5 = ctx
            .emitter()
            .bit_extract(b57_s1.clone(), b57_s3.clone(), b57_s4.clone());
        // b57_s6: cast reint b57_s5 -> u10
        let b57_s6 = ctx
            .emitter()
            .cast(
                b57_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
                CastOperationKind::Reinterpret,
            );
        // b57_s7: const #214u : u10
        let b57_s7 = ctx
            .emitter()
            .constant(
                214,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
            );
        // b57_s8: cmp-eq b57_s6 b57_s7
        let b57_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b57_s6.clone(), b57_s7.clone()),
            );
        // b57_s9: branch b57_s8 block134 block58
        return ctx
            .emitter()
            .branch(
                b57_s8.clone(),
                fn_state.block_refs[134usize].clone(),
                fn_state.block_refs[58usize].clone(),
            );
    }
    fn block_58(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b58_s0: read-var merge#var:struct
        let b58_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b58_s1: extract-field b58_s0.tuple#%i_%bv321
        let b58_s1 = b58_s0.tuple__pcnt_i__pcnt_bv321;
        // b58_s2: write-var u#26089:u32 <= b58_s1:u32
        ctx.emitter().write_variable(fn_state.u_26089.clone(), b58_s1.clone());
        // b58_s3: const #21s : i5
        let b58_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b58_s4: const #10s : i4
        let b58_s4 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b58_s5: bit-extract b58_s1 b58_s3 b58_s4
        let b58_s5 = ctx
            .emitter()
            .bit_extract(b58_s1.clone(), b58_s3.clone(), b58_s4.clone());
        // b58_s6: cast reint b58_s5 -> u10
        let b58_s6 = ctx
            .emitter()
            .cast(
                b58_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
                CastOperationKind::Reinterpret,
            );
        // b58_s7: const #214u : u10
        let b58_s7 = ctx
            .emitter()
            .constant(
                214,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
            );
        // b58_s8: cmp-eq b58_s6 b58_s7
        let b58_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b58_s6.clone(), b58_s7.clone()),
            );
        // b58_s9: branch b58_s8 block131 block59
        return ctx
            .emitter()
            .branch(
                b58_s8.clone(),
                fn_state.block_refs[131usize].clone(),
                fn_state.block_refs[59usize].clone(),
            );
    }
    fn block_59(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b59_s0: read-var merge#var:struct
        let b59_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b59_s1: extract-field b59_s0.tuple#%i_%bv321
        let b59_s1 = b59_s0.tuple__pcnt_i__pcnt_bv321;
        // b59_s2: write-var u#26096:u32 <= b59_s1:u32
        ctx.emitter().write_variable(fn_state.u_26096.clone(), b59_s1.clone());
        // b59_s3: const #15s : i4
        let b59_s3 = ctx
            .emitter()
            .constant(
                15isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b59_s4: const #17s : i5
        let b59_s4 = ctx
            .emitter()
            .constant(
                17isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b59_s5: bit-extract b59_s1 b59_s3 b59_s4
        let b59_s5 = ctx
            .emitter()
            .bit_extract(b59_s1.clone(), b59_s3.clone(), b59_s4.clone());
        // b59_s6: cast reint b59_s5 -> u17
        let b59_s6 = ctx
            .emitter()
            .cast(
                b59_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 17,
                },
                CastOperationKind::Reinterpret,
            );
        // b59_s7: const #29696u : u17
        let b59_s7 = ctx
            .emitter()
            .constant(
                29696,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 17,
                },
            );
        // b59_s8: cmp-eq b59_s6 b59_s7
        let b59_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b59_s6.clone(), b59_s7.clone()),
            );
        // b59_s9: branch b59_s8 block127 block60
        return ctx
            .emitter()
            .branch(
                b59_s8.clone(),
                fn_state.block_refs[127usize].clone(),
                fn_state.block_refs[60usize].clone(),
            );
    }
    fn block_60(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b60_s0: read-var merge#var:struct
        let b60_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b60_s1: extract-field b60_s0.tuple#%i_%bv321
        let b60_s1 = b60_s0.tuple__pcnt_i__pcnt_bv321;
        // b60_s2: write-var u#26101:u32 <= b60_s1:u32
        ctx.emitter().write_variable(fn_state.u_26101.clone(), b60_s1.clone());
        // b60_s3: const #21s : i5
        let b60_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b60_s4: const #11s : i4
        let b60_s4 = ctx
            .emitter()
            .constant(
                11isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b60_s5: bit-extract b60_s1 b60_s3 b60_s4
        let b60_s5 = ctx
            .emitter()
            .bit_extract(b60_s1.clone(), b60_s3.clone(), b60_s4.clone());
        // b60_s6: cast reint b60_s5 -> u11
        let b60_s6 = ctx
            .emitter()
            .cast(
                b60_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 11,
                },
                CastOperationKind::Reinterpret,
            );
        // b60_s7: const #1241u : u11
        let b60_s7 = ctx
            .emitter()
            .constant(
                1241,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 11,
                },
            );
        // b60_s8: cmp-eq b60_s6 b60_s7
        let b60_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b60_s6.clone(), b60_s7.clone()),
            );
        // b60_s9: branch b60_s8 block124 block61
        return ctx
            .emitter()
            .branch(
                b60_s8.clone(),
                fn_state.block_refs[124usize].clone(),
                fn_state.block_refs[61usize].clone(),
            );
    }
    fn block_61(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b61_s0: read-var merge#var:struct
        let b61_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b61_s1: extract-field b61_s0.tuple#%i_%bv321
        let b61_s1 = b61_s0.tuple__pcnt_i__pcnt_bv321;
        // b61_s2: write-var u#26108:u32 <= b61_s1:u32
        ctx.emitter().write_variable(fn_state.u_26108.clone(), b61_s1.clone());
        // b61_s3: const #21s : i5
        let b61_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b61_s4: const #11s : i4
        let b61_s4 = ctx
            .emitter()
            .constant(
                11isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b61_s5: bit-extract b61_s1 b61_s3 b61_s4
        let b61_s5 = ctx
            .emitter()
            .bit_extract(b61_s1.clone(), b61_s3.clone(), b61_s4.clone());
        // b61_s6: cast reint b61_s5 -> u11
        let b61_s6 = ctx
            .emitter()
            .cast(
                b61_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 11,
                },
                CastOperationKind::Reinterpret,
            );
        // b61_s7: const #1241u : u11
        let b61_s7 = ctx
            .emitter()
            .constant(
                1241,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 11,
                },
            );
        // b61_s8: cmp-eq b61_s6 b61_s7
        let b61_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b61_s6.clone(), b61_s7.clone()),
            );
        // b61_s9: branch b61_s8 block121 block62
        return ctx
            .emitter()
            .branch(
                b61_s8.clone(),
                fn_state.block_refs[121usize].clone(),
                fn_state.block_refs[62usize].clone(),
            );
    }
    fn block_62(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b62_s0: read-var merge#var:struct
        let b62_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b62_s1: extract-field b62_s0.tuple#%i_%bv321
        let b62_s1 = b62_s0.tuple__pcnt_i__pcnt_bv321;
        // b62_s2: write-var u#26116:u32 <= b62_s1:u32
        ctx.emitter().write_variable(fn_state.u_26116.clone(), b62_s1.clone());
        // b62_s3: const #21s : i5
        let b62_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b62_s4: const #11s : i4
        let b62_s4 = ctx
            .emitter()
            .constant(
                11isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b62_s5: bit-extract b62_s1 b62_s3 b62_s4
        let b62_s5 = ctx
            .emitter()
            .bit_extract(b62_s1.clone(), b62_s3.clone(), b62_s4.clone());
        // b62_s6: cast reint b62_s5 -> u11
        let b62_s6 = ctx
            .emitter()
            .cast(
                b62_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 11,
                },
                CastOperationKind::Reinterpret,
            );
        // b62_s7: const #1245u : u11
        let b62_s7 = ctx
            .emitter()
            .constant(
                1245,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 11,
                },
            );
        // b62_s8: cmp-eq b62_s6 b62_s7
        let b62_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b62_s6.clone(), b62_s7.clone()),
            );
        // b62_s9: branch b62_s8 block118 block63
        return ctx
            .emitter()
            .branch(
                b62_s8.clone(),
                fn_state.block_refs[118usize].clone(),
                fn_state.block_refs[63usize].clone(),
            );
    }
    fn block_63(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b63_s0: read-var merge#var:struct
        let b63_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b63_s1: extract-field b63_s0.tuple#%i_%bv321
        let b63_s1 = b63_s0.tuple__pcnt_i__pcnt_bv321;
        // b63_s2: write-var u#26124:u32 <= b63_s1:u32
        ctx.emitter().write_variable(fn_state.u_26124.clone(), b63_s1.clone());
        // b63_s3: const #21s : i5
        let b63_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b63_s4: const #11s : i4
        let b63_s4 = ctx
            .emitter()
            .constant(
                11isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b63_s5: bit-extract b63_s1 b63_s3 b63_s4
        let b63_s5 = ctx
            .emitter()
            .bit_extract(b63_s1.clone(), b63_s3.clone(), b63_s4.clone());
        // b63_s6: cast reint b63_s5 -> u11
        let b63_s6 = ctx
            .emitter()
            .cast(
                b63_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 11,
                },
                CastOperationKind::Reinterpret,
            );
        // b63_s7: const #1245u : u11
        let b63_s7 = ctx
            .emitter()
            .constant(
                1245,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 11,
                },
            );
        // b63_s8: cmp-eq b63_s6 b63_s7
        let b63_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b63_s6.clone(), b63_s7.clone()),
            );
        // b63_s9: branch b63_s8 block115 block64
        return ctx
            .emitter()
            .branch(
                b63_s8.clone(),
                fn_state.block_refs[115usize].clone(),
                fn_state.block_refs[64usize].clone(),
            );
    }
    fn block_64(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b64_s0: read-var merge#var:struct
        let b64_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b64_s1: extract-field b64_s0.tuple#%i_%bv321
        let b64_s1 = b64_s0.tuple__pcnt_i__pcnt_bv321;
        // b64_s2: write-var u#26132:u32 <= b64_s1:u32
        ctx.emitter().write_variable(fn_state.u_26132.clone(), b64_s1.clone());
        // b64_s3: const #21s : i5
        let b64_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b64_s4: const #10s : i4
        let b64_s4 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b64_s5: bit-extract b64_s1 b64_s3 b64_s4
        let b64_s5 = ctx
            .emitter()
            .bit_extract(b64_s1.clone(), b64_s3.clone(), b64_s4.clone());
        // b64_s6: cast reint b64_s5 -> u10
        let b64_s6 = ctx
            .emitter()
            .cast(
                b64_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
                CastOperationKind::Reinterpret,
            );
        // b64_s7: const #214u : u10
        let b64_s7 = ctx
            .emitter()
            .constant(
                214,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
            );
        // b64_s8: cmp-eq b64_s6 b64_s7
        let b64_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b64_s6.clone(), b64_s7.clone()),
            );
        // b64_s9: branch b64_s8 block112 block65
        return ctx
            .emitter()
            .branch(
                b64_s8.clone(),
                fn_state.block_refs[112usize].clone(),
                fn_state.block_refs[65usize].clone(),
            );
    }
    fn block_65(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b65_s0: read-var merge#var:struct
        let b65_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b65_s1: extract-field b65_s0.tuple#%i_%bv321
        let b65_s1 = b65_s0.tuple__pcnt_i__pcnt_bv321;
        // b65_s2: write-var u#26138:u32 <= b65_s1:u32
        ctx.emitter().write_variable(fn_state.u_26138.clone(), b65_s1.clone());
        // b65_s3: const #21s : i5
        let b65_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b65_s4: const #10s : i4
        let b65_s4 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b65_s5: bit-extract b65_s1 b65_s3 b65_s4
        let b65_s5 = ctx
            .emitter()
            .bit_extract(b65_s1.clone(), b65_s3.clone(), b65_s4.clone());
        // b65_s6: cast reint b65_s5 -> u10
        let b65_s6 = ctx
            .emitter()
            .cast(
                b65_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
                CastOperationKind::Reinterpret,
            );
        // b65_s7: const #214u : u10
        let b65_s7 = ctx
            .emitter()
            .constant(
                214,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
            );
        // b65_s8: cmp-eq b65_s6 b65_s7
        let b65_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b65_s6.clone(), b65_s7.clone()),
            );
        // b65_s9: branch b65_s8 block109 block66
        return ctx
            .emitter()
            .branch(
                b65_s8.clone(),
                fn_state.block_refs[109usize].clone(),
                fn_state.block_refs[66usize].clone(),
            );
    }
    fn block_66(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b66_s0: read-var merge#var:struct
        let b66_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b66_s1: extract-field b66_s0.tuple#%i_%bv321
        let b66_s1 = b66_s0.tuple__pcnt_i__pcnt_bv321;
        // b66_s2: write-var u#26144:u32 <= b66_s1:u32
        ctx.emitter().write_variable(fn_state.u_26144.clone(), b66_s1.clone());
        // b66_s3: const #21s : i5
        let b66_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b66_s4: const #11s : i4
        let b66_s4 = ctx
            .emitter()
            .constant(
                11isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b66_s5: bit-extract b66_s1 b66_s3 b66_s4
        let b66_s5 = ctx
            .emitter()
            .bit_extract(b66_s1.clone(), b66_s3.clone(), b66_s4.clone());
        // b66_s6: cast reint b66_s5 -> u11
        let b66_s6 = ctx
            .emitter()
            .cast(
                b66_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 11,
                },
                CastOperationKind::Reinterpret,
            );
        // b66_s7: const #1242u : u11
        let b66_s7 = ctx
            .emitter()
            .constant(
                1242,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 11,
                },
            );
        // b66_s8: cmp-eq b66_s6 b66_s7
        let b66_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b66_s6.clone(), b66_s7.clone()),
            );
        // b66_s9: branch b66_s8 block100 block67
        return ctx
            .emitter()
            .branch(
                b66_s8.clone(),
                fn_state.block_refs[100usize].clone(),
                fn_state.block_refs[67usize].clone(),
            );
    }
    fn block_67(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b67_s0: read-var merge#var:struct
        let b67_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b67_s1: extract-field b67_s0.tuple#%i_%bv321
        let b67_s1 = b67_s0.tuple__pcnt_i__pcnt_bv321;
        // b67_s2: write-var u#26151:u32 <= b67_s1:u32
        ctx.emitter().write_variable(fn_state.u_26151.clone(), b67_s1.clone());
        // b67_s3: const #21s : i5
        let b67_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b67_s4: const #11s : i4
        let b67_s4 = ctx
            .emitter()
            .constant(
                11isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b67_s5: bit-extract b67_s1 b67_s3 b67_s4
        let b67_s5 = ctx
            .emitter()
            .bit_extract(b67_s1.clone(), b67_s3.clone(), b67_s4.clone());
        // b67_s6: cast reint b67_s5 -> u11
        let b67_s6 = ctx
            .emitter()
            .cast(
                b67_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 11,
                },
                CastOperationKind::Reinterpret,
            );
        // b67_s7: const #1246u : u11
        let b67_s7 = ctx
            .emitter()
            .constant(
                1246,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 11,
                },
            );
        // b67_s8: cmp-eq b67_s6 b67_s7
        let b67_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b67_s6.clone(), b67_s7.clone()),
            );
        // b67_s9: branch b67_s8 block91 block68
        return ctx
            .emitter()
            .branch(
                b67_s8.clone(),
                fn_state.block_refs[91usize].clone(),
                fn_state.block_refs[68usize].clone(),
            );
    }
    fn block_68(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b68_s0: read-var merge#var:struct
        let b68_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b68_s1: extract-field b68_s0.tuple#%i_%bv321
        let b68_s1 = b68_s0.tuple__pcnt_i__pcnt_bv321;
        // b68_s2: write-var u#26158:u32 <= b68_s1:u32
        ctx.emitter().write_variable(fn_state.u_26158.clone(), b68_s1.clone());
        // b68_s3: const #21s : i5
        let b68_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b68_s4: const #11s : i4
        let b68_s4 = ctx
            .emitter()
            .constant(
                11isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b68_s5: bit-extract b68_s1 b68_s3 b68_s4
        let b68_s5 = ctx
            .emitter()
            .bit_extract(b68_s1.clone(), b68_s3.clone(), b68_s4.clone());
        // b68_s6: cast reint b68_s5 -> u11
        let b68_s6 = ctx
            .emitter()
            .cast(
                b68_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 11,
                },
                CastOperationKind::Reinterpret,
            );
        // b68_s7: const #1238u : u11
        let b68_s7 = ctx
            .emitter()
            .constant(
                1238,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 11,
                },
            );
        // b68_s8: cmp-eq b68_s6 b68_s7
        let b68_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b68_s6.clone(), b68_s7.clone()),
            );
        // b68_s9: branch b68_s8 block88 block69
        return ctx
            .emitter()
            .branch(
                b68_s8.clone(),
                fn_state.block_refs[88usize].clone(),
                fn_state.block_refs[69usize].clone(),
            );
    }
    fn block_69(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b69_s0: read-var merge#var:struct
        let b69_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b69_s1: extract-field b69_s0.tuple#%i_%bv321
        let b69_s1 = b69_s0.tuple__pcnt_i__pcnt_bv321;
        // b69_s2: write-var u#26163:u32 <= b69_s1:u32
        ctx.emitter().write_variable(fn_state.u_26163.clone(), b69_s1.clone());
        // b69_s3: const #21s : i5
        let b69_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b69_s4: const #11s : i4
        let b69_s4 = ctx
            .emitter()
            .constant(
                11isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b69_s5: bit-extract b69_s1 b69_s3 b69_s4
        let b69_s5 = ctx
            .emitter()
            .bit_extract(b69_s1.clone(), b69_s3.clone(), b69_s4.clone());
        // b69_s6: cast reint b69_s5 -> u11
        let b69_s6 = ctx
            .emitter()
            .cast(
                b69_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 11,
                },
                CastOperationKind::Reinterpret,
            );
        // b69_s7: const #1494u : u11
        let b69_s7 = ctx
            .emitter()
            .constant(
                1494,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 11,
                },
            );
        // b69_s8: cmp-eq b69_s6 b69_s7
        let b69_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b69_s6.clone(), b69_s7.clone()),
            );
        // b69_s9: branch b69_s8 block85 block70
        return ctx
            .emitter()
            .branch(
                b69_s8.clone(),
                fn_state.block_refs[85usize].clone(),
                fn_state.block_refs[70usize].clone(),
            );
    }
    fn block_70(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b70_s0: read-var merge#var:struct
        let b70_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b70_s1: extract-field b70_s0.tuple#%i_%bv321
        let b70_s1 = b70_s0.tuple__pcnt_i__pcnt_bv321;
        // b70_s2: write-var u#26168:u32 <= b70_s1:u32
        ctx.emitter().write_variable(fn_state.u_26168.clone(), b70_s1.clone());
        // b70_s3: const #21s : i5
        let b70_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b70_s4: const #10s : i4
        let b70_s4 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b70_s5: bit-extract b70_s1 b70_s3 b70_s4
        let b70_s5 = ctx
            .emitter()
            .bit_extract(b70_s1.clone(), b70_s3.clone(), b70_s4.clone());
        // b70_s6: cast reint b70_s5 -> u10
        let b70_s6 = ctx
            .emitter()
            .cast(
                b70_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
                CastOperationKind::Reinterpret,
            );
        // b70_s7: const #214u : u10
        let b70_s7 = ctx
            .emitter()
            .constant(
                214,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
            );
        // b70_s8: cmp-eq b70_s6 b70_s7
        let b70_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b70_s6.clone(), b70_s7.clone()),
            );
        // b70_s9: branch b70_s8 block82 block71
        return ctx
            .emitter()
            .branch(
                b70_s8.clone(),
                fn_state.block_refs[82usize].clone(),
                fn_state.block_refs[71usize].clone(),
            );
    }
    fn block_71(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b71_s0: read-var merge#var:struct
        let b71_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b71_s1: extract-field b71_s0.tuple#%i_%bv321
        let b71_s1 = b71_s0.tuple__pcnt_i__pcnt_bv321;
        // b71_s2: write-var u#26174:u32 <= b71_s1:u32
        ctx.emitter().write_variable(fn_state.u_26174.clone(), b71_s1.clone());
        // b71_s3: const #21s : i5
        let b71_s3 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b71_s4: const #10s : i4
        let b71_s4 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b71_s5: bit-extract b71_s1 b71_s3 b71_s4
        let b71_s5 = ctx
            .emitter()
            .bit_extract(b71_s1.clone(), b71_s3.clone(), b71_s4.clone());
        // b71_s6: cast reint b71_s5 -> u10
        let b71_s6 = ctx
            .emitter()
            .cast(
                b71_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
                CastOperationKind::Reinterpret,
            );
        // b71_s7: const #214u : u10
        let b71_s7 = ctx
            .emitter()
            .constant(
                214,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 10,
                },
            );
        // b71_s8: cmp-eq b71_s6 b71_s7
        let b71_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b71_s6.clone(), b71_s7.clone()),
            );
        // b71_s9: branch b71_s8 block79 block72
        return ctx
            .emitter()
            .branch(
                b71_s8.clone(),
                fn_state.block_refs[79usize].clone(),
                fn_state.block_refs[72usize].clone(),
            );
    }
    fn block_72(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b72_s0: read-var merge#var:struct
        let b72_s0 = ctx.emitter().read_variable(fn_state.merge_var.clone());
        // b72_s1: extract-field b72_s0.tuple#%i_%bv321
        let b72_s1 = b72_s0.tuple__pcnt_i__pcnt_bv321;
        // b72_s2: write-var u#26180:u32 <= b72_s1:u32
        ctx.emitter().write_variable(fn_state.u_26180.clone(), b72_s1.clone());
        // b72_s3: const #11s : i4
        let b72_s3 = ctx
            .emitter()
            .constant(
                11isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b72_s4: const #21s : i5
        let b72_s4 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b72_s5: bit-extract b72_s1 b72_s3 b72_s4
        let b72_s5 = ctx
            .emitter()
            .bit_extract(b72_s1.clone(), b72_s3.clone(), b72_s4.clone());
        // b72_s6: cast reint b72_s5 -> u21
        let b72_s6 = ctx
            .emitter()
            .cast(
                b72_s5.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 21,
                },
                CastOperationKind::Reinterpret,
            );
        // b72_s7: const #1792040u : u21
        let b72_s7 = ctx
            .emitter()
            .constant(
                1792040,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 21,
                },
            );
        // b72_s8: cmp-eq b72_s6 b72_s7
        let b72_s8 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b72_s6.clone(), b72_s7.clone()),
            );
        // b72_s9: branch b72_s8 block74 block73
        return ctx
            .emitter()
            .branch(
                b72_s8.clone(),
                fn_state.block_refs[74usize].clone(),
                fn_state.block_refs[73usize].clone(),
            );
    }
    fn block_73(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b73_s0: const #() : ()
        let b73_s0 = ();
        // b73_s1: create-sum enum = Error_Undefined:"b73_s0"
        let b73_s1 = Enum41fb7833ab6da036::Error_Undefined(b73_s0);
        // b73_s2: const #15712u : u32
        let b73_s2 = ctx
            .emitter()
            .constant(
                15712,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b73_s3: write-reg b73_s2 <= b73_s1
        let b73_s3 = ctx.emitter().write_register(b73_s2.clone(), b73_s1.clone());
        // b73_s4: const #1u : u1
        let b73_s4 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b73_s5: const #15616u : u32
        let b73_s5 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b73_s6: write-reg b73_s5 <= b73_s4
        let b73_s6 = ctx.emitter().write_register(b73_s5.clone(), b73_s4.clone());
        // b73_s7: const #"data/sail-arm/arm-v9.4-a/src/decode_end.sail:49.48-49.73" : str
        let b73_s7 = "data/sail-arm/arm-v9.4-a/src/decode_end.sail:49.48-49.73";
        // b73_s8: const #14480u : u32
        let b73_s8 = ctx
            .emitter()
            .constant(
                14480,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b73_s9: write-reg b73_s8 <= b73_s7
        let b73_s9 = ctx.emitter().write_register(b73_s8.clone(), b73_s7.clone());
        // b73_s10: return
        return BlockResult::None;
    }
    fn block_74(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b74_s0: const #5s : i3
        let b74_s0 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b74_s1: read-var u#26180:u32
        let b74_s1 = ctx.emitter().read_variable(fn_state.u_26180.clone());
        // b74_s2: const #5s : i3
        let b74_s2 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b74_s3: bit-extract b74_s1 b74_s0 b74_s2
        let b74_s3 = ctx
            .emitter()
            .bit_extract(b74_s1.clone(), b74_s0.clone(), b74_s2.clone());
        // b74_s4: cast reint b74_s3 -> u5
        let b74_s4 = ctx
            .emitter()
            .cast(
                b74_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b74_s5: const #31u : u5
        let b74_s5 = ctx
            .emitter()
            .constant(
                31,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
            );
        // b74_s6: cmp-eq b74_s4 b74_s5
        let b74_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b74_s4.clone(), b74_s5.clone()),
            );
        // b74_s7: branch b74_s6 block75 block73
        return ctx
            .emitter()
            .branch(
                b74_s6.clone(),
                fn_state.block_refs[75usize].clone(),
                fn_state.block_refs[73usize].clone(),
            );
    }
    fn block_75(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b75_s0: const #1032s : i11
        let b75_s0 = ctx
            .emitter()
            .constant(
                1032isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 11,
                },
            );
        // b75_s1: const #14656u : u32
        let b75_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b75_s2: read-reg b75_s1:i
        let b75_s2 = ctx
            .emitter()
            .read_register(
                b75_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b75_s3: cmp-lt b75_s2 b75_s0
        let b75_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b75_s2.clone(), b75_s0.clone()),
            );
        // b75_s4: not b75_s3
        let b75_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b75_s3.clone()));
        // b75_s5: branch b75_s4 block73 block76
        return ctx
            .emitter()
            .branch(
                b75_s4.clone(),
                fn_state.block_refs[73usize].clone(),
                fn_state.block_refs[76usize].clone(),
            );
    }
    fn block_76(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b76_s0: const #1032s : i11
        let b76_s0 = ctx
            .emitter()
            .constant(
                1032isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 11,
                },
            );
        // b76_s1: const #14656u : u32
        let b76_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b76_s2: write-reg b76_s1 <= b76_s0
        let b76_s2 = ctx.emitter().write_register(b76_s1.clone(), b76_s0.clone());
        // b76_s3: const #0s : i0
        let b76_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b76_s4: const #5s : i3
        let b76_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b76_s5: read-var u#26180:u32
        let b76_s5 = ctx.emitter().read_variable(fn_state.u_26180.clone());
        // b76_s6: bit-extract b76_s5 b76_s3 b76_s4
        let b76_s6 = ctx
            .emitter()
            .bit_extract(b76_s5.clone(), b76_s3.clone(), b76_s4.clone());
        // b76_s7: cast reint b76_s6 -> u5
        let b76_s7 = ctx
            .emitter()
            .cast(
                b76_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b76_s8: const #5s : i3
        let b76_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b76_s9: const #5s : i3
        let b76_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b76_s10: read-var u#26180:u32
        let b76_s10 = ctx.emitter().read_variable(fn_state.u_26180.clone());
        // b76_s11: bit-extract b76_s10 b76_s8 b76_s9
        let b76_s11 = ctx
            .emitter()
            .bit_extract(b76_s10.clone(), b76_s8.clone(), b76_s9.clone());
        // b76_s12: cast reint b76_s11 -> u5
        let b76_s12 = ctx
            .emitter()
            .cast(
                b76_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b76_s13: const #10s : i4
        let b76_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b76_s14: const #1s : i1
        let b76_s14 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b76_s15: read-var u#26180:u32
        let b76_s15 = ctx.emitter().read_variable(fn_state.u_26180.clone());
        // b76_s16: bit-extract b76_s15 b76_s13 b76_s14
        let b76_s16 = ctx
            .emitter()
            .bit_extract(b76_s15.clone(), b76_s13.clone(), b76_s14.clone());
        // b76_s17: cast reint b76_s16 -> u1
        let b76_s17 = ctx
            .emitter()
            .cast(
                b76_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b76_s18: call decode_xpac_aarch64_instrs_integer_pac_strip_dp_1src(b76_s7, b76_s12, b76_s17)
        let b76_s18 = decode_xpac_aarch64_instrs_integer_pac_strip_dp_1src(
            ctx,
            b76_s7,
            b76_s12,
            b76_s17,
        );
        // b76_s19: const #15616u : u32
        let b76_s19 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b76_s20: read-reg b76_s19:u1
        let b76_s20 = ctx
            .emitter()
            .read_register(
                b76_s19.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b76_s21: branch b76_s20 block78 block77
        return ctx
            .emitter()
            .branch(
                b76_s20.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_77(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b77_s0: return
        return BlockResult::None;
    }
    fn block_78(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b78_s0: return
        return BlockResult::None;
    }
    fn block_79(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b79_s0: const #10s : i4
        let b79_s0 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b79_s1: read-var u#26174:u32
        let b79_s1 = ctx.emitter().read_variable(fn_state.u_26174.clone());
        // b79_s2: const #6s : i3
        let b79_s2 = ctx
            .emitter()
            .constant(
                6isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b79_s3: bit-extract b79_s1 b79_s0 b79_s2
        let b79_s3 = ctx
            .emitter()
            .bit_extract(b79_s1.clone(), b79_s0.clone(), b79_s2.clone());
        // b79_s4: cast reint b79_s3 -> u6
        let b79_s4 = ctx
            .emitter()
            .cast(
                b79_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
                CastOperationKind::Reinterpret,
            );
        // b79_s5: const #27u : u6
        let b79_s5 = ctx
            .emitter()
            .constant(
                27,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
            );
        // b79_s6: cmp-eq b79_s4 b79_s5
        let b79_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b79_s4.clone(), b79_s5.clone()),
            );
        // b79_s7: branch b79_s6 block80 block72
        return ctx
            .emitter()
            .branch(
                b79_s6.clone(),
                fn_state.block_refs[80usize].clone(),
                fn_state.block_refs[72usize].clone(),
            );
    }
    fn block_80(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b80_s0: const #1020s : i10
        let b80_s0 = ctx
            .emitter()
            .constant(
                1020isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b80_s1: const #14656u : u32
        let b80_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b80_s2: read-reg b80_s1:i
        let b80_s2 = ctx
            .emitter()
            .read_register(
                b80_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b80_s3: cmp-lt b80_s2 b80_s0
        let b80_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b80_s2.clone(), b80_s0.clone()),
            );
        // b80_s4: not b80_s3
        let b80_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b80_s3.clone()));
        // b80_s5: branch b80_s4 block72 block81
        return ctx
            .emitter()
            .branch(
                b80_s4.clone(),
                fn_state.block_refs[72usize].clone(),
                fn_state.block_refs[81usize].clone(),
            );
    }
    fn block_81(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b81_s0: const #1020s : i10
        let b81_s0 = ctx
            .emitter()
            .constant(
                1020isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b81_s1: const #14656u : u32
        let b81_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b81_s2: write-reg b81_s1 <= b81_s0
        let b81_s2 = ctx.emitter().write_register(b81_s1.clone(), b81_s0.clone());
        // b81_s3: const #0s : i0
        let b81_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b81_s4: const #5s : i3
        let b81_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b81_s5: read-var u#26174:u32
        let b81_s5 = ctx.emitter().read_variable(fn_state.u_26174.clone());
        // b81_s6: bit-extract b81_s5 b81_s3 b81_s4
        let b81_s6 = ctx
            .emitter()
            .bit_extract(b81_s5.clone(), b81_s3.clone(), b81_s4.clone());
        // b81_s7: cast reint b81_s6 -> u5
        let b81_s7 = ctx
            .emitter()
            .cast(
                b81_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b81_s8: const #5s : i3
        let b81_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b81_s9: const #5s : i3
        let b81_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b81_s10: read-var u#26174:u32
        let b81_s10 = ctx.emitter().read_variable(fn_state.u_26174.clone());
        // b81_s11: bit-extract b81_s10 b81_s8 b81_s9
        let b81_s11 = ctx
            .emitter()
            .bit_extract(b81_s10.clone(), b81_s8.clone(), b81_s9.clone());
        // b81_s12: cast reint b81_s11 -> u5
        let b81_s12 = ctx
            .emitter()
            .cast(
                b81_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b81_s13: const #16s : i5
        let b81_s13 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b81_s14: const #5s : i3
        let b81_s14 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b81_s15: read-var u#26174:u32
        let b81_s15 = ctx.emitter().read_variable(fn_state.u_26174.clone());
        // b81_s16: bit-extract b81_s15 b81_s13 b81_s14
        let b81_s16 = ctx
            .emitter()
            .bit_extract(b81_s15.clone(), b81_s13.clone(), b81_s14.clone());
        // b81_s17: cast reint b81_s16 -> u5
        let b81_s17 = ctx
            .emitter()
            .cast(
                b81_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b81_s18: const #31s : i5
        let b81_s18 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b81_s19: const #1s : i1
        let b81_s19 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b81_s20: read-var u#26174:u32
        let b81_s20 = ctx.emitter().read_variable(fn_state.u_26174.clone());
        // b81_s21: bit-extract b81_s20 b81_s18 b81_s19
        let b81_s21 = ctx
            .emitter()
            .bit_extract(b81_s20.clone(), b81_s18.clone(), b81_s19.clone());
        // b81_s22: cast reint b81_s21 -> u1
        let b81_s22 = ctx
            .emitter()
            .cast(
                b81_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b81_s23: call decode_umin_reg_aarch64_instrs_integer_arithmetic_max_min_umin_reg(b81_s7, b81_s12, b81_s17, b81_s22)
        let b81_s23 = decode_umin_reg_aarch64_instrs_integer_arithmetic_max_min_umin_reg(
            ctx,
            b81_s7,
            b81_s12,
            b81_s17,
            b81_s22,
        );
        // b81_s24: const #15616u : u32
        let b81_s24 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b81_s25: read-reg b81_s24:u1
        let b81_s25 = ctx
            .emitter()
            .read_register(
                b81_s24.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b81_s26: branch b81_s25 block78 block77
        return ctx
            .emitter()
            .branch(
                b81_s25.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_82(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b82_s0: const #10s : i4
        let b82_s0 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b82_s1: read-var u#26168:u32
        let b82_s1 = ctx.emitter().read_variable(fn_state.u_26168.clone());
        // b82_s2: const #6s : i3
        let b82_s2 = ctx
            .emitter()
            .constant(
                6isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b82_s3: bit-extract b82_s1 b82_s0 b82_s2
        let b82_s3 = ctx
            .emitter()
            .bit_extract(b82_s1.clone(), b82_s0.clone(), b82_s2.clone());
        // b82_s4: cast reint b82_s3 -> u6
        let b82_s4 = ctx
            .emitter()
            .cast(
                b82_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
                CastOperationKind::Reinterpret,
            );
        // b82_s5: const #25u : u6
        let b82_s5 = ctx
            .emitter()
            .constant(
                25,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
            );
        // b82_s6: cmp-eq b82_s4 b82_s5
        let b82_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b82_s4.clone(), b82_s5.clone()),
            );
        // b82_s7: branch b82_s6 block83 block71
        return ctx
            .emitter()
            .branch(
                b82_s6.clone(),
                fn_state.block_refs[83usize].clone(),
                fn_state.block_refs[71usize].clone(),
            );
    }
    fn block_83(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b83_s0: const #1019s : i10
        let b83_s0 = ctx
            .emitter()
            .constant(
                1019isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b83_s1: const #14656u : u32
        let b83_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b83_s2: read-reg b83_s1:i
        let b83_s2 = ctx
            .emitter()
            .read_register(
                b83_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b83_s3: cmp-lt b83_s2 b83_s0
        let b83_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b83_s2.clone(), b83_s0.clone()),
            );
        // b83_s4: not b83_s3
        let b83_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b83_s3.clone()));
        // b83_s5: branch b83_s4 block71 block84
        return ctx
            .emitter()
            .branch(
                b83_s4.clone(),
                fn_state.block_refs[71usize].clone(),
                fn_state.block_refs[84usize].clone(),
            );
    }
    fn block_84(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b84_s0: const #1019s : i10
        let b84_s0 = ctx
            .emitter()
            .constant(
                1019isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b84_s1: const #14656u : u32
        let b84_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b84_s2: write-reg b84_s1 <= b84_s0
        let b84_s2 = ctx.emitter().write_register(b84_s1.clone(), b84_s0.clone());
        // b84_s3: const #0s : i0
        let b84_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b84_s4: const #5s : i3
        let b84_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b84_s5: read-var u#26168:u32
        let b84_s5 = ctx.emitter().read_variable(fn_state.u_26168.clone());
        // b84_s6: bit-extract b84_s5 b84_s3 b84_s4
        let b84_s6 = ctx
            .emitter()
            .bit_extract(b84_s5.clone(), b84_s3.clone(), b84_s4.clone());
        // b84_s7: cast reint b84_s6 -> u5
        let b84_s7 = ctx
            .emitter()
            .cast(
                b84_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b84_s8: const #5s : i3
        let b84_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b84_s9: const #5s : i3
        let b84_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b84_s10: read-var u#26168:u32
        let b84_s10 = ctx.emitter().read_variable(fn_state.u_26168.clone());
        // b84_s11: bit-extract b84_s10 b84_s8 b84_s9
        let b84_s11 = ctx
            .emitter()
            .bit_extract(b84_s10.clone(), b84_s8.clone(), b84_s9.clone());
        // b84_s12: cast reint b84_s11 -> u5
        let b84_s12 = ctx
            .emitter()
            .cast(
                b84_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b84_s13: const #16s : i5
        let b84_s13 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b84_s14: const #5s : i3
        let b84_s14 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b84_s15: read-var u#26168:u32
        let b84_s15 = ctx.emitter().read_variable(fn_state.u_26168.clone());
        // b84_s16: bit-extract b84_s15 b84_s13 b84_s14
        let b84_s16 = ctx
            .emitter()
            .bit_extract(b84_s15.clone(), b84_s13.clone(), b84_s14.clone());
        // b84_s17: cast reint b84_s16 -> u5
        let b84_s17 = ctx
            .emitter()
            .cast(
                b84_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b84_s18: const #31s : i5
        let b84_s18 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b84_s19: const #1s : i1
        let b84_s19 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b84_s20: read-var u#26168:u32
        let b84_s20 = ctx.emitter().read_variable(fn_state.u_26168.clone());
        // b84_s21: bit-extract b84_s20 b84_s18 b84_s19
        let b84_s21 = ctx
            .emitter()
            .bit_extract(b84_s20.clone(), b84_s18.clone(), b84_s19.clone());
        // b84_s22: cast reint b84_s21 -> u1
        let b84_s22 = ctx
            .emitter()
            .cast(
                b84_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b84_s23: call decode_umax_reg_aarch64_instrs_integer_arithmetic_max_min_umax_reg(b84_s7, b84_s12, b84_s17, b84_s22)
        let b84_s23 = decode_umax_reg_aarch64_instrs_integer_arithmetic_max_min_umax_reg(
            ctx,
            b84_s7,
            b84_s12,
            b84_s17,
            b84_s22,
        );
        // b84_s24: const #15616u : u32
        let b84_s24 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b84_s25: read-reg b84_s24:u1
        let b84_s25 = ctx
            .emitter()
            .read_register(
                b84_s24.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b84_s26: branch b84_s25 block78 block77
        return ctx
            .emitter()
            .branch(
                b84_s25.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_85(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b85_s0: const #10s : i4
        let b85_s0 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b85_s1: read-var u#26163:u32
        let b85_s1 = ctx.emitter().read_variable(fn_state.u_26163.clone());
        // b85_s2: const #6s : i3
        let b85_s2 = ctx
            .emitter()
            .constant(
                6isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b85_s3: bit-extract b85_s1 b85_s0 b85_s2
        let b85_s3 = ctx
            .emitter()
            .bit_extract(b85_s1.clone(), b85_s0.clone(), b85_s2.clone());
        // b85_s4: cast reint b85_s3 -> u6
        let b85_s4 = ctx
            .emitter()
            .cast(
                b85_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
                CastOperationKind::Reinterpret,
            );
        // b85_s5: const #0u : u6
        let b85_s5 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
            );
        // b85_s6: cmp-eq b85_s4 b85_s5
        let b85_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b85_s4.clone(), b85_s5.clone()),
            );
        // b85_s7: branch b85_s6 block86 block70
        return ctx
            .emitter()
            .branch(
                b85_s6.clone(),
                fn_state.block_refs[86usize].clone(),
                fn_state.block_refs[70usize].clone(),
            );
    }
    fn block_86(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b86_s0: const #992s : i10
        let b86_s0 = ctx
            .emitter()
            .constant(
                992isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b86_s1: const #14656u : u32
        let b86_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b86_s2: read-reg b86_s1:i
        let b86_s2 = ctx
            .emitter()
            .read_register(
                b86_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b86_s3: cmp-lt b86_s2 b86_s0
        let b86_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b86_s2.clone(), b86_s0.clone()),
            );
        // b86_s4: not b86_s3
        let b86_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b86_s3.clone()));
        // b86_s5: branch b86_s4 block70 block87
        return ctx
            .emitter()
            .branch(
                b86_s4.clone(),
                fn_state.block_refs[70usize].clone(),
                fn_state.block_refs[87usize].clone(),
            );
    }
    fn block_87(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b87_s0: const #992s : i10
        let b87_s0 = ctx
            .emitter()
            .constant(
                992isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b87_s1: const #14656u : u32
        let b87_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b87_s2: write-reg b87_s1 <= b87_s0
        let b87_s2 = ctx.emitter().write_register(b87_s1.clone(), b87_s0.clone());
        // b87_s3: const #0s : i0
        let b87_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b87_s4: const #5s : i3
        let b87_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b87_s5: read-var u#26163:u32
        let b87_s5 = ctx.emitter().read_variable(fn_state.u_26163.clone());
        // b87_s6: bit-extract b87_s5 b87_s3 b87_s4
        let b87_s6 = ctx
            .emitter()
            .bit_extract(b87_s5.clone(), b87_s3.clone(), b87_s4.clone());
        // b87_s7: cast reint b87_s6 -> u5
        let b87_s7 = ctx
            .emitter()
            .cast(
                b87_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b87_s8: const #5s : i3
        let b87_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b87_s9: const #5s : i3
        let b87_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b87_s10: read-var u#26163:u32
        let b87_s10 = ctx.emitter().read_variable(fn_state.u_26163.clone());
        // b87_s11: bit-extract b87_s10 b87_s8 b87_s9
        let b87_s11 = ctx
            .emitter()
            .bit_extract(b87_s10.clone(), b87_s8.clone(), b87_s9.clone());
        // b87_s12: cast reint b87_s11 -> u5
        let b87_s12 = ctx
            .emitter()
            .cast(
                b87_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b87_s13: const #16s : i5
        let b87_s13 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b87_s14: const #5s : i3
        let b87_s14 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b87_s15: read-var u#26163:u32
        let b87_s15 = ctx.emitter().read_variable(fn_state.u_26163.clone());
        // b87_s16: bit-extract b87_s15 b87_s13 b87_s14
        let b87_s16 = ctx
            .emitter()
            .bit_extract(b87_s15.clone(), b87_s13.clone(), b87_s14.clone());
        // b87_s17: cast reint b87_s16 -> u5
        let b87_s17 = ctx
            .emitter()
            .cast(
                b87_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b87_s18: call decode_subps_aarch64_instrs_integer_arithmetic_pointer_mcsubtracttaggedaddresssetflags(b87_s7, b87_s12, b87_s17)
        let b87_s18 = decode_subps_aarch64_instrs_integer_arithmetic_pointer_mcsubtracttaggedaddresssetflags(
            ctx,
            b87_s7,
            b87_s12,
            b87_s17,
        );
        // b87_s19: const #15616u : u32
        let b87_s19 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b87_s20: read-reg b87_s19:u1
        let b87_s20 = ctx
            .emitter()
            .read_register(
                b87_s19.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b87_s21: branch b87_s20 block78 block77
        return ctx
            .emitter()
            .branch(
                b87_s20.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_88(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b88_s0: const #10s : i4
        let b88_s0 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b88_s1: read-var u#26158:u32
        let b88_s1 = ctx.emitter().read_variable(fn_state.u_26158.clone());
        // b88_s2: const #6s : i3
        let b88_s2 = ctx
            .emitter()
            .constant(
                6isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b88_s3: bit-extract b88_s1 b88_s0 b88_s2
        let b88_s3 = ctx
            .emitter()
            .bit_extract(b88_s1.clone(), b88_s0.clone(), b88_s2.clone());
        // b88_s4: cast reint b88_s3 -> u6
        let b88_s4 = ctx
            .emitter()
            .cast(
                b88_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
                CastOperationKind::Reinterpret,
            );
        // b88_s5: const #0u : u6
        let b88_s5 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
            );
        // b88_s6: cmp-eq b88_s4 b88_s5
        let b88_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b88_s4.clone(), b88_s5.clone()),
            );
        // b88_s7: branch b88_s6 block89 block69
        return ctx
            .emitter()
            .branch(
                b88_s6.clone(),
                fn_state.block_refs[89usize].clone(),
                fn_state.block_refs[69usize].clone(),
            );
    }
    fn block_89(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b89_s0: const #991s : i10
        let b89_s0 = ctx
            .emitter()
            .constant(
                991isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b89_s1: const #14656u : u32
        let b89_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b89_s2: read-reg b89_s1:i
        let b89_s2 = ctx
            .emitter()
            .read_register(
                b89_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b89_s3: cmp-lt b89_s2 b89_s0
        let b89_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b89_s2.clone(), b89_s0.clone()),
            );
        // b89_s4: not b89_s3
        let b89_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b89_s3.clone()));
        // b89_s5: branch b89_s4 block69 block90
        return ctx
            .emitter()
            .branch(
                b89_s4.clone(),
                fn_state.block_refs[69usize].clone(),
                fn_state.block_refs[90usize].clone(),
            );
    }
    fn block_90(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b90_s0: const #991s : i10
        let b90_s0 = ctx
            .emitter()
            .constant(
                991isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b90_s1: const #14656u : u32
        let b90_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b90_s2: write-reg b90_s1 <= b90_s0
        let b90_s2 = ctx.emitter().write_register(b90_s1.clone(), b90_s0.clone());
        // b90_s3: const #0s : i0
        let b90_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b90_s4: const #5s : i3
        let b90_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b90_s5: read-var u#26158:u32
        let b90_s5 = ctx.emitter().read_variable(fn_state.u_26158.clone());
        // b90_s6: bit-extract b90_s5 b90_s3 b90_s4
        let b90_s6 = ctx
            .emitter()
            .bit_extract(b90_s5.clone(), b90_s3.clone(), b90_s4.clone());
        // b90_s7: cast reint b90_s6 -> u5
        let b90_s7 = ctx
            .emitter()
            .cast(
                b90_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b90_s8: const #5s : i3
        let b90_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b90_s9: const #5s : i3
        let b90_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b90_s10: read-var u#26158:u32
        let b90_s10 = ctx.emitter().read_variable(fn_state.u_26158.clone());
        // b90_s11: bit-extract b90_s10 b90_s8 b90_s9
        let b90_s11 = ctx
            .emitter()
            .bit_extract(b90_s10.clone(), b90_s8.clone(), b90_s9.clone());
        // b90_s12: cast reint b90_s11 -> u5
        let b90_s12 = ctx
            .emitter()
            .cast(
                b90_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b90_s13: const #16s : i5
        let b90_s13 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b90_s14: const #5s : i3
        let b90_s14 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b90_s15: read-var u#26158:u32
        let b90_s15 = ctx.emitter().read_variable(fn_state.u_26158.clone());
        // b90_s16: bit-extract b90_s15 b90_s13 b90_s14
        let b90_s16 = ctx
            .emitter()
            .bit_extract(b90_s15.clone(), b90_s13.clone(), b90_s14.clone());
        // b90_s17: cast reint b90_s16 -> u5
        let b90_s17 = ctx
            .emitter()
            .cast(
                b90_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b90_s18: call decode_subp_aarch64_instrs_integer_arithmetic_pointer_mcsubtracttaggedaddress(b90_s7, b90_s12, b90_s17)
        let b90_s18 = decode_subp_aarch64_instrs_integer_arithmetic_pointer_mcsubtracttaggedaddress(
            ctx,
            b90_s7,
            b90_s12,
            b90_s17,
        );
        // b90_s19: const #15616u : u32
        let b90_s19 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b90_s20: read-reg b90_s19:u1
        let b90_s20 = ctx
            .emitter()
            .read_register(
                b90_s19.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b90_s21: branch b90_s20 block78 block77
        return ctx
            .emitter()
            .branch(
                b90_s20.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_91(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b91_s0: const #10s : i4
        let b91_s0 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b91_s1: read-var u#26151:u32
        let b91_s1 = ctx.emitter().read_variable(fn_state.u_26151.clone());
        // b91_s2: const #6s : i3
        let b91_s2 = ctx
            .emitter()
            .constant(
                6isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b91_s3: bit-extract b91_s1 b91_s0 b91_s2
        let b91_s3 = ctx
            .emitter()
            .bit_extract(b91_s1.clone(), b91_s0.clone(), b91_s2.clone());
        // b91_s4: cast reint b91_s3 -> u6
        let b91_s4 = ctx
            .emitter()
            .cast(
                b91_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
                CastOperationKind::Reinterpret,
            );
        // b91_s5: const #31u : u6
        let b91_s5 = ctx
            .emitter()
            .constant(
                31,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
            );
        // b91_s6: cmp-eq b91_s4 b91_s5
        let b91_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b91_s4.clone(), b91_s5.clone()),
            );
        // b91_s7: branch b91_s6 block92 block68
        return ctx
            .emitter()
            .branch(
                b91_s6.clone(),
                fn_state.block_refs[92usize].clone(),
                fn_state.block_refs[68usize].clone(),
            );
    }
    fn block_92(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b92_s0: const #862s : i10
        let b92_s0 = ctx
            .emitter()
            .constant(
                862isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b92_s1: const #14656u : u32
        let b92_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b92_s2: read-reg b92_s1:i
        let b92_s2 = ctx
            .emitter()
            .read_register(
                b92_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b92_s3: cmp-lt b92_s2 b92_s0
        let b92_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b92_s2.clone(), b92_s0.clone()),
            );
        // b92_s4: not b92_s3
        let b92_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b92_s3.clone()));
        // b92_s5: branch b92_s4 block68 block93
        return ctx
            .emitter()
            .branch(
                b92_s4.clone(),
                fn_state.block_refs[68usize].clone(),
                fn_state.block_refs[93usize].clone(),
            );
    }
    fn block_93(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b93_s0: const #862s : i10
        let b93_s0 = ctx
            .emitter()
            .constant(
                862isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b93_s1: const #14656u : u32
        let b93_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b93_s2: write-reg b93_s1 <= b93_s0
        let b93_s2 = ctx.emitter().write_register(b93_s1.clone(), b93_s0.clone());
        // b93_s3: const #0s : i0
        let b93_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b93_s4: const #5s : i3
        let b93_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b93_s5: read-var u#26151:u32
        let b93_s5 = ctx.emitter().read_variable(fn_state.u_26151.clone());
        // b93_s6: bit-extract b93_s5 b93_s3 b93_s4
        let b93_s6 = ctx
            .emitter()
            .bit_extract(b93_s5.clone(), b93_s3.clone(), b93_s4.clone());
        // b93_s7: cast reint b93_s6 -> u5
        let b93_s7 = ctx
            .emitter()
            .cast(
                b93_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b93_s8: write-var u#26152:u5 <= b93_s7:u5
        ctx.emitter().write_variable(fn_state.u_26152.clone(), b93_s7.clone());
        // b93_s9: const #5s : i3
        let b93_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b93_s10: const #5s : i3
        let b93_s10 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b93_s11: read-var u#26151:u32
        let b93_s11 = ctx.emitter().read_variable(fn_state.u_26151.clone());
        // b93_s12: bit-extract b93_s11 b93_s9 b93_s10
        let b93_s12 = ctx
            .emitter()
            .bit_extract(b93_s11.clone(), b93_s9.clone(), b93_s10.clone());
        // b93_s13: cast reint b93_s12 -> u5
        let b93_s13 = ctx
            .emitter()
            .cast(
                b93_s12.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b93_s14: write-var u#26153:u5 <= b93_s13:u5
        ctx.emitter().write_variable(fn_state.u_26153.clone(), b93_s13.clone());
        // b93_s15: const #10s : i4
        let b93_s15 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b93_s16: const #5s : i3
        let b93_s16 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b93_s17: read-var u#26151:u32
        let b93_s17 = ctx.emitter().read_variable(fn_state.u_26151.clone());
        // b93_s18: bit-extract b93_s17 b93_s15 b93_s16
        let b93_s18 = ctx
            .emitter()
            .bit_extract(b93_s17.clone(), b93_s15.clone(), b93_s16.clone());
        // b93_s19: cast reint b93_s18 -> u5
        let b93_s19 = ctx
            .emitter()
            .cast(
                b93_s18.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b93_s20: write-var u#26154:u5 <= b93_s19:u5
        ctx.emitter().write_variable(fn_state.u_26154.clone(), b93_s19.clone());
        // b93_s21: const #16s : i5
        let b93_s21 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b93_s22: const #5s : i3
        let b93_s22 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b93_s23: read-var u#26151:u32
        let b93_s23 = ctx.emitter().read_variable(fn_state.u_26151.clone());
        // b93_s24: bit-extract b93_s23 b93_s21 b93_s22
        let b93_s24 = ctx
            .emitter()
            .bit_extract(b93_s23.clone(), b93_s21.clone(), b93_s22.clone());
        // b93_s25: cast reint b93_s24 -> u5
        let b93_s25 = ctx
            .emitter()
            .cast(
                b93_s24.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b93_s26: write-var u#26155:u5 <= b93_s25:u5
        ctx.emitter().write_variable(fn_state.u_26155.clone(), b93_s25.clone());
        // b93_s27: const #23s : i5
        let b93_s27 = ctx
            .emitter()
            .constant(
                23isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b93_s28: const #1s : i1
        let b93_s28 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b93_s29: read-var u#26151:u32
        let b93_s29 = ctx.emitter().read_variable(fn_state.u_26151.clone());
        // b93_s30: bit-extract b93_s29 b93_s27 b93_s28
        let b93_s30 = ctx
            .emitter()
            .bit_extract(b93_s29.clone(), b93_s27.clone(), b93_s28.clone());
        // b93_s31: cast reint b93_s30 -> u1
        let b93_s31 = ctx
            .emitter()
            .cast(
                b93_s30.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b93_s32: write-var u#26156:u1 <= b93_s31:u1
        ctx.emitter().write_variable(fn_state.u_26156.clone(), b93_s31.clone());
        // b93_s33: const #10s : i4
        let b93_s33 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b93_s34: read-var u#26151:u32
        let b93_s34 = ctx.emitter().read_variable(fn_state.u_26151.clone());
        // b93_s35: const #1u : u64
        let b93_s35 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
            );
        // b93_s36: bit-extract b93_s34 b93_s33 b93_s35
        let b93_s36 = ctx
            .emitter()
            .bit_extract(b93_s34.clone(), b93_s33.clone(), b93_s35.clone());
        // b93_s37: cast reint b93_s36 -> u1
        let b93_s37 = ctx
            .emitter()
            .cast(
                b93_s36.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b93_s38: const #0s : i0
        let b93_s38 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b93_s39: const #0u : u64
        let b93_s39 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
            );
        // b93_s40: cast zx b93_s37 -> u64
        let b93_s40 = ctx
            .emitter()
            .cast(
                b93_s37.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
                CastOperationKind::ZeroExtend,
            );
        // b93_s41: const #1u : u64
        let b93_s41 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
            );
        // b93_s42: and b93_s40 b93_s41
        let b93_s42 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::And(b93_s40.clone(), b93_s41.clone()),
            );
        // b93_s43: cmp-eq b93_s42 b93_s41
        let b93_s43 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b93_s42.clone(), b93_s41.clone()),
            );
        // b93_s44: lsl b93_s40 b93_s38
        let b93_s44 = ctx
            .emitter()
            .shift(
                b93_s40.clone(),
                b93_s38.clone(),
                ShiftOperationKind::LogicalShiftLeft,
            );
        // b93_s45: or b93_s39 b93_s44
        let b93_s45 = ctx
            .emitter()
            .binary_operation(BinaryOperationKind::Or(b93_s39.clone(), b93_s44.clone()));
        // b93_s46: cmpl b93_s44
        let b93_s46 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Complement(b93_s44.clone()));
        // b93_s47: and b93_s39 b93_s46
        let b93_s47 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::And(b93_s39.clone(), b93_s46.clone()),
            );
        // b93_s48: select b93_s43 b93_s45 b93_s47
        let b93_s48 = if b93_s43 { b93_s45 } else { b93_s47 };
        // b93_s49: cast trunc b93_s48 -> u1
        let b93_s49 = ctx
            .emitter()
            .cast(
                b93_s48.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Truncate,
            );
        // b93_s50: const #1u : u1
        let b93_s50 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b93_s51: cmp-ne b93_s49 b93_s50
        let b93_s51 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareNotEqual(b93_s49.clone(), b93_s50.clone()),
            );
        // b93_s52: branch b93_s51 block99 block94
        return ctx
            .emitter()
            .branch(
                b93_s51.clone(),
                fn_state.block_refs[99usize].clone(),
                fn_state.block_refs[94usize].clone(),
            );
    }
    fn block_94(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b94_s0: const #11s : i4
        let b94_s0 = ctx
            .emitter()
            .constant(
                11isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b94_s1: read-var u#26151:u32
        let b94_s1 = ctx.emitter().read_variable(fn_state.u_26151.clone());
        // b94_s2: const #1u : u64
        let b94_s2 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
            );
        // b94_s3: bit-extract b94_s1 b94_s0 b94_s2
        let b94_s3 = ctx
            .emitter()
            .bit_extract(b94_s1.clone(), b94_s0.clone(), b94_s2.clone());
        // b94_s4: cast reint b94_s3 -> u1
        let b94_s4 = ctx
            .emitter()
            .cast(
                b94_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b94_s5: const #0s : i0
        let b94_s5 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b94_s6: const #0u : u64
        let b94_s6 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
            );
        // b94_s7: cast zx b94_s4 -> u64
        let b94_s7 = ctx
            .emitter()
            .cast(
                b94_s4.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
                CastOperationKind::ZeroExtend,
            );
        // b94_s8: const #1u : u64
        let b94_s8 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
            );
        // b94_s9: and b94_s7 b94_s8
        let b94_s9 = ctx
            .emitter()
            .binary_operation(BinaryOperationKind::And(b94_s7.clone(), b94_s8.clone()));
        // b94_s10: cmp-eq b94_s9 b94_s8
        let b94_s10 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b94_s9.clone(), b94_s8.clone()),
            );
        // b94_s11: lsl b94_s7 b94_s5
        let b94_s11 = ctx
            .emitter()
            .shift(b94_s7.clone(), b94_s5.clone(), ShiftOperationKind::LogicalShiftLeft);
        // b94_s12: or b94_s6 b94_s11
        let b94_s12 = ctx
            .emitter()
            .binary_operation(BinaryOperationKind::Or(b94_s6.clone(), b94_s11.clone()));
        // b94_s13: cmpl b94_s11
        let b94_s13 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Complement(b94_s11.clone()));
        // b94_s14: and b94_s6 b94_s13
        let b94_s14 = ctx
            .emitter()
            .binary_operation(BinaryOperationKind::And(b94_s6.clone(), b94_s13.clone()));
        // b94_s15: select b94_s10 b94_s12 b94_s14
        let b94_s15 = if b94_s10 { b94_s12 } else { b94_s14 };
        // b94_s16: cast trunc b94_s15 -> u1
        let b94_s16 = ctx
            .emitter()
            .cast(
                b94_s15.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Truncate,
            );
        // b94_s17: const #1u : u1
        let b94_s17 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b94_s18: cmp-ne b94_s16 b94_s17
        let b94_s18 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareNotEqual(b94_s16.clone(), b94_s17.clone()),
            );
        // b94_s19: branch b94_s18 block99 block95
        return ctx
            .emitter()
            .branch(
                b94_s18.clone(),
                fn_state.block_refs[99usize].clone(),
                fn_state.block_refs[95usize].clone(),
            );
    }
    fn block_95(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b95_s0: const #12s : i4
        let b95_s0 = ctx
            .emitter()
            .constant(
                12isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b95_s1: read-var u#26151:u32
        let b95_s1 = ctx.emitter().read_variable(fn_state.u_26151.clone());
        // b95_s2: const #1u : u64
        let b95_s2 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
            );
        // b95_s3: bit-extract b95_s1 b95_s0 b95_s2
        let b95_s3 = ctx
            .emitter()
            .bit_extract(b95_s1.clone(), b95_s0.clone(), b95_s2.clone());
        // b95_s4: cast reint b95_s3 -> u1
        let b95_s4 = ctx
            .emitter()
            .cast(
                b95_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b95_s5: const #0s : i0
        let b95_s5 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b95_s6: const #0u : u64
        let b95_s6 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
            );
        // b95_s7: cast zx b95_s4 -> u64
        let b95_s7 = ctx
            .emitter()
            .cast(
                b95_s4.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
                CastOperationKind::ZeroExtend,
            );
        // b95_s8: const #1u : u64
        let b95_s8 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
            );
        // b95_s9: and b95_s7 b95_s8
        let b95_s9 = ctx
            .emitter()
            .binary_operation(BinaryOperationKind::And(b95_s7.clone(), b95_s8.clone()));
        // b95_s10: cmp-eq b95_s9 b95_s8
        let b95_s10 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b95_s9.clone(), b95_s8.clone()),
            );
        // b95_s11: lsl b95_s7 b95_s5
        let b95_s11 = ctx
            .emitter()
            .shift(b95_s7.clone(), b95_s5.clone(), ShiftOperationKind::LogicalShiftLeft);
        // b95_s12: or b95_s6 b95_s11
        let b95_s12 = ctx
            .emitter()
            .binary_operation(BinaryOperationKind::Or(b95_s6.clone(), b95_s11.clone()));
        // b95_s13: cmpl b95_s11
        let b95_s13 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Complement(b95_s11.clone()));
        // b95_s14: and b95_s6 b95_s13
        let b95_s14 = ctx
            .emitter()
            .binary_operation(BinaryOperationKind::And(b95_s6.clone(), b95_s13.clone()));
        // b95_s15: select b95_s10 b95_s12 b95_s14
        let b95_s15 = if b95_s10 { b95_s12 } else { b95_s14 };
        // b95_s16: cast trunc b95_s15 -> u1
        let b95_s16 = ctx
            .emitter()
            .cast(
                b95_s15.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Truncate,
            );
        // b95_s17: const #1u : u1
        let b95_s17 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b95_s18: cmp-ne b95_s16 b95_s17
        let b95_s18 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareNotEqual(b95_s16.clone(), b95_s17.clone()),
            );
        // b95_s19: branch b95_s18 block99 block96
        return ctx
            .emitter()
            .branch(
                b95_s18.clone(),
                fn_state.block_refs[99usize].clone(),
                fn_state.block_refs[96usize].clone(),
            );
    }
    fn block_96(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b96_s0: const #13s : i4
        let b96_s0 = ctx
            .emitter()
            .constant(
                13isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b96_s1: read-var u#26151:u32
        let b96_s1 = ctx.emitter().read_variable(fn_state.u_26151.clone());
        // b96_s2: const #1u : u64
        let b96_s2 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
            );
        // b96_s3: bit-extract b96_s1 b96_s0 b96_s2
        let b96_s3 = ctx
            .emitter()
            .bit_extract(b96_s1.clone(), b96_s0.clone(), b96_s2.clone());
        // b96_s4: cast reint b96_s3 -> u1
        let b96_s4 = ctx
            .emitter()
            .cast(
                b96_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b96_s5: const #0s : i0
        let b96_s5 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b96_s6: const #0u : u64
        let b96_s6 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
            );
        // b96_s7: cast zx b96_s4 -> u64
        let b96_s7 = ctx
            .emitter()
            .cast(
                b96_s4.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
                CastOperationKind::ZeroExtend,
            );
        // b96_s8: const #1u : u64
        let b96_s8 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
            );
        // b96_s9: and b96_s7 b96_s8
        let b96_s9 = ctx
            .emitter()
            .binary_operation(BinaryOperationKind::And(b96_s7.clone(), b96_s8.clone()));
        // b96_s10: cmp-eq b96_s9 b96_s8
        let b96_s10 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b96_s9.clone(), b96_s8.clone()),
            );
        // b96_s11: lsl b96_s7 b96_s5
        let b96_s11 = ctx
            .emitter()
            .shift(b96_s7.clone(), b96_s5.clone(), ShiftOperationKind::LogicalShiftLeft);
        // b96_s12: or b96_s6 b96_s11
        let b96_s12 = ctx
            .emitter()
            .binary_operation(BinaryOperationKind::Or(b96_s6.clone(), b96_s11.clone()));
        // b96_s13: cmpl b96_s11
        let b96_s13 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Complement(b96_s11.clone()));
        // b96_s14: and b96_s6 b96_s13
        let b96_s14 = ctx
            .emitter()
            .binary_operation(BinaryOperationKind::And(b96_s6.clone(), b96_s13.clone()));
        // b96_s15: select b96_s10 b96_s12 b96_s14
        let b96_s15 = if b96_s10 { b96_s12 } else { b96_s14 };
        // b96_s16: cast trunc b96_s15 -> u1
        let b96_s16 = ctx
            .emitter()
            .cast(
                b96_s15.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Truncate,
            );
        // b96_s17: const #1u : u1
        let b96_s17 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b96_s18: cmp-ne b96_s16 b96_s17
        let b96_s18 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareNotEqual(b96_s16.clone(), b96_s17.clone()),
            );
        // b96_s19: branch b96_s18 block99 block97
        return ctx
            .emitter()
            .branch(
                b96_s18.clone(),
                fn_state.block_refs[99usize].clone(),
                fn_state.block_refs[97usize].clone(),
            );
    }
    fn block_97(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b97_s0: const #14s : i4
        let b97_s0 = ctx
            .emitter()
            .constant(
                14isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b97_s1: read-var u#26151:u32
        let b97_s1 = ctx.emitter().read_variable(fn_state.u_26151.clone());
        // b97_s2: const #1u : u64
        let b97_s2 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
            );
        // b97_s3: bit-extract b97_s1 b97_s0 b97_s2
        let b97_s3 = ctx
            .emitter()
            .bit_extract(b97_s1.clone(), b97_s0.clone(), b97_s2.clone());
        // b97_s4: cast reint b97_s3 -> u1
        let b97_s4 = ctx
            .emitter()
            .cast(
                b97_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b97_s5: const #0s : i0
        let b97_s5 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b97_s6: const #0u : u64
        let b97_s6 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
            );
        // b97_s7: cast zx b97_s4 -> u64
        let b97_s7 = ctx
            .emitter()
            .cast(
                b97_s4.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
                CastOperationKind::ZeroExtend,
            );
        // b97_s8: const #1u : u64
        let b97_s8 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
            );
        // b97_s9: and b97_s7 b97_s8
        let b97_s9 = ctx
            .emitter()
            .binary_operation(BinaryOperationKind::And(b97_s7.clone(), b97_s8.clone()));
        // b97_s10: cmp-eq b97_s9 b97_s8
        let b97_s10 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b97_s9.clone(), b97_s8.clone()),
            );
        // b97_s11: lsl b97_s7 b97_s5
        let b97_s11 = ctx
            .emitter()
            .shift(b97_s7.clone(), b97_s5.clone(), ShiftOperationKind::LogicalShiftLeft);
        // b97_s12: or b97_s6 b97_s11
        let b97_s12 = ctx
            .emitter()
            .binary_operation(BinaryOperationKind::Or(b97_s6.clone(), b97_s11.clone()));
        // b97_s13: cmpl b97_s11
        let b97_s13 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Complement(b97_s11.clone()));
        // b97_s14: and b97_s6 b97_s13
        let b97_s14 = ctx
            .emitter()
            .binary_operation(BinaryOperationKind::And(b97_s6.clone(), b97_s13.clone()));
        // b97_s15: select b97_s10 b97_s12 b97_s14
        let b97_s15 = if b97_s10 { b97_s12 } else { b97_s14 };
        // b97_s16: cast trunc b97_s15 -> u1
        let b97_s16 = ctx
            .emitter()
            .cast(
                b97_s15.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Truncate,
            );
        // b97_s17: const #1u : u1
        let b97_s17 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b97_s18: cmp-ne b97_s16 b97_s17
        let b97_s18 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareNotEqual(b97_s16.clone(), b97_s17.clone()),
            );
        // b97_s19: branch b97_s18 block99 block98
        return ctx
            .emitter()
            .branch(
                b97_s18.clone(),
                fn_state.block_refs[99usize].clone(),
                fn_state.block_refs[98usize].clone(),
            );
    }
    fn block_98(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b98_s0: read-var u#26152:u5
        let b98_s0 = ctx.emitter().read_variable(fn_state.u_26152.clone());
        // b98_s1: read-var u#26153:u5
        let b98_s1 = ctx.emitter().read_variable(fn_state.u_26153.clone());
        // b98_s2: read-var u#26154:u5
        let b98_s2 = ctx.emitter().read_variable(fn_state.u_26154.clone());
        // b98_s3: read-var u#26155:u5
        let b98_s3 = ctx.emitter().read_variable(fn_state.u_26155.clone());
        // b98_s4: read-var u#26156:u1
        let b98_s4 = ctx.emitter().read_variable(fn_state.u_26156.clone());
        // b98_s5: call decode_umulh_aarch64_instrs_integer_arithmetic_mul_widening_64_128hi(b98_s0, b98_s1, b98_s2, b98_s3, b98_s4)
        let b98_s5 = decode_umulh_aarch64_instrs_integer_arithmetic_mul_widening_64_128hi(
            ctx,
            b98_s0,
            b98_s1,
            b98_s2,
            b98_s3,
            b98_s4,
        );
        // b98_s6: return
        return BlockResult::None;
    }
    fn block_99(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b99_s0: const #() : ()
        let b99_s0 = ();
        // b99_s1: create-sum enum = Error_ConstrainedUnpredictable:"b99_s0"
        let b99_s1 = Enum41fb7833ab6da036::Error_ConstrainedUnpredictable(b99_s0);
        // b99_s2: const #15712u : u32
        let b99_s2 = ctx
            .emitter()
            .constant(
                15712,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b99_s3: write-reg b99_s2 <= b99_s1
        let b99_s3 = ctx.emitter().write_register(b99_s2.clone(), b99_s1.clone());
        // b99_s4: const #1u : u1
        let b99_s4 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b99_s5: const #15616u : u32
        let b99_s5 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b99_s6: write-reg b99_s5 <= b99_s4
        let b99_s6 = ctx.emitter().write_register(b99_s5.clone(), b99_s4.clone());
        // b99_s7: const #"data/sail-arm/arm-v9.4-a/src/instrs64.sail:46251.8-46251.47" : str
        let b99_s7 = "data/sail-arm/arm-v9.4-a/src/instrs64.sail:46251.8-46251.47";
        // b99_s8: const #14480u : u32
        let b99_s8 = ctx
            .emitter()
            .constant(
                14480,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b99_s9: write-reg b99_s8 <= b99_s7
        let b99_s9 = ctx.emitter().write_register(b99_s8.clone(), b99_s7.clone());
        // b99_s10: return
        return BlockResult::None;
    }
    fn block_100(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b100_s0: const #10s : i4
        let b100_s0 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b100_s1: read-var u#26144:u32
        let b100_s1 = ctx.emitter().read_variable(fn_state.u_26144.clone());
        // b100_s2: const #6s : i3
        let b100_s2 = ctx
            .emitter()
            .constant(
                6isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b100_s3: bit-extract b100_s1 b100_s0 b100_s2
        let b100_s3 = ctx
            .emitter()
            .bit_extract(b100_s1.clone(), b100_s0.clone(), b100_s2.clone());
        // b100_s4: cast reint b100_s3 -> u6
        let b100_s4 = ctx
            .emitter()
            .cast(
                b100_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
                CastOperationKind::Reinterpret,
            );
        // b100_s5: const #31u : u6
        let b100_s5 = ctx
            .emitter()
            .constant(
                31,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
            );
        // b100_s6: cmp-eq b100_s4 b100_s5
        let b100_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b100_s4.clone(), b100_s5.clone()),
            );
        // b100_s7: branch b100_s6 block101 block67
        return ctx
            .emitter()
            .branch(
                b100_s6.clone(),
                fn_state.block_refs[101usize].clone(),
                fn_state.block_refs[67usize].clone(),
            );
    }
    fn block_101(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b101_s0: const #861s : i10
        let b101_s0 = ctx
            .emitter()
            .constant(
                861isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b101_s1: const #14656u : u32
        let b101_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b101_s2: read-reg b101_s1:i
        let b101_s2 = ctx
            .emitter()
            .read_register(
                b101_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b101_s3: cmp-lt b101_s2 b101_s0
        let b101_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b101_s2.clone(), b101_s0.clone()),
            );
        // b101_s4: not b101_s3
        let b101_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b101_s3.clone()));
        // b101_s5: branch b101_s4 block67 block102
        return ctx
            .emitter()
            .branch(
                b101_s4.clone(),
                fn_state.block_refs[67usize].clone(),
                fn_state.block_refs[102usize].clone(),
            );
    }
    fn block_102(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b102_s0: const #861s : i10
        let b102_s0 = ctx
            .emitter()
            .constant(
                861isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b102_s1: const #14656u : u32
        let b102_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b102_s2: write-reg b102_s1 <= b102_s0
        let b102_s2 = ctx.emitter().write_register(b102_s1.clone(), b102_s0.clone());
        // b102_s3: const #0s : i0
        let b102_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b102_s4: const #5s : i3
        let b102_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b102_s5: read-var u#26144:u32
        let b102_s5 = ctx.emitter().read_variable(fn_state.u_26144.clone());
        // b102_s6: bit-extract b102_s5 b102_s3 b102_s4
        let b102_s6 = ctx
            .emitter()
            .bit_extract(b102_s5.clone(), b102_s3.clone(), b102_s4.clone());
        // b102_s7: cast reint b102_s6 -> u5
        let b102_s7 = ctx
            .emitter()
            .cast(
                b102_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b102_s8: write-var u#26145:u5 <= b102_s7:u5
        ctx.emitter().write_variable(fn_state.u_26145.clone(), b102_s7.clone());
        // b102_s9: const #5s : i3
        let b102_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b102_s10: const #5s : i3
        let b102_s10 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b102_s11: read-var u#26144:u32
        let b102_s11 = ctx.emitter().read_variable(fn_state.u_26144.clone());
        // b102_s12: bit-extract b102_s11 b102_s9 b102_s10
        let b102_s12 = ctx
            .emitter()
            .bit_extract(b102_s11.clone(), b102_s9.clone(), b102_s10.clone());
        // b102_s13: cast reint b102_s12 -> u5
        let b102_s13 = ctx
            .emitter()
            .cast(
                b102_s12.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b102_s14: write-var u#26146:u5 <= b102_s13:u5
        ctx.emitter().write_variable(fn_state.u_26146.clone(), b102_s13.clone());
        // b102_s15: const #10s : i4
        let b102_s15 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b102_s16: const #5s : i3
        let b102_s16 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b102_s17: read-var u#26144:u32
        let b102_s17 = ctx.emitter().read_variable(fn_state.u_26144.clone());
        // b102_s18: bit-extract b102_s17 b102_s15 b102_s16
        let b102_s18 = ctx
            .emitter()
            .bit_extract(b102_s17.clone(), b102_s15.clone(), b102_s16.clone());
        // b102_s19: cast reint b102_s18 -> u5
        let b102_s19 = ctx
            .emitter()
            .cast(
                b102_s18.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b102_s20: write-var u#26147:u5 <= b102_s19:u5
        ctx.emitter().write_variable(fn_state.u_26147.clone(), b102_s19.clone());
        // b102_s21: const #16s : i5
        let b102_s21 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b102_s22: const #5s : i3
        let b102_s22 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b102_s23: read-var u#26144:u32
        let b102_s23 = ctx.emitter().read_variable(fn_state.u_26144.clone());
        // b102_s24: bit-extract b102_s23 b102_s21 b102_s22
        let b102_s24 = ctx
            .emitter()
            .bit_extract(b102_s23.clone(), b102_s21.clone(), b102_s22.clone());
        // b102_s25: cast reint b102_s24 -> u5
        let b102_s25 = ctx
            .emitter()
            .cast(
                b102_s24.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b102_s26: write-var u#26148:u5 <= b102_s25:u5
        ctx.emitter().write_variable(fn_state.u_26148.clone(), b102_s25.clone());
        // b102_s27: const #23s : i5
        let b102_s27 = ctx
            .emitter()
            .constant(
                23isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b102_s28: const #1s : i1
        let b102_s28 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b102_s29: read-var u#26144:u32
        let b102_s29 = ctx.emitter().read_variable(fn_state.u_26144.clone());
        // b102_s30: bit-extract b102_s29 b102_s27 b102_s28
        let b102_s30 = ctx
            .emitter()
            .bit_extract(b102_s29.clone(), b102_s27.clone(), b102_s28.clone());
        // b102_s31: cast reint b102_s30 -> u1
        let b102_s31 = ctx
            .emitter()
            .cast(
                b102_s30.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b102_s32: write-var u#26149:u1 <= b102_s31:u1
        ctx.emitter().write_variable(fn_state.u_26149.clone(), b102_s31.clone());
        // b102_s33: const #10s : i4
        let b102_s33 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b102_s34: read-var u#26144:u32
        let b102_s34 = ctx.emitter().read_variable(fn_state.u_26144.clone());
        // b102_s35: const #1u : u64
        let b102_s35 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
            );
        // b102_s36: bit-extract b102_s34 b102_s33 b102_s35
        let b102_s36 = ctx
            .emitter()
            .bit_extract(b102_s34.clone(), b102_s33.clone(), b102_s35.clone());
        // b102_s37: cast reint b102_s36 -> u1
        let b102_s37 = ctx
            .emitter()
            .cast(
                b102_s36.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b102_s38: const #0s : i0
        let b102_s38 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b102_s39: const #0u : u64
        let b102_s39 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
            );
        // b102_s40: cast zx b102_s37 -> u64
        let b102_s40 = ctx
            .emitter()
            .cast(
                b102_s37.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
                CastOperationKind::ZeroExtend,
            );
        // b102_s41: const #1u : u64
        let b102_s41 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
            );
        // b102_s42: and b102_s40 b102_s41
        let b102_s42 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::And(b102_s40.clone(), b102_s41.clone()),
            );
        // b102_s43: cmp-eq b102_s42 b102_s41
        let b102_s43 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b102_s42.clone(), b102_s41.clone()),
            );
        // b102_s44: lsl b102_s40 b102_s38
        let b102_s44 = ctx
            .emitter()
            .shift(
                b102_s40.clone(),
                b102_s38.clone(),
                ShiftOperationKind::LogicalShiftLeft,
            );
        // b102_s45: or b102_s39 b102_s44
        let b102_s45 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::Or(b102_s39.clone(), b102_s44.clone()),
            );
        // b102_s46: cmpl b102_s44
        let b102_s46 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Complement(b102_s44.clone()));
        // b102_s47: and b102_s39 b102_s46
        let b102_s47 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::And(b102_s39.clone(), b102_s46.clone()),
            );
        // b102_s48: select b102_s43 b102_s45 b102_s47
        let b102_s48 = if b102_s43 { b102_s45 } else { b102_s47 };
        // b102_s49: cast trunc b102_s48 -> u1
        let b102_s49 = ctx
            .emitter()
            .cast(
                b102_s48.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Truncate,
            );
        // b102_s50: const #1u : u1
        let b102_s50 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b102_s51: cmp-ne b102_s49 b102_s50
        let b102_s51 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareNotEqual(b102_s49.clone(), b102_s50.clone()),
            );
        // b102_s52: branch b102_s51 block108 block103
        return ctx
            .emitter()
            .branch(
                b102_s51.clone(),
                fn_state.block_refs[108usize].clone(),
                fn_state.block_refs[103usize].clone(),
            );
    }
    fn block_103(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b103_s0: const #11s : i4
        let b103_s0 = ctx
            .emitter()
            .constant(
                11isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b103_s1: read-var u#26144:u32
        let b103_s1 = ctx.emitter().read_variable(fn_state.u_26144.clone());
        // b103_s2: const #1u : u64
        let b103_s2 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
            );
        // b103_s3: bit-extract b103_s1 b103_s0 b103_s2
        let b103_s3 = ctx
            .emitter()
            .bit_extract(b103_s1.clone(), b103_s0.clone(), b103_s2.clone());
        // b103_s4: cast reint b103_s3 -> u1
        let b103_s4 = ctx
            .emitter()
            .cast(
                b103_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b103_s5: const #0s : i0
        let b103_s5 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b103_s6: const #0u : u64
        let b103_s6 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
            );
        // b103_s7: cast zx b103_s4 -> u64
        let b103_s7 = ctx
            .emitter()
            .cast(
                b103_s4.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
                CastOperationKind::ZeroExtend,
            );
        // b103_s8: const #1u : u64
        let b103_s8 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
            );
        // b103_s9: and b103_s7 b103_s8
        let b103_s9 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::And(b103_s7.clone(), b103_s8.clone()),
            );
        // b103_s10: cmp-eq b103_s9 b103_s8
        let b103_s10 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b103_s9.clone(), b103_s8.clone()),
            );
        // b103_s11: lsl b103_s7 b103_s5
        let b103_s11 = ctx
            .emitter()
            .shift(
                b103_s7.clone(),
                b103_s5.clone(),
                ShiftOperationKind::LogicalShiftLeft,
            );
        // b103_s12: or b103_s6 b103_s11
        let b103_s12 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::Or(b103_s6.clone(), b103_s11.clone()),
            );
        // b103_s13: cmpl b103_s11
        let b103_s13 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Complement(b103_s11.clone()));
        // b103_s14: and b103_s6 b103_s13
        let b103_s14 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::And(b103_s6.clone(), b103_s13.clone()),
            );
        // b103_s15: select b103_s10 b103_s12 b103_s14
        let b103_s15 = if b103_s10 { b103_s12 } else { b103_s14 };
        // b103_s16: cast trunc b103_s15 -> u1
        let b103_s16 = ctx
            .emitter()
            .cast(
                b103_s15.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Truncate,
            );
        // b103_s17: const #1u : u1
        let b103_s17 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b103_s18: cmp-ne b103_s16 b103_s17
        let b103_s18 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareNotEqual(b103_s16.clone(), b103_s17.clone()),
            );
        // b103_s19: branch b103_s18 block108 block104
        return ctx
            .emitter()
            .branch(
                b103_s18.clone(),
                fn_state.block_refs[108usize].clone(),
                fn_state.block_refs[104usize].clone(),
            );
    }
    fn block_104(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b104_s0: const #12s : i4
        let b104_s0 = ctx
            .emitter()
            .constant(
                12isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b104_s1: read-var u#26144:u32
        let b104_s1 = ctx.emitter().read_variable(fn_state.u_26144.clone());
        // b104_s2: const #1u : u64
        let b104_s2 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
            );
        // b104_s3: bit-extract b104_s1 b104_s0 b104_s2
        let b104_s3 = ctx
            .emitter()
            .bit_extract(b104_s1.clone(), b104_s0.clone(), b104_s2.clone());
        // b104_s4: cast reint b104_s3 -> u1
        let b104_s4 = ctx
            .emitter()
            .cast(
                b104_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b104_s5: const #0s : i0
        let b104_s5 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b104_s6: const #0u : u64
        let b104_s6 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
            );
        // b104_s7: cast zx b104_s4 -> u64
        let b104_s7 = ctx
            .emitter()
            .cast(
                b104_s4.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
                CastOperationKind::ZeroExtend,
            );
        // b104_s8: const #1u : u64
        let b104_s8 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
            );
        // b104_s9: and b104_s7 b104_s8
        let b104_s9 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::And(b104_s7.clone(), b104_s8.clone()),
            );
        // b104_s10: cmp-eq b104_s9 b104_s8
        let b104_s10 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b104_s9.clone(), b104_s8.clone()),
            );
        // b104_s11: lsl b104_s7 b104_s5
        let b104_s11 = ctx
            .emitter()
            .shift(
                b104_s7.clone(),
                b104_s5.clone(),
                ShiftOperationKind::LogicalShiftLeft,
            );
        // b104_s12: or b104_s6 b104_s11
        let b104_s12 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::Or(b104_s6.clone(), b104_s11.clone()),
            );
        // b104_s13: cmpl b104_s11
        let b104_s13 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Complement(b104_s11.clone()));
        // b104_s14: and b104_s6 b104_s13
        let b104_s14 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::And(b104_s6.clone(), b104_s13.clone()),
            );
        // b104_s15: select b104_s10 b104_s12 b104_s14
        let b104_s15 = if b104_s10 { b104_s12 } else { b104_s14 };
        // b104_s16: cast trunc b104_s15 -> u1
        let b104_s16 = ctx
            .emitter()
            .cast(
                b104_s15.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Truncate,
            );
        // b104_s17: const #1u : u1
        let b104_s17 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b104_s18: cmp-ne b104_s16 b104_s17
        let b104_s18 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareNotEqual(b104_s16.clone(), b104_s17.clone()),
            );
        // b104_s19: branch b104_s18 block108 block105
        return ctx
            .emitter()
            .branch(
                b104_s18.clone(),
                fn_state.block_refs[108usize].clone(),
                fn_state.block_refs[105usize].clone(),
            );
    }
    fn block_105(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b105_s0: const #13s : i4
        let b105_s0 = ctx
            .emitter()
            .constant(
                13isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b105_s1: read-var u#26144:u32
        let b105_s1 = ctx.emitter().read_variable(fn_state.u_26144.clone());
        // b105_s2: const #1u : u64
        let b105_s2 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
            );
        // b105_s3: bit-extract b105_s1 b105_s0 b105_s2
        let b105_s3 = ctx
            .emitter()
            .bit_extract(b105_s1.clone(), b105_s0.clone(), b105_s2.clone());
        // b105_s4: cast reint b105_s3 -> u1
        let b105_s4 = ctx
            .emitter()
            .cast(
                b105_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b105_s5: const #0s : i0
        let b105_s5 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b105_s6: const #0u : u64
        let b105_s6 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
            );
        // b105_s7: cast zx b105_s4 -> u64
        let b105_s7 = ctx
            .emitter()
            .cast(
                b105_s4.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
                CastOperationKind::ZeroExtend,
            );
        // b105_s8: const #1u : u64
        let b105_s8 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
            );
        // b105_s9: and b105_s7 b105_s8
        let b105_s9 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::And(b105_s7.clone(), b105_s8.clone()),
            );
        // b105_s10: cmp-eq b105_s9 b105_s8
        let b105_s10 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b105_s9.clone(), b105_s8.clone()),
            );
        // b105_s11: lsl b105_s7 b105_s5
        let b105_s11 = ctx
            .emitter()
            .shift(
                b105_s7.clone(),
                b105_s5.clone(),
                ShiftOperationKind::LogicalShiftLeft,
            );
        // b105_s12: or b105_s6 b105_s11
        let b105_s12 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::Or(b105_s6.clone(), b105_s11.clone()),
            );
        // b105_s13: cmpl b105_s11
        let b105_s13 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Complement(b105_s11.clone()));
        // b105_s14: and b105_s6 b105_s13
        let b105_s14 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::And(b105_s6.clone(), b105_s13.clone()),
            );
        // b105_s15: select b105_s10 b105_s12 b105_s14
        let b105_s15 = if b105_s10 { b105_s12 } else { b105_s14 };
        // b105_s16: cast trunc b105_s15 -> u1
        let b105_s16 = ctx
            .emitter()
            .cast(
                b105_s15.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Truncate,
            );
        // b105_s17: const #1u : u1
        let b105_s17 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b105_s18: cmp-ne b105_s16 b105_s17
        let b105_s18 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareNotEqual(b105_s16.clone(), b105_s17.clone()),
            );
        // b105_s19: branch b105_s18 block108 block106
        return ctx
            .emitter()
            .branch(
                b105_s18.clone(),
                fn_state.block_refs[108usize].clone(),
                fn_state.block_refs[106usize].clone(),
            );
    }
    fn block_106(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b106_s0: const #14s : i4
        let b106_s0 = ctx
            .emitter()
            .constant(
                14isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b106_s1: read-var u#26144:u32
        let b106_s1 = ctx.emitter().read_variable(fn_state.u_26144.clone());
        // b106_s2: const #1u : u64
        let b106_s2 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
            );
        // b106_s3: bit-extract b106_s1 b106_s0 b106_s2
        let b106_s3 = ctx
            .emitter()
            .bit_extract(b106_s1.clone(), b106_s0.clone(), b106_s2.clone());
        // b106_s4: cast reint b106_s3 -> u1
        let b106_s4 = ctx
            .emitter()
            .cast(
                b106_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b106_s5: const #0s : i0
        let b106_s5 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b106_s6: const #0u : u64
        let b106_s6 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
            );
        // b106_s7: cast zx b106_s4 -> u64
        let b106_s7 = ctx
            .emitter()
            .cast(
                b106_s4.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
                CastOperationKind::ZeroExtend,
            );
        // b106_s8: const #1u : u64
        let b106_s8 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 64,
                },
            );
        // b106_s9: and b106_s7 b106_s8
        let b106_s9 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::And(b106_s7.clone(), b106_s8.clone()),
            );
        // b106_s10: cmp-eq b106_s9 b106_s8
        let b106_s10 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b106_s9.clone(), b106_s8.clone()),
            );
        // b106_s11: lsl b106_s7 b106_s5
        let b106_s11 = ctx
            .emitter()
            .shift(
                b106_s7.clone(),
                b106_s5.clone(),
                ShiftOperationKind::LogicalShiftLeft,
            );
        // b106_s12: or b106_s6 b106_s11
        let b106_s12 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::Or(b106_s6.clone(), b106_s11.clone()),
            );
        // b106_s13: cmpl b106_s11
        let b106_s13 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Complement(b106_s11.clone()));
        // b106_s14: and b106_s6 b106_s13
        let b106_s14 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::And(b106_s6.clone(), b106_s13.clone()),
            );
        // b106_s15: select b106_s10 b106_s12 b106_s14
        let b106_s15 = if b106_s10 { b106_s12 } else { b106_s14 };
        // b106_s16: cast trunc b106_s15 -> u1
        let b106_s16 = ctx
            .emitter()
            .cast(
                b106_s15.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Truncate,
            );
        // b106_s17: const #1u : u1
        let b106_s17 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b106_s18: cmp-ne b106_s16 b106_s17
        let b106_s18 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareNotEqual(b106_s16.clone(), b106_s17.clone()),
            );
        // b106_s19: branch b106_s18 block108 block107
        return ctx
            .emitter()
            .branch(
                b106_s18.clone(),
                fn_state.block_refs[108usize].clone(),
                fn_state.block_refs[107usize].clone(),
            );
    }
    fn block_107(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b107_s0: read-var u#26145:u5
        let b107_s0 = ctx.emitter().read_variable(fn_state.u_26145.clone());
        // b107_s1: read-var u#26146:u5
        let b107_s1 = ctx.emitter().read_variable(fn_state.u_26146.clone());
        // b107_s2: read-var u#26147:u5
        let b107_s2 = ctx.emitter().read_variable(fn_state.u_26147.clone());
        // b107_s3: read-var u#26148:u5
        let b107_s3 = ctx.emitter().read_variable(fn_state.u_26148.clone());
        // b107_s4: read-var u#26149:u1
        let b107_s4 = ctx.emitter().read_variable(fn_state.u_26149.clone());
        // b107_s5: call decode_smulh_aarch64_instrs_integer_arithmetic_mul_widening_64_128hi(b107_s0, b107_s1, b107_s2, b107_s3, b107_s4)
        let b107_s5 = decode_smulh_aarch64_instrs_integer_arithmetic_mul_widening_64_128hi(
            ctx,
            b107_s0,
            b107_s1,
            b107_s2,
            b107_s3,
            b107_s4,
        );
        // b107_s6: return
        return BlockResult::None;
    }
    fn block_108(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b108_s0: const #() : ()
        let b108_s0 = ();
        // b108_s1: create-sum enum = Error_ConstrainedUnpredictable:"b108_s0"
        let b108_s1 = Enum41fb7833ab6da036::Error_ConstrainedUnpredictable(b108_s0);
        // b108_s2: const #15712u : u32
        let b108_s2 = ctx
            .emitter()
            .constant(
                15712,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b108_s3: write-reg b108_s2 <= b108_s1
        let b108_s3 = ctx.emitter().write_register(b108_s2.clone(), b108_s1.clone());
        // b108_s4: const #1u : u1
        let b108_s4 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b108_s5: const #15616u : u32
        let b108_s5 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b108_s6: write-reg b108_s5 <= b108_s4
        let b108_s6 = ctx.emitter().write_register(b108_s5.clone(), b108_s4.clone());
        // b108_s7: const #"data/sail-arm/arm-v9.4-a/src/instrs64.sail:46224.8-46224.47" : str
        let b108_s7 = "data/sail-arm/arm-v9.4-a/src/instrs64.sail:46224.8-46224.47";
        // b108_s8: const #14480u : u32
        let b108_s8 = ctx
            .emitter()
            .constant(
                14480,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b108_s9: write-reg b108_s8 <= b108_s7
        let b108_s9 = ctx.emitter().write_register(b108_s8.clone(), b108_s7.clone());
        // b108_s10: return
        return BlockResult::None;
    }
    fn block_109(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b109_s0: const #10s : i4
        let b109_s0 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b109_s1: read-var u#26138:u32
        let b109_s1 = ctx.emitter().read_variable(fn_state.u_26138.clone());
        // b109_s2: const #6s : i3
        let b109_s2 = ctx
            .emitter()
            .constant(
                6isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b109_s3: bit-extract b109_s1 b109_s0 b109_s2
        let b109_s3 = ctx
            .emitter()
            .bit_extract(b109_s1.clone(), b109_s0.clone(), b109_s2.clone());
        // b109_s4: cast reint b109_s3 -> u6
        let b109_s4 = ctx
            .emitter()
            .cast(
                b109_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
                CastOperationKind::Reinterpret,
            );
        // b109_s5: const #26u : u6
        let b109_s5 = ctx
            .emitter()
            .constant(
                26,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
            );
        // b109_s6: cmp-eq b109_s4 b109_s5
        let b109_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b109_s4.clone(), b109_s5.clone()),
            );
        // b109_s7: branch b109_s6 block110 block66
        return ctx
            .emitter()
            .branch(
                b109_s6.clone(),
                fn_state.block_refs[110usize].clone(),
                fn_state.block_refs[66usize].clone(),
            );
    }
    fn block_110(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b110_s0: const #848s : i10
        let b110_s0 = ctx
            .emitter()
            .constant(
                848isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b110_s1: const #14656u : u32
        let b110_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b110_s2: read-reg b110_s1:i
        let b110_s2 = ctx
            .emitter()
            .read_register(
                b110_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b110_s3: cmp-lt b110_s2 b110_s0
        let b110_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b110_s2.clone(), b110_s0.clone()),
            );
        // b110_s4: not b110_s3
        let b110_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b110_s3.clone()));
        // b110_s5: branch b110_s4 block66 block111
        return ctx
            .emitter()
            .branch(
                b110_s4.clone(),
                fn_state.block_refs[66usize].clone(),
                fn_state.block_refs[111usize].clone(),
            );
    }
    fn block_111(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b111_s0: const #848s : i10
        let b111_s0 = ctx
            .emitter()
            .constant(
                848isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b111_s1: const #14656u : u32
        let b111_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b111_s2: write-reg b111_s1 <= b111_s0
        let b111_s2 = ctx.emitter().write_register(b111_s1.clone(), b111_s0.clone());
        // b111_s3: const #0s : i0
        let b111_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b111_s4: const #5s : i3
        let b111_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b111_s5: read-var u#26138:u32
        let b111_s5 = ctx.emitter().read_variable(fn_state.u_26138.clone());
        // b111_s6: bit-extract b111_s5 b111_s3 b111_s4
        let b111_s6 = ctx
            .emitter()
            .bit_extract(b111_s5.clone(), b111_s3.clone(), b111_s4.clone());
        // b111_s7: cast reint b111_s6 -> u5
        let b111_s7 = ctx
            .emitter()
            .cast(
                b111_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b111_s8: const #5s : i3
        let b111_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b111_s9: const #5s : i3
        let b111_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b111_s10: read-var u#26138:u32
        let b111_s10 = ctx.emitter().read_variable(fn_state.u_26138.clone());
        // b111_s11: bit-extract b111_s10 b111_s8 b111_s9
        let b111_s11 = ctx
            .emitter()
            .bit_extract(b111_s10.clone(), b111_s8.clone(), b111_s9.clone());
        // b111_s12: cast reint b111_s11 -> u5
        let b111_s12 = ctx
            .emitter()
            .cast(
                b111_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b111_s13: const #16s : i5
        let b111_s13 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b111_s14: const #5s : i3
        let b111_s14 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b111_s15: read-var u#26138:u32
        let b111_s15 = ctx.emitter().read_variable(fn_state.u_26138.clone());
        // b111_s16: bit-extract b111_s15 b111_s13 b111_s14
        let b111_s16 = ctx
            .emitter()
            .bit_extract(b111_s15.clone(), b111_s13.clone(), b111_s14.clone());
        // b111_s17: cast reint b111_s16 -> u5
        let b111_s17 = ctx
            .emitter()
            .cast(
                b111_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b111_s18: const #31s : i5
        let b111_s18 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b111_s19: const #1s : i1
        let b111_s19 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b111_s20: read-var u#26138:u32
        let b111_s20 = ctx.emitter().read_variable(fn_state.u_26138.clone());
        // b111_s21: bit-extract b111_s20 b111_s18 b111_s19
        let b111_s21 = ctx
            .emitter()
            .bit_extract(b111_s20.clone(), b111_s18.clone(), b111_s19.clone());
        // b111_s22: cast reint b111_s21 -> u1
        let b111_s22 = ctx
            .emitter()
            .cast(
                b111_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b111_s23: call decode_smin_reg_aarch64_instrs_integer_arithmetic_max_min_smin_reg(b111_s7, b111_s12, b111_s17, b111_s22)
        let b111_s23 = decode_smin_reg_aarch64_instrs_integer_arithmetic_max_min_smin_reg(
            ctx,
            b111_s7,
            b111_s12,
            b111_s17,
            b111_s22,
        );
        // b111_s24: const #15616u : u32
        let b111_s24 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b111_s25: read-reg b111_s24:u1
        let b111_s25 = ctx
            .emitter()
            .read_register(
                b111_s24.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b111_s26: branch b111_s25 block78 block77
        return ctx
            .emitter()
            .branch(
                b111_s25.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_112(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b112_s0: const #10s : i4
        let b112_s0 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b112_s1: read-var u#26132:u32
        let b112_s1 = ctx.emitter().read_variable(fn_state.u_26132.clone());
        // b112_s2: const #6s : i3
        let b112_s2 = ctx
            .emitter()
            .constant(
                6isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b112_s3: bit-extract b112_s1 b112_s0 b112_s2
        let b112_s3 = ctx
            .emitter()
            .bit_extract(b112_s1.clone(), b112_s0.clone(), b112_s2.clone());
        // b112_s4: cast reint b112_s3 -> u6
        let b112_s4 = ctx
            .emitter()
            .cast(
                b112_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
                CastOperationKind::Reinterpret,
            );
        // b112_s5: const #24u : u6
        let b112_s5 = ctx
            .emitter()
            .constant(
                24,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
            );
        // b112_s6: cmp-eq b112_s4 b112_s5
        let b112_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b112_s4.clone(), b112_s5.clone()),
            );
        // b112_s7: branch b112_s6 block113 block65
        return ctx
            .emitter()
            .branch(
                b112_s6.clone(),
                fn_state.block_refs[113usize].clone(),
                fn_state.block_refs[65usize].clone(),
            );
    }
    fn block_113(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b113_s0: const #833s : i10
        let b113_s0 = ctx
            .emitter()
            .constant(
                833isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b113_s1: const #14656u : u32
        let b113_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b113_s2: read-reg b113_s1:i
        let b113_s2 = ctx
            .emitter()
            .read_register(
                b113_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b113_s3: cmp-lt b113_s2 b113_s0
        let b113_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b113_s2.clone(), b113_s0.clone()),
            );
        // b113_s4: not b113_s3
        let b113_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b113_s3.clone()));
        // b113_s5: branch b113_s4 block65 block114
        return ctx
            .emitter()
            .branch(
                b113_s4.clone(),
                fn_state.block_refs[65usize].clone(),
                fn_state.block_refs[114usize].clone(),
            );
    }
    fn block_114(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b114_s0: const #833s : i10
        let b114_s0 = ctx
            .emitter()
            .constant(
                833isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b114_s1: const #14656u : u32
        let b114_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b114_s2: write-reg b114_s1 <= b114_s0
        let b114_s2 = ctx.emitter().write_register(b114_s1.clone(), b114_s0.clone());
        // b114_s3: const #0s : i0
        let b114_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b114_s4: const #5s : i3
        let b114_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b114_s5: read-var u#26132:u32
        let b114_s5 = ctx.emitter().read_variable(fn_state.u_26132.clone());
        // b114_s6: bit-extract b114_s5 b114_s3 b114_s4
        let b114_s6 = ctx
            .emitter()
            .bit_extract(b114_s5.clone(), b114_s3.clone(), b114_s4.clone());
        // b114_s7: cast reint b114_s6 -> u5
        let b114_s7 = ctx
            .emitter()
            .cast(
                b114_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b114_s8: const #5s : i3
        let b114_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b114_s9: const #5s : i3
        let b114_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b114_s10: read-var u#26132:u32
        let b114_s10 = ctx.emitter().read_variable(fn_state.u_26132.clone());
        // b114_s11: bit-extract b114_s10 b114_s8 b114_s9
        let b114_s11 = ctx
            .emitter()
            .bit_extract(b114_s10.clone(), b114_s8.clone(), b114_s9.clone());
        // b114_s12: cast reint b114_s11 -> u5
        let b114_s12 = ctx
            .emitter()
            .cast(
                b114_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b114_s13: const #16s : i5
        let b114_s13 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b114_s14: const #5s : i3
        let b114_s14 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b114_s15: read-var u#26132:u32
        let b114_s15 = ctx.emitter().read_variable(fn_state.u_26132.clone());
        // b114_s16: bit-extract b114_s15 b114_s13 b114_s14
        let b114_s16 = ctx
            .emitter()
            .bit_extract(b114_s15.clone(), b114_s13.clone(), b114_s14.clone());
        // b114_s17: cast reint b114_s16 -> u5
        let b114_s17 = ctx
            .emitter()
            .cast(
                b114_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b114_s18: const #31s : i5
        let b114_s18 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b114_s19: const #1s : i1
        let b114_s19 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b114_s20: read-var u#26132:u32
        let b114_s20 = ctx.emitter().read_variable(fn_state.u_26132.clone());
        // b114_s21: bit-extract b114_s20 b114_s18 b114_s19
        let b114_s21 = ctx
            .emitter()
            .bit_extract(b114_s20.clone(), b114_s18.clone(), b114_s19.clone());
        // b114_s22: cast reint b114_s21 -> u1
        let b114_s22 = ctx
            .emitter()
            .cast(
                b114_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b114_s23: call decode_smax_reg_aarch64_instrs_integer_arithmetic_max_min_smax_reg(b114_s7, b114_s12, b114_s17, b114_s22)
        let b114_s23 = decode_smax_reg_aarch64_instrs_integer_arithmetic_max_min_smax_reg(
            ctx,
            b114_s7,
            b114_s12,
            b114_s17,
            b114_s22,
        );
        // b114_s24: const #15616u : u32
        let b114_s24 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b114_s25: read-reg b114_s24:u1
        let b114_s25 = ctx
            .emitter()
            .read_register(
                b114_s24.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b114_s26: branch b114_s25 block78 block77
        return ctx
            .emitter()
            .branch(
                b114_s25.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_115(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b115_s0: const #15s : i4
        let b115_s0 = ctx
            .emitter()
            .constant(
                15isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b115_s1: read-var u#26124:u32
        let b115_s1 = ctx.emitter().read_variable(fn_state.u_26124.clone());
        // b115_s2: const #1s : i0
        let b115_s2 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b115_s3: bit-extract b115_s1 b115_s0 b115_s2
        let b115_s3 = ctx
            .emitter()
            .bit_extract(b115_s1.clone(), b115_s0.clone(), b115_s2.clone());
        // b115_s4: cast reint b115_s3 -> u1
        let b115_s4 = ctx
            .emitter()
            .cast(
                b115_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b115_s5: const #1u : u1
        let b115_s5 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b115_s6: cmp-eq b115_s4 b115_s5
        let b115_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b115_s4.clone(), b115_s5.clone()),
            );
        // b115_s7: branch b115_s6 block116 block64
        return ctx
            .emitter()
            .branch(
                b115_s6.clone(),
                fn_state.block_refs[116usize].clone(),
                fn_state.block_refs[64usize].clone(),
            );
    }
    fn block_116(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b116_s0: const #831s : i10
        let b116_s0 = ctx
            .emitter()
            .constant(
                831isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b116_s1: const #14656u : u32
        let b116_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b116_s2: read-reg b116_s1:i
        let b116_s2 = ctx
            .emitter()
            .read_register(
                b116_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b116_s3: cmp-lt b116_s2 b116_s0
        let b116_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b116_s2.clone(), b116_s0.clone()),
            );
        // b116_s4: not b116_s3
        let b116_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b116_s3.clone()));
        // b116_s5: branch b116_s4 block64 block117
        return ctx
            .emitter()
            .branch(
                b116_s4.clone(),
                fn_state.block_refs[64usize].clone(),
                fn_state.block_refs[117usize].clone(),
            );
    }
    fn block_117(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b117_s0: const #831s : i10
        let b117_s0 = ctx
            .emitter()
            .constant(
                831isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b117_s1: const #14656u : u32
        let b117_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b117_s2: write-reg b117_s1 <= b117_s0
        let b117_s2 = ctx.emitter().write_register(b117_s1.clone(), b117_s0.clone());
        // b117_s3: const #0s : i0
        let b117_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b117_s4: const #5s : i3
        let b117_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b117_s5: read-var u#26124:u32
        let b117_s5 = ctx.emitter().read_variable(fn_state.u_26124.clone());
        // b117_s6: bit-extract b117_s5 b117_s3 b117_s4
        let b117_s6 = ctx
            .emitter()
            .bit_extract(b117_s5.clone(), b117_s3.clone(), b117_s4.clone());
        // b117_s7: cast reint b117_s6 -> u5
        let b117_s7 = ctx
            .emitter()
            .cast(
                b117_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b117_s8: const #5s : i3
        let b117_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b117_s9: const #5s : i3
        let b117_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b117_s10: read-var u#26124:u32
        let b117_s10 = ctx.emitter().read_variable(fn_state.u_26124.clone());
        // b117_s11: bit-extract b117_s10 b117_s8 b117_s9
        let b117_s11 = ctx
            .emitter()
            .bit_extract(b117_s10.clone(), b117_s8.clone(), b117_s9.clone());
        // b117_s12: cast reint b117_s11 -> u5
        let b117_s12 = ctx
            .emitter()
            .cast(
                b117_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b117_s13: const #10s : i4
        let b117_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b117_s14: const #5s : i3
        let b117_s14 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b117_s15: read-var u#26124:u32
        let b117_s15 = ctx.emitter().read_variable(fn_state.u_26124.clone());
        // b117_s16: bit-extract b117_s15 b117_s13 b117_s14
        let b117_s16 = ctx
            .emitter()
            .bit_extract(b117_s15.clone(), b117_s13.clone(), b117_s14.clone());
        // b117_s17: cast reint b117_s16 -> u5
        let b117_s17 = ctx
            .emitter()
            .cast(
                b117_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b117_s18: const #15s : i4
        let b117_s18 = ctx
            .emitter()
            .constant(
                15isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b117_s19: const #1s : i1
        let b117_s19 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b117_s20: read-var u#26124:u32
        let b117_s20 = ctx.emitter().read_variable(fn_state.u_26124.clone());
        // b117_s21: bit-extract b117_s20 b117_s18 b117_s19
        let b117_s21 = ctx
            .emitter()
            .bit_extract(b117_s20.clone(), b117_s18.clone(), b117_s19.clone());
        // b117_s22: cast reint b117_s21 -> u1
        let b117_s22 = ctx
            .emitter()
            .cast(
                b117_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b117_s23: const #16s : i5
        let b117_s23 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b117_s24: const #5s : i3
        let b117_s24 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b117_s25: read-var u#26124:u32
        let b117_s25 = ctx.emitter().read_variable(fn_state.u_26124.clone());
        // b117_s26: bit-extract b117_s25 b117_s23 b117_s24
        let b117_s26 = ctx
            .emitter()
            .bit_extract(b117_s25.clone(), b117_s23.clone(), b117_s24.clone());
        // b117_s27: cast reint b117_s26 -> u5
        let b117_s27 = ctx
            .emitter()
            .cast(
                b117_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b117_s28: const #23s : i5
        let b117_s28 = ctx
            .emitter()
            .constant(
                23isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b117_s29: const #1s : i1
        let b117_s29 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b117_s30: read-var u#26124:u32
        let b117_s30 = ctx.emitter().read_variable(fn_state.u_26124.clone());
        // b117_s31: bit-extract b117_s30 b117_s28 b117_s29
        let b117_s31 = ctx
            .emitter()
            .bit_extract(b117_s30.clone(), b117_s28.clone(), b117_s29.clone());
        // b117_s32: cast reint b117_s31 -> u1
        let b117_s32 = ctx
            .emitter()
            .cast(
                b117_s31.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b117_s33: call decode_umsubl_aarch64_instrs_integer_arithmetic_mul_widening_32_64(b117_s7, b117_s12, b117_s17, b117_s22, b117_s27, b117_s32)
        let b117_s33 = decode_umsubl_aarch64_instrs_integer_arithmetic_mul_widening_32_64(
            ctx,
            b117_s7,
            b117_s12,
            b117_s17,
            b117_s22,
            b117_s27,
            b117_s32,
        );
        // b117_s34: return
        return BlockResult::None;
    }
    fn block_118(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b118_s0: const #15s : i4
        let b118_s0 = ctx
            .emitter()
            .constant(
                15isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b118_s1: read-var u#26116:u32
        let b118_s1 = ctx.emitter().read_variable(fn_state.u_26116.clone());
        // b118_s2: const #1s : i0
        let b118_s2 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b118_s3: bit-extract b118_s1 b118_s0 b118_s2
        let b118_s3 = ctx
            .emitter()
            .bit_extract(b118_s1.clone(), b118_s0.clone(), b118_s2.clone());
        // b118_s4: cast reint b118_s3 -> u1
        let b118_s4 = ctx
            .emitter()
            .cast(
                b118_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b118_s5: const #0u : u1
        let b118_s5 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b118_s6: cmp-eq b118_s4 b118_s5
        let b118_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b118_s4.clone(), b118_s5.clone()),
            );
        // b118_s7: branch b118_s6 block119 block63
        return ctx
            .emitter()
            .branch(
                b118_s6.clone(),
                fn_state.block_refs[119usize].clone(),
                fn_state.block_refs[63usize].clone(),
            );
    }
    fn block_119(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b119_s0: const #830s : i10
        let b119_s0 = ctx
            .emitter()
            .constant(
                830isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b119_s1: const #14656u : u32
        let b119_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b119_s2: read-reg b119_s1:i
        let b119_s2 = ctx
            .emitter()
            .read_register(
                b119_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b119_s3: cmp-lt b119_s2 b119_s0
        let b119_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b119_s2.clone(), b119_s0.clone()),
            );
        // b119_s4: not b119_s3
        let b119_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b119_s3.clone()));
        // b119_s5: branch b119_s4 block63 block120
        return ctx
            .emitter()
            .branch(
                b119_s4.clone(),
                fn_state.block_refs[63usize].clone(),
                fn_state.block_refs[120usize].clone(),
            );
    }
    fn block_120(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b120_s0: const #830s : i10
        let b120_s0 = ctx
            .emitter()
            .constant(
                830isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b120_s1: const #14656u : u32
        let b120_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b120_s2: write-reg b120_s1 <= b120_s0
        let b120_s2 = ctx.emitter().write_register(b120_s1.clone(), b120_s0.clone());
        // b120_s3: const #0s : i0
        let b120_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b120_s4: const #5s : i3
        let b120_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b120_s5: read-var u#26116:u32
        let b120_s5 = ctx.emitter().read_variable(fn_state.u_26116.clone());
        // b120_s6: bit-extract b120_s5 b120_s3 b120_s4
        let b120_s6 = ctx
            .emitter()
            .bit_extract(b120_s5.clone(), b120_s3.clone(), b120_s4.clone());
        // b120_s7: cast reint b120_s6 -> u5
        let b120_s7 = ctx
            .emitter()
            .cast(
                b120_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b120_s8: const #5s : i3
        let b120_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b120_s9: const #5s : i3
        let b120_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b120_s10: read-var u#26116:u32
        let b120_s10 = ctx.emitter().read_variable(fn_state.u_26116.clone());
        // b120_s11: bit-extract b120_s10 b120_s8 b120_s9
        let b120_s11 = ctx
            .emitter()
            .bit_extract(b120_s10.clone(), b120_s8.clone(), b120_s9.clone());
        // b120_s12: cast reint b120_s11 -> u5
        let b120_s12 = ctx
            .emitter()
            .cast(
                b120_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b120_s13: const #10s : i4
        let b120_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b120_s14: const #5s : i3
        let b120_s14 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b120_s15: read-var u#26116:u32
        let b120_s15 = ctx.emitter().read_variable(fn_state.u_26116.clone());
        // b120_s16: bit-extract b120_s15 b120_s13 b120_s14
        let b120_s16 = ctx
            .emitter()
            .bit_extract(b120_s15.clone(), b120_s13.clone(), b120_s14.clone());
        // b120_s17: cast reint b120_s16 -> u5
        let b120_s17 = ctx
            .emitter()
            .cast(
                b120_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b120_s18: const #15s : i4
        let b120_s18 = ctx
            .emitter()
            .constant(
                15isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b120_s19: const #1s : i1
        let b120_s19 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b120_s20: read-var u#26116:u32
        let b120_s20 = ctx.emitter().read_variable(fn_state.u_26116.clone());
        // b120_s21: bit-extract b120_s20 b120_s18 b120_s19
        let b120_s21 = ctx
            .emitter()
            .bit_extract(b120_s20.clone(), b120_s18.clone(), b120_s19.clone());
        // b120_s22: cast reint b120_s21 -> u1
        let b120_s22 = ctx
            .emitter()
            .cast(
                b120_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b120_s23: const #16s : i5
        let b120_s23 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b120_s24: const #5s : i3
        let b120_s24 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b120_s25: read-var u#26116:u32
        let b120_s25 = ctx.emitter().read_variable(fn_state.u_26116.clone());
        // b120_s26: bit-extract b120_s25 b120_s23 b120_s24
        let b120_s26 = ctx
            .emitter()
            .bit_extract(b120_s25.clone(), b120_s23.clone(), b120_s24.clone());
        // b120_s27: cast reint b120_s26 -> u5
        let b120_s27 = ctx
            .emitter()
            .cast(
                b120_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b120_s28: const #23s : i5
        let b120_s28 = ctx
            .emitter()
            .constant(
                23isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b120_s29: const #1s : i1
        let b120_s29 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b120_s30: read-var u#26116:u32
        let b120_s30 = ctx.emitter().read_variable(fn_state.u_26116.clone());
        // b120_s31: bit-extract b120_s30 b120_s28 b120_s29
        let b120_s31 = ctx
            .emitter()
            .bit_extract(b120_s30.clone(), b120_s28.clone(), b120_s29.clone());
        // b120_s32: cast reint b120_s31 -> u1
        let b120_s32 = ctx
            .emitter()
            .cast(
                b120_s31.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b120_s33: call decode_umaddl_aarch64_instrs_integer_arithmetic_mul_widening_32_64(b120_s7, b120_s12, b120_s17, b120_s22, b120_s27, b120_s32)
        let b120_s33 = decode_umaddl_aarch64_instrs_integer_arithmetic_mul_widening_32_64(
            ctx,
            b120_s7,
            b120_s12,
            b120_s17,
            b120_s22,
            b120_s27,
            b120_s32,
        );
        // b120_s34: return
        return BlockResult::None;
    }
    fn block_121(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b121_s0: const #15s : i4
        let b121_s0 = ctx
            .emitter()
            .constant(
                15isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b121_s1: read-var u#26108:u32
        let b121_s1 = ctx.emitter().read_variable(fn_state.u_26108.clone());
        // b121_s2: const #1s : i0
        let b121_s2 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b121_s3: bit-extract b121_s1 b121_s0 b121_s2
        let b121_s3 = ctx
            .emitter()
            .bit_extract(b121_s1.clone(), b121_s0.clone(), b121_s2.clone());
        // b121_s4: cast reint b121_s3 -> u1
        let b121_s4 = ctx
            .emitter()
            .cast(
                b121_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b121_s5: const #1u : u1
        let b121_s5 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b121_s6: cmp-eq b121_s4 b121_s5
        let b121_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b121_s4.clone(), b121_s5.clone()),
            );
        // b121_s7: branch b121_s6 block122 block62
        return ctx
            .emitter()
            .branch(
                b121_s6.clone(),
                fn_state.block_refs[122usize].clone(),
                fn_state.block_refs[62usize].clone(),
            );
    }
    fn block_122(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b122_s0: const #829s : i10
        let b122_s0 = ctx
            .emitter()
            .constant(
                829isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b122_s1: const #14656u : u32
        let b122_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b122_s2: read-reg b122_s1:i
        let b122_s2 = ctx
            .emitter()
            .read_register(
                b122_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b122_s3: cmp-lt b122_s2 b122_s0
        let b122_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b122_s2.clone(), b122_s0.clone()),
            );
        // b122_s4: not b122_s3
        let b122_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b122_s3.clone()));
        // b122_s5: branch b122_s4 block62 block123
        return ctx
            .emitter()
            .branch(
                b122_s4.clone(),
                fn_state.block_refs[62usize].clone(),
                fn_state.block_refs[123usize].clone(),
            );
    }
    fn block_123(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b123_s0: const #829s : i10
        let b123_s0 = ctx
            .emitter()
            .constant(
                829isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b123_s1: const #14656u : u32
        let b123_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b123_s2: write-reg b123_s1 <= b123_s0
        let b123_s2 = ctx.emitter().write_register(b123_s1.clone(), b123_s0.clone());
        // b123_s3: const #0s : i0
        let b123_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b123_s4: const #5s : i3
        let b123_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b123_s5: read-var u#26108:u32
        let b123_s5 = ctx.emitter().read_variable(fn_state.u_26108.clone());
        // b123_s6: bit-extract b123_s5 b123_s3 b123_s4
        let b123_s6 = ctx
            .emitter()
            .bit_extract(b123_s5.clone(), b123_s3.clone(), b123_s4.clone());
        // b123_s7: cast reint b123_s6 -> u5
        let b123_s7 = ctx
            .emitter()
            .cast(
                b123_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b123_s8: const #5s : i3
        let b123_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b123_s9: const #5s : i3
        let b123_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b123_s10: read-var u#26108:u32
        let b123_s10 = ctx.emitter().read_variable(fn_state.u_26108.clone());
        // b123_s11: bit-extract b123_s10 b123_s8 b123_s9
        let b123_s11 = ctx
            .emitter()
            .bit_extract(b123_s10.clone(), b123_s8.clone(), b123_s9.clone());
        // b123_s12: cast reint b123_s11 -> u5
        let b123_s12 = ctx
            .emitter()
            .cast(
                b123_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b123_s13: const #10s : i4
        let b123_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b123_s14: const #5s : i3
        let b123_s14 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b123_s15: read-var u#26108:u32
        let b123_s15 = ctx.emitter().read_variable(fn_state.u_26108.clone());
        // b123_s16: bit-extract b123_s15 b123_s13 b123_s14
        let b123_s16 = ctx
            .emitter()
            .bit_extract(b123_s15.clone(), b123_s13.clone(), b123_s14.clone());
        // b123_s17: cast reint b123_s16 -> u5
        let b123_s17 = ctx
            .emitter()
            .cast(
                b123_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b123_s18: const #15s : i4
        let b123_s18 = ctx
            .emitter()
            .constant(
                15isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b123_s19: const #1s : i1
        let b123_s19 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b123_s20: read-var u#26108:u32
        let b123_s20 = ctx.emitter().read_variable(fn_state.u_26108.clone());
        // b123_s21: bit-extract b123_s20 b123_s18 b123_s19
        let b123_s21 = ctx
            .emitter()
            .bit_extract(b123_s20.clone(), b123_s18.clone(), b123_s19.clone());
        // b123_s22: cast reint b123_s21 -> u1
        let b123_s22 = ctx
            .emitter()
            .cast(
                b123_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b123_s23: const #16s : i5
        let b123_s23 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b123_s24: const #5s : i3
        let b123_s24 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b123_s25: read-var u#26108:u32
        let b123_s25 = ctx.emitter().read_variable(fn_state.u_26108.clone());
        // b123_s26: bit-extract b123_s25 b123_s23 b123_s24
        let b123_s26 = ctx
            .emitter()
            .bit_extract(b123_s25.clone(), b123_s23.clone(), b123_s24.clone());
        // b123_s27: cast reint b123_s26 -> u5
        let b123_s27 = ctx
            .emitter()
            .cast(
                b123_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b123_s28: const #23s : i5
        let b123_s28 = ctx
            .emitter()
            .constant(
                23isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b123_s29: const #1s : i1
        let b123_s29 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b123_s30: read-var u#26108:u32
        let b123_s30 = ctx.emitter().read_variable(fn_state.u_26108.clone());
        // b123_s31: bit-extract b123_s30 b123_s28 b123_s29
        let b123_s31 = ctx
            .emitter()
            .bit_extract(b123_s30.clone(), b123_s28.clone(), b123_s29.clone());
        // b123_s32: cast reint b123_s31 -> u1
        let b123_s32 = ctx
            .emitter()
            .cast(
                b123_s31.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b123_s33: call decode_smsubl_aarch64_instrs_integer_arithmetic_mul_widening_32_64(b123_s7, b123_s12, b123_s17, b123_s22, b123_s27, b123_s32)
        let b123_s33 = decode_smsubl_aarch64_instrs_integer_arithmetic_mul_widening_32_64(
            ctx,
            b123_s7,
            b123_s12,
            b123_s17,
            b123_s22,
            b123_s27,
            b123_s32,
        );
        // b123_s34: return
        return BlockResult::None;
    }
    fn block_124(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b124_s0: const #15s : i4
        let b124_s0 = ctx
            .emitter()
            .constant(
                15isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b124_s1: read-var u#26101:u32
        let b124_s1 = ctx.emitter().read_variable(fn_state.u_26101.clone());
        // b124_s2: const #1s : i0
        let b124_s2 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b124_s3: bit-extract b124_s1 b124_s0 b124_s2
        let b124_s3 = ctx
            .emitter()
            .bit_extract(b124_s1.clone(), b124_s0.clone(), b124_s2.clone());
        // b124_s4: cast reint b124_s3 -> u1
        let b124_s4 = ctx
            .emitter()
            .cast(
                b124_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b124_s5: const #0u : u1
        let b124_s5 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b124_s6: cmp-eq b124_s4 b124_s5
        let b124_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b124_s4.clone(), b124_s5.clone()),
            );
        // b124_s7: branch b124_s6 block125 block61
        return ctx
            .emitter()
            .branch(
                b124_s6.clone(),
                fn_state.block_refs[125usize].clone(),
                fn_state.block_refs[61usize].clone(),
            );
    }
    fn block_125(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b125_s0: const #828s : i10
        let b125_s0 = ctx
            .emitter()
            .constant(
                828isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b125_s1: const #14656u : u32
        let b125_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b125_s2: read-reg b125_s1:i
        let b125_s2 = ctx
            .emitter()
            .read_register(
                b125_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b125_s3: cmp-lt b125_s2 b125_s0
        let b125_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b125_s2.clone(), b125_s0.clone()),
            );
        // b125_s4: not b125_s3
        let b125_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b125_s3.clone()));
        // b125_s5: branch b125_s4 block61 block126
        return ctx
            .emitter()
            .branch(
                b125_s4.clone(),
                fn_state.block_refs[61usize].clone(),
                fn_state.block_refs[126usize].clone(),
            );
    }
    fn block_126(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b126_s0: const #828s : i10
        let b126_s0 = ctx
            .emitter()
            .constant(
                828isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b126_s1: const #14656u : u32
        let b126_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b126_s2: write-reg b126_s1 <= b126_s0
        let b126_s2 = ctx.emitter().write_register(b126_s1.clone(), b126_s0.clone());
        // b126_s3: const #0s : i0
        let b126_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b126_s4: const #5s : i3
        let b126_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b126_s5: read-var u#26101:u32
        let b126_s5 = ctx.emitter().read_variable(fn_state.u_26101.clone());
        // b126_s6: bit-extract b126_s5 b126_s3 b126_s4
        let b126_s6 = ctx
            .emitter()
            .bit_extract(b126_s5.clone(), b126_s3.clone(), b126_s4.clone());
        // b126_s7: cast reint b126_s6 -> u5
        let b126_s7 = ctx
            .emitter()
            .cast(
                b126_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b126_s8: const #5s : i3
        let b126_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b126_s9: const #5s : i3
        let b126_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b126_s10: read-var u#26101:u32
        let b126_s10 = ctx.emitter().read_variable(fn_state.u_26101.clone());
        // b126_s11: bit-extract b126_s10 b126_s8 b126_s9
        let b126_s11 = ctx
            .emitter()
            .bit_extract(b126_s10.clone(), b126_s8.clone(), b126_s9.clone());
        // b126_s12: cast reint b126_s11 -> u5
        let b126_s12 = ctx
            .emitter()
            .cast(
                b126_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b126_s13: const #10s : i4
        let b126_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b126_s14: const #5s : i3
        let b126_s14 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b126_s15: read-var u#26101:u32
        let b126_s15 = ctx.emitter().read_variable(fn_state.u_26101.clone());
        // b126_s16: bit-extract b126_s15 b126_s13 b126_s14
        let b126_s16 = ctx
            .emitter()
            .bit_extract(b126_s15.clone(), b126_s13.clone(), b126_s14.clone());
        // b126_s17: cast reint b126_s16 -> u5
        let b126_s17 = ctx
            .emitter()
            .cast(
                b126_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b126_s18: const #15s : i4
        let b126_s18 = ctx
            .emitter()
            .constant(
                15isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b126_s19: const #1s : i1
        let b126_s19 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b126_s20: read-var u#26101:u32
        let b126_s20 = ctx.emitter().read_variable(fn_state.u_26101.clone());
        // b126_s21: bit-extract b126_s20 b126_s18 b126_s19
        let b126_s21 = ctx
            .emitter()
            .bit_extract(b126_s20.clone(), b126_s18.clone(), b126_s19.clone());
        // b126_s22: cast reint b126_s21 -> u1
        let b126_s22 = ctx
            .emitter()
            .cast(
                b126_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b126_s23: const #16s : i5
        let b126_s23 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b126_s24: const #5s : i3
        let b126_s24 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b126_s25: read-var u#26101:u32
        let b126_s25 = ctx.emitter().read_variable(fn_state.u_26101.clone());
        // b126_s26: bit-extract b126_s25 b126_s23 b126_s24
        let b126_s26 = ctx
            .emitter()
            .bit_extract(b126_s25.clone(), b126_s23.clone(), b126_s24.clone());
        // b126_s27: cast reint b126_s26 -> u5
        let b126_s27 = ctx
            .emitter()
            .cast(
                b126_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b126_s28: const #23s : i5
        let b126_s28 = ctx
            .emitter()
            .constant(
                23isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b126_s29: const #1s : i1
        let b126_s29 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b126_s30: read-var u#26101:u32
        let b126_s30 = ctx.emitter().read_variable(fn_state.u_26101.clone());
        // b126_s31: bit-extract b126_s30 b126_s28 b126_s29
        let b126_s31 = ctx
            .emitter()
            .bit_extract(b126_s30.clone(), b126_s28.clone(), b126_s29.clone());
        // b126_s32: cast reint b126_s31 -> u1
        let b126_s32 = ctx
            .emitter()
            .cast(
                b126_s31.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b126_s33: call decode_smaddl_aarch64_instrs_integer_arithmetic_mul_widening_32_64(b126_s7, b126_s12, b126_s17, b126_s22, b126_s27, b126_s32)
        let b126_s33 = decode_smaddl_aarch64_instrs_integer_arithmetic_mul_widening_32_64(
            ctx,
            b126_s7,
            b126_s12,
            b126_s17,
            b126_s22,
            b126_s27,
            b126_s32,
        );
        // b126_s34: return
        return BlockResult::None;
    }
    fn block_127(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b127_s0: const #10s : i4
        let b127_s0 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b127_s1: read-var u#26096:u32
        let b127_s1 = ctx.emitter().read_variable(fn_state.u_26096.clone());
        // b127_s2: const #4s : i2
        let b127_s2 = ctx
            .emitter()
            .constant(
                4isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b127_s3: bit-extract b127_s1 b127_s0 b127_s2
        let b127_s3 = ctx
            .emitter()
            .bit_extract(b127_s1.clone(), b127_s0.clone(), b127_s2.clone());
        // b127_s4: cast reint b127_s3 -> u4
        let b127_s4 = ctx
            .emitter()
            .cast(
                b127_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 4,
                },
                CastOperationKind::Reinterpret,
            );
        // b127_s5: const #2u : u4
        let b127_s5 = ctx
            .emitter()
            .constant(
                2,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 4,
                },
            );
        // b127_s6: cmp-eq b127_s4 b127_s5
        let b127_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b127_s4.clone(), b127_s5.clone()),
            );
        // b127_s7: branch b127_s6 block128 block60
        return ctx
            .emitter()
            .branch(
                b127_s6.clone(),
                fn_state.block_refs[128usize].clone(),
                fn_state.block_refs[60usize].clone(),
            );
    }
    fn block_128(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b128_s0: const #0s : i0
        let b128_s0 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b128_s1: read-var u#26096:u32
        let b128_s1 = ctx.emitter().read_variable(fn_state.u_26096.clone());
        // b128_s2: const #5s : i3
        let b128_s2 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b128_s3: bit-extract b128_s1 b128_s0 b128_s2
        let b128_s3 = ctx
            .emitter()
            .bit_extract(b128_s1.clone(), b128_s0.clone(), b128_s2.clone());
        // b128_s4: cast reint b128_s3 -> u5
        let b128_s4 = ctx
            .emitter()
            .cast(
                b128_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b128_s5: const #13u : u5
        let b128_s5 = ctx
            .emitter()
            .constant(
                13,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
            );
        // b128_s6: cmp-eq b128_s4 b128_s5
        let b128_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b128_s4.clone(), b128_s5.clone()),
            );
        // b128_s7: branch b128_s6 block129 block60
        return ctx
            .emitter()
            .branch(
                b128_s6.clone(),
                fn_state.block_refs[129usize].clone(),
                fn_state.block_refs[60usize].clone(),
            );
    }
    fn block_129(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b129_s0: const #791s : i10
        let b129_s0 = ctx
            .emitter()
            .constant(
                791isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b129_s1: const #14656u : u32
        let b129_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b129_s2: read-reg b129_s1:i
        let b129_s2 = ctx
            .emitter()
            .read_register(
                b129_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b129_s3: cmp-lt b129_s2 b129_s0
        let b129_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b129_s2.clone(), b129_s0.clone()),
            );
        // b129_s4: not b129_s3
        let b129_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b129_s3.clone()));
        // b129_s5: branch b129_s4 block60 block130
        return ctx
            .emitter()
            .branch(
                b129_s4.clone(),
                fn_state.block_refs[60usize].clone(),
                fn_state.block_refs[130usize].clone(),
            );
    }
    fn block_130(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b130_s0: const #791s : i10
        let b130_s0 = ctx
            .emitter()
            .constant(
                791isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b130_s1: const #14656u : u32
        let b130_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b130_s2: write-reg b130_s1 <= b130_s0
        let b130_s2 = ctx.emitter().write_register(b130_s1.clone(), b130_s0.clone());
        // b130_s3: const #5s : i3
        let b130_s3 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b130_s4: const #5s : i3
        let b130_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b130_s5: read-var u#26096:u32
        let b130_s5 = ctx.emitter().read_variable(fn_state.u_26096.clone());
        // b130_s6: bit-extract b130_s5 b130_s3 b130_s4
        let b130_s6 = ctx
            .emitter()
            .bit_extract(b130_s5.clone(), b130_s3.clone(), b130_s4.clone());
        // b130_s7: cast reint b130_s6 -> u5
        let b130_s7 = ctx
            .emitter()
            .cast(
                b130_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b130_s8: const #14s : i4
        let b130_s8 = ctx
            .emitter()
            .constant(
                14isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b130_s9: const #1s : i1
        let b130_s9 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b130_s10: read-var u#26096:u32
        let b130_s10 = ctx.emitter().read_variable(fn_state.u_26096.clone());
        // b130_s11: bit-extract b130_s10 b130_s8 b130_s9
        let b130_s11 = ctx
            .emitter()
            .bit_extract(b130_s10.clone(), b130_s8.clone(), b130_s9.clone());
        // b130_s12: cast reint b130_s11 -> u1
        let b130_s12 = ctx
            .emitter()
            .cast(
                b130_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b130_s13: const #31s : i5
        let b130_s13 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b130_s14: const #1s : i1
        let b130_s14 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b130_s15: read-var u#26096:u32
        let b130_s15 = ctx.emitter().read_variable(fn_state.u_26096.clone());
        // b130_s16: bit-extract b130_s15 b130_s13 b130_s14
        let b130_s16 = ctx
            .emitter()
            .bit_extract(b130_s15.clone(), b130_s13.clone(), b130_s14.clone());
        // b130_s17: cast reint b130_s16 -> u1
        let b130_s17 = ctx
            .emitter()
            .cast(
                b130_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b130_s18: call decode_setf_aarch64_instrs_integer_flags_setf(b130_s7, b130_s12, b130_s17)
        let b130_s18 = decode_setf_aarch64_instrs_integer_flags_setf(
            ctx,
            b130_s7,
            b130_s12,
            b130_s17,
        );
        // b130_s19: const #15616u : u32
        let b130_s19 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b130_s20: read-reg b130_s19:u1
        let b130_s20 = ctx
            .emitter()
            .read_register(
                b130_s19.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b130_s21: branch b130_s20 block78 block77
        return ctx
            .emitter()
            .branch(
                b130_s20.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_131(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b131_s0: const #10s : i4
        let b131_s0 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b131_s1: read-var u#26089:u32
        let b131_s1 = ctx.emitter().read_variable(fn_state.u_26089.clone());
        // b131_s2: const #6s : i3
        let b131_s2 = ctx
            .emitter()
            .constant(
                6isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b131_s3: bit-extract b131_s1 b131_s0 b131_s2
        let b131_s3 = ctx
            .emitter()
            .bit_extract(b131_s1.clone(), b131_s0.clone(), b131_s2.clone());
        // b131_s4: cast reint b131_s3 -> u6
        let b131_s4 = ctx
            .emitter()
            .cast(
                b131_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
                CastOperationKind::Reinterpret,
            );
        // b131_s5: const #2u : u6
        let b131_s5 = ctx
            .emitter()
            .constant(
                2,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
            );
        // b131_s6: cmp-eq b131_s4 b131_s5
        let b131_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b131_s4.clone(), b131_s5.clone()),
            );
        // b131_s7: branch b131_s6 block132 block59
        return ctx
            .emitter()
            .branch(
                b131_s6.clone(),
                fn_state.block_refs[132usize].clone(),
                fn_state.block_refs[59usize].clone(),
            );
    }
    fn block_132(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b132_s0: const #782s : i10
        let b132_s0 = ctx
            .emitter()
            .constant(
                782isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b132_s1: const #14656u : u32
        let b132_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b132_s2: read-reg b132_s1:i
        let b132_s2 = ctx
            .emitter()
            .read_register(
                b132_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b132_s3: cmp-lt b132_s2 b132_s0
        let b132_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b132_s2.clone(), b132_s0.clone()),
            );
        // b132_s4: not b132_s3
        let b132_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b132_s3.clone()));
        // b132_s5: branch b132_s4 block59 block133
        return ctx
            .emitter()
            .branch(
                b132_s4.clone(),
                fn_state.block_refs[59usize].clone(),
                fn_state.block_refs[133usize].clone(),
            );
    }
    fn block_133(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b133_s0: const #782s : i10
        let b133_s0 = ctx
            .emitter()
            .constant(
                782isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b133_s1: const #14656u : u32
        let b133_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b133_s2: write-reg b133_s1 <= b133_s0
        let b133_s2 = ctx.emitter().write_register(b133_s1.clone(), b133_s0.clone());
        // b133_s3: const #0s : i0
        let b133_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b133_s4: const #5s : i3
        let b133_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b133_s5: read-var u#26089:u32
        let b133_s5 = ctx.emitter().read_variable(fn_state.u_26089.clone());
        // b133_s6: bit-extract b133_s5 b133_s3 b133_s4
        let b133_s6 = ctx
            .emitter()
            .bit_extract(b133_s5.clone(), b133_s3.clone(), b133_s4.clone());
        // b133_s7: cast reint b133_s6 -> u5
        let b133_s7 = ctx
            .emitter()
            .cast(
                b133_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b133_s8: const #5s : i3
        let b133_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b133_s9: const #5s : i3
        let b133_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b133_s10: read-var u#26089:u32
        let b133_s10 = ctx.emitter().read_variable(fn_state.u_26089.clone());
        // b133_s11: bit-extract b133_s10 b133_s8 b133_s9
        let b133_s11 = ctx
            .emitter()
            .bit_extract(b133_s10.clone(), b133_s8.clone(), b133_s9.clone());
        // b133_s12: cast reint b133_s11 -> u5
        let b133_s12 = ctx
            .emitter()
            .cast(
                b133_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b133_s13: const #10s : i4
        let b133_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b133_s14: const #1s : i1
        let b133_s14 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b133_s15: read-var u#26089:u32
        let b133_s15 = ctx.emitter().read_variable(fn_state.u_26089.clone());
        // b133_s16: bit-extract b133_s15 b133_s13 b133_s14
        let b133_s16 = ctx
            .emitter()
            .bit_extract(b133_s15.clone(), b133_s13.clone(), b133_s14.clone());
        // b133_s17: cast reint b133_s16 -> u1
        let b133_s17 = ctx
            .emitter()
            .cast(
                b133_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b133_s18: const #16s : i5
        let b133_s18 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b133_s19: const #5s : i3
        let b133_s19 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b133_s20: read-var u#26089:u32
        let b133_s20 = ctx.emitter().read_variable(fn_state.u_26089.clone());
        // b133_s21: bit-extract b133_s20 b133_s18 b133_s19
        let b133_s21 = ctx
            .emitter()
            .bit_extract(b133_s20.clone(), b133_s18.clone(), b133_s19.clone());
        // b133_s22: cast reint b133_s21 -> u5
        let b133_s22 = ctx
            .emitter()
            .cast(
                b133_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b133_s23: const #31s : i5
        let b133_s23 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b133_s24: const #1s : i1
        let b133_s24 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b133_s25: read-var u#26089:u32
        let b133_s25 = ctx.emitter().read_variable(fn_state.u_26089.clone());
        // b133_s26: bit-extract b133_s25 b133_s23 b133_s24
        let b133_s26 = ctx
            .emitter()
            .bit_extract(b133_s25.clone(), b133_s23.clone(), b133_s24.clone());
        // b133_s27: cast reint b133_s26 -> u1
        let b133_s27 = ctx
            .emitter()
            .cast(
                b133_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b133_s28: call decode_udiv_aarch64_instrs_integer_arithmetic_div(b133_s7, b133_s12, b133_s17, b133_s22, b133_s27)
        let b133_s28 = decode_udiv_aarch64_instrs_integer_arithmetic_div(
            ctx,
            b133_s7,
            b133_s12,
            b133_s17,
            b133_s22,
            b133_s27,
        );
        // b133_s29: return
        return BlockResult::None;
    }
    fn block_134(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b134_s0: const #10s : i4
        let b134_s0 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b134_s1: read-var u#26083:u32
        let b134_s1 = ctx.emitter().read_variable(fn_state.u_26083.clone());
        // b134_s2: const #6s : i3
        let b134_s2 = ctx
            .emitter()
            .constant(
                6isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b134_s3: bit-extract b134_s1 b134_s0 b134_s2
        let b134_s3 = ctx
            .emitter()
            .bit_extract(b134_s1.clone(), b134_s0.clone(), b134_s2.clone());
        // b134_s4: cast reint b134_s3 -> u6
        let b134_s4 = ctx
            .emitter()
            .cast(
                b134_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
                CastOperationKind::Reinterpret,
            );
        // b134_s5: const #3u : u6
        let b134_s5 = ctx
            .emitter()
            .constant(
                3,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
            );
        // b134_s6: cmp-eq b134_s4 b134_s5
        let b134_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b134_s4.clone(), b134_s5.clone()),
            );
        // b134_s7: branch b134_s6 block135 block58
        return ctx
            .emitter()
            .branch(
                b134_s6.clone(),
                fn_state.block_refs[135usize].clone(),
                fn_state.block_refs[58usize].clone(),
            );
    }
    fn block_135(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b135_s0: const #781s : i10
        let b135_s0 = ctx
            .emitter()
            .constant(
                781isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b135_s1: const #14656u : u32
        let b135_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b135_s2: read-reg b135_s1:i
        let b135_s2 = ctx
            .emitter()
            .read_register(
                b135_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b135_s3: cmp-lt b135_s2 b135_s0
        let b135_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b135_s2.clone(), b135_s0.clone()),
            );
        // b135_s4: not b135_s3
        let b135_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b135_s3.clone()));
        // b135_s5: branch b135_s4 block58 block136
        return ctx
            .emitter()
            .branch(
                b135_s4.clone(),
                fn_state.block_refs[58usize].clone(),
                fn_state.block_refs[136usize].clone(),
            );
    }
    fn block_136(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b136_s0: const #781s : i10
        let b136_s0 = ctx
            .emitter()
            .constant(
                781isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b136_s1: const #14656u : u32
        let b136_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b136_s2: write-reg b136_s1 <= b136_s0
        let b136_s2 = ctx.emitter().write_register(b136_s1.clone(), b136_s0.clone());
        // b136_s3: const #0s : i0
        let b136_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b136_s4: const #5s : i3
        let b136_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b136_s5: read-var u#26083:u32
        let b136_s5 = ctx.emitter().read_variable(fn_state.u_26083.clone());
        // b136_s6: bit-extract b136_s5 b136_s3 b136_s4
        let b136_s6 = ctx
            .emitter()
            .bit_extract(b136_s5.clone(), b136_s3.clone(), b136_s4.clone());
        // b136_s7: cast reint b136_s6 -> u5
        let b136_s7 = ctx
            .emitter()
            .cast(
                b136_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b136_s8: const #5s : i3
        let b136_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b136_s9: const #5s : i3
        let b136_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b136_s10: read-var u#26083:u32
        let b136_s10 = ctx.emitter().read_variable(fn_state.u_26083.clone());
        // b136_s11: bit-extract b136_s10 b136_s8 b136_s9
        let b136_s11 = ctx
            .emitter()
            .bit_extract(b136_s10.clone(), b136_s8.clone(), b136_s9.clone());
        // b136_s12: cast reint b136_s11 -> u5
        let b136_s12 = ctx
            .emitter()
            .cast(
                b136_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b136_s13: const #10s : i4
        let b136_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b136_s14: const #1s : i1
        let b136_s14 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b136_s15: read-var u#26083:u32
        let b136_s15 = ctx.emitter().read_variable(fn_state.u_26083.clone());
        // b136_s16: bit-extract b136_s15 b136_s13 b136_s14
        let b136_s16 = ctx
            .emitter()
            .bit_extract(b136_s15.clone(), b136_s13.clone(), b136_s14.clone());
        // b136_s17: cast reint b136_s16 -> u1
        let b136_s17 = ctx
            .emitter()
            .cast(
                b136_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b136_s18: const #16s : i5
        let b136_s18 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b136_s19: const #5s : i3
        let b136_s19 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b136_s20: read-var u#26083:u32
        let b136_s20 = ctx.emitter().read_variable(fn_state.u_26083.clone());
        // b136_s21: bit-extract b136_s20 b136_s18 b136_s19
        let b136_s21 = ctx
            .emitter()
            .bit_extract(b136_s20.clone(), b136_s18.clone(), b136_s19.clone());
        // b136_s22: cast reint b136_s21 -> u5
        let b136_s22 = ctx
            .emitter()
            .cast(
                b136_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b136_s23: const #31s : i5
        let b136_s23 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b136_s24: const #1s : i1
        let b136_s24 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b136_s25: read-var u#26083:u32
        let b136_s25 = ctx.emitter().read_variable(fn_state.u_26083.clone());
        // b136_s26: bit-extract b136_s25 b136_s23 b136_s24
        let b136_s26 = ctx
            .emitter()
            .bit_extract(b136_s25.clone(), b136_s23.clone(), b136_s24.clone());
        // b136_s27: cast reint b136_s26 -> u1
        let b136_s27 = ctx
            .emitter()
            .cast(
                b136_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b136_s28: call decode_sdiv_aarch64_instrs_integer_arithmetic_div(b136_s7, b136_s12, b136_s17, b136_s22, b136_s27)
        let b136_s28 = decode_sdiv_aarch64_instrs_integer_arithmetic_div(
            ctx,
            b136_s7,
            b136_s12,
            b136_s17,
            b136_s22,
            b136_s27,
        );
        // b136_s29: return
        return BlockResult::None;
    }
    fn block_137(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b137_s0: const #10s : i4
        let b137_s0 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b137_s1: read-var u#26078:u32
        let b137_s1 = ctx.emitter().read_variable(fn_state.u_26078.clone());
        // b137_s2: const #5s : i3
        let b137_s2 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b137_s3: bit-extract b137_s1 b137_s0 b137_s2
        let b137_s3 = ctx
            .emitter()
            .bit_extract(b137_s1.clone(), b137_s0.clone(), b137_s2.clone());
        // b137_s4: cast reint b137_s3 -> u5
        let b137_s4 = ctx
            .emitter()
            .cast(
                b137_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b137_s5: const #1u : u5
        let b137_s5 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
            );
        // b137_s6: cmp-eq b137_s4 b137_s5
        let b137_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b137_s4.clone(), b137_s5.clone()),
            );
        // b137_s7: branch b137_s6 block138 block57
        return ctx
            .emitter()
            .branch(
                b137_s6.clone(),
                fn_state.block_refs[138usize].clone(),
                fn_state.block_refs[57usize].clone(),
            );
    }
    fn block_138(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b138_s0: const #4s : i3
        let b138_s0 = ctx
            .emitter()
            .constant(
                4isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b138_s1: read-var u#26078:u32
        let b138_s1 = ctx.emitter().read_variable(fn_state.u_26078.clone());
        // b138_s2: const #1s : i0
        let b138_s2 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b138_s3: bit-extract b138_s1 b138_s0 b138_s2
        let b138_s3 = ctx
            .emitter()
            .bit_extract(b138_s1.clone(), b138_s0.clone(), b138_s2.clone());
        // b138_s4: cast reint b138_s3 -> u1
        let b138_s4 = ctx
            .emitter()
            .cast(
                b138_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b138_s5: const #0u : u1
        let b138_s5 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b138_s6: cmp-eq b138_s4 b138_s5
        let b138_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b138_s4.clone(), b138_s5.clone()),
            );
        // b138_s7: branch b138_s6 block139 block57
        return ctx
            .emitter()
            .branch(
                b138_s6.clone(),
                fn_state.block_refs[139usize].clone(),
                fn_state.block_refs[57usize].clone(),
            );
    }
    fn block_139(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b139_s0: const #742s : i10
        let b139_s0 = ctx
            .emitter()
            .constant(
                742isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b139_s1: const #14656u : u32
        let b139_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b139_s2: read-reg b139_s1:i
        let b139_s2 = ctx
            .emitter()
            .read_register(
                b139_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b139_s3: cmp-lt b139_s2 b139_s0
        let b139_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b139_s2.clone(), b139_s0.clone()),
            );
        // b139_s4: not b139_s3
        let b139_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b139_s3.clone()));
        // b139_s5: branch b139_s4 block57 block140
        return ctx
            .emitter()
            .branch(
                b139_s4.clone(),
                fn_state.block_refs[57usize].clone(),
                fn_state.block_refs[140usize].clone(),
            );
    }
    fn block_140(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b140_s0: const #742s : i10
        let b140_s0 = ctx
            .emitter()
            .constant(
                742isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b140_s1: const #14656u : u32
        let b140_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b140_s2: write-reg b140_s1 <= b140_s0
        let b140_s2 = ctx.emitter().write_register(b140_s1.clone(), b140_s0.clone());
        // b140_s3: const #0s : i0
        let b140_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b140_s4: const #4s : i3
        let b140_s4 = ctx
            .emitter()
            .constant(
                4isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b140_s5: read-var u#26078:u32
        let b140_s5 = ctx.emitter().read_variable(fn_state.u_26078.clone());
        // b140_s6: bit-extract b140_s5 b140_s3 b140_s4
        let b140_s6 = ctx
            .emitter()
            .bit_extract(b140_s5.clone(), b140_s3.clone(), b140_s4.clone());
        // b140_s7: cast reint b140_s6 -> u4
        let b140_s7 = ctx
            .emitter()
            .cast(
                b140_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 4,
                },
                CastOperationKind::Reinterpret,
            );
        // b140_s8: const #5s : i3
        let b140_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b140_s9: const #5s : i3
        let b140_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b140_s10: read-var u#26078:u32
        let b140_s10 = ctx.emitter().read_variable(fn_state.u_26078.clone());
        // b140_s11: bit-extract b140_s10 b140_s8 b140_s9
        let b140_s11 = ctx
            .emitter()
            .bit_extract(b140_s10.clone(), b140_s8.clone(), b140_s9.clone());
        // b140_s12: cast reint b140_s11 -> u5
        let b140_s12 = ctx
            .emitter()
            .cast(
                b140_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b140_s13: const #15s : i4
        let b140_s13 = ctx
            .emitter()
            .constant(
                15isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b140_s14: const #6s : i3
        let b140_s14 = ctx
            .emitter()
            .constant(
                6isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b140_s15: read-var u#26078:u32
        let b140_s15 = ctx.emitter().read_variable(fn_state.u_26078.clone());
        // b140_s16: bit-extract b140_s15 b140_s13 b140_s14
        let b140_s16 = ctx
            .emitter()
            .bit_extract(b140_s15.clone(), b140_s13.clone(), b140_s14.clone());
        // b140_s17: cast reint b140_s16 -> u6
        let b140_s17 = ctx
            .emitter()
            .cast(
                b140_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
                CastOperationKind::Reinterpret,
            );
        // b140_s18: const #31s : i5
        let b140_s18 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b140_s19: const #1s : i1
        let b140_s19 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b140_s20: read-var u#26078:u32
        let b140_s20 = ctx.emitter().read_variable(fn_state.u_26078.clone());
        // b140_s21: bit-extract b140_s20 b140_s18 b140_s19
        let b140_s21 = ctx
            .emitter()
            .bit_extract(b140_s20.clone(), b140_s18.clone(), b140_s19.clone());
        // b140_s22: cast reint b140_s21 -> u1
        let b140_s22 = ctx
            .emitter()
            .cast(
                b140_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b140_s23: call decode_rmif_aarch64_instrs_integer_flags_rmif(b140_s7, b140_s12, b140_s17, b140_s22)
        let b140_s23 = decode_rmif_aarch64_instrs_integer_flags_rmif(
            ctx,
            b140_s7,
            b140_s12,
            b140_s17,
            b140_s22,
        );
        // b140_s24: const #15616u : u32
        let b140_s24 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b140_s25: read-reg b140_s24:u1
        let b140_s25 = ctx
            .emitter()
            .read_register(
                b140_s24.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b140_s26: branch b140_s25 block78 block77
        return ctx
            .emitter()
            .branch(
                b140_s25.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_141(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b141_s0: const #738s : i10
        let b141_s0 = ctx
            .emitter()
            .constant(
                738isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b141_s1: const #14656u : u32
        let b141_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b141_s2: read-reg b141_s1:i
        let b141_s2 = ctx
            .emitter()
            .read_register(
                b141_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b141_s3: cmp-lt b141_s2 b141_s0
        let b141_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b141_s2.clone(), b141_s0.clone()),
            );
        // b141_s4: not b141_s3
        let b141_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b141_s3.clone()));
        // b141_s5: branch b141_s4 block56 block142
        return ctx
            .emitter()
            .branch(
                b141_s4.clone(),
                fn_state.block_refs[56usize].clone(),
                fn_state.block_refs[142usize].clone(),
            );
    }
    fn block_142(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b142_s0: const #738s : i10
        let b142_s0 = ctx
            .emitter()
            .constant(
                738isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b142_s1: const #14656u : u32
        let b142_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b142_s2: write-reg b142_s1 <= b142_s0
        let b142_s2 = ctx.emitter().write_register(b142_s1.clone(), b142_s0.clone());
        // b142_s3: const #0s : i0
        let b142_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b142_s4: const #5s : i3
        let b142_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b142_s5: read-var u#26072:u32
        let b142_s5 = ctx.emitter().read_variable(fn_state.u_26072.clone());
        // b142_s6: bit-extract b142_s5 b142_s3 b142_s4
        let b142_s6 = ctx
            .emitter()
            .bit_extract(b142_s5.clone(), b142_s3.clone(), b142_s4.clone());
        // b142_s7: cast reint b142_s6 -> u5
        let b142_s7 = ctx
            .emitter()
            .cast(
                b142_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b142_s8: const #5s : i3
        let b142_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b142_s9: const #5s : i3
        let b142_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b142_s10: read-var u#26072:u32
        let b142_s10 = ctx.emitter().read_variable(fn_state.u_26072.clone());
        // b142_s11: bit-extract b142_s10 b142_s8 b142_s9
        let b142_s11 = ctx
            .emitter()
            .bit_extract(b142_s10.clone(), b142_s8.clone(), b142_s9.clone());
        // b142_s12: cast reint b142_s11 -> u5
        let b142_s12 = ctx
            .emitter()
            .cast(
                b142_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b142_s13: const #10s : i4
        let b142_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b142_s14: const #2s : i2
        let b142_s14 = ctx
            .emitter()
            .constant(
                2isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b142_s15: read-var u#26072:u32
        let b142_s15 = ctx.emitter().read_variable(fn_state.u_26072.clone());
        // b142_s16: bit-extract b142_s15 b142_s13 b142_s14
        let b142_s16 = ctx
            .emitter()
            .bit_extract(b142_s15.clone(), b142_s13.clone(), b142_s14.clone());
        // b142_s17: cast reint b142_s16 -> u2
        let b142_s17 = ctx
            .emitter()
            .cast(
                b142_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
                CastOperationKind::Reinterpret,
            );
        // b142_s18: const #31s : i5
        let b142_s18 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b142_s19: const #1s : i1
        let b142_s19 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b142_s20: read-var u#26072:u32
        let b142_s20 = ctx.emitter().read_variable(fn_state.u_26072.clone());
        // b142_s21: bit-extract b142_s20 b142_s18 b142_s19
        let b142_s21 = ctx
            .emitter()
            .bit_extract(b142_s20.clone(), b142_s18.clone(), b142_s19.clone());
        // b142_s22: cast reint b142_s21 -> u1
        let b142_s22 = ctx
            .emitter()
            .cast(
                b142_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b142_s23: call decode_rev32_int_aarch64_instrs_integer_arithmetic_rev(b142_s7, b142_s12, b142_s17, b142_s22)
        let b142_s23 = decode_rev32_int_aarch64_instrs_integer_arithmetic_rev(
            ctx,
            b142_s7,
            b142_s12,
            b142_s17,
            b142_s22,
        );
        // b142_s24: const #15616u : u32
        let b142_s24 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b142_s25: read-reg b142_s24:u1
        let b142_s25 = ctx
            .emitter()
            .read_register(
                b142_s24.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b142_s26: branch b142_s25 block78 block77
        return ctx
            .emitter()
            .branch(
                b142_s25.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_143(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b143_s0: const #737s : i10
        let b143_s0 = ctx
            .emitter()
            .constant(
                737isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b143_s1: const #14656u : u32
        let b143_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b143_s2: read-reg b143_s1:i
        let b143_s2 = ctx
            .emitter()
            .read_register(
                b143_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b143_s3: cmp-lt b143_s2 b143_s0
        let b143_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b143_s2.clone(), b143_s0.clone()),
            );
        // b143_s4: not b143_s3
        let b143_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b143_s3.clone()));
        // b143_s5: branch b143_s4 block55 block144
        return ctx
            .emitter()
            .branch(
                b143_s4.clone(),
                fn_state.block_refs[55usize].clone(),
                fn_state.block_refs[144usize].clone(),
            );
    }
    fn block_144(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b144_s0: const #737s : i10
        let b144_s0 = ctx
            .emitter()
            .constant(
                737isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b144_s1: const #14656u : u32
        let b144_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b144_s2: write-reg b144_s1 <= b144_s0
        let b144_s2 = ctx.emitter().write_register(b144_s1.clone(), b144_s0.clone());
        // b144_s3: const #0s : i0
        let b144_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b144_s4: const #5s : i3
        let b144_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b144_s5: read-var u#26066:u32
        let b144_s5 = ctx.emitter().read_variable(fn_state.u_26066.clone());
        // b144_s6: bit-extract b144_s5 b144_s3 b144_s4
        let b144_s6 = ctx
            .emitter()
            .bit_extract(b144_s5.clone(), b144_s3.clone(), b144_s4.clone());
        // b144_s7: cast reint b144_s6 -> u5
        let b144_s7 = ctx
            .emitter()
            .cast(
                b144_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b144_s8: const #5s : i3
        let b144_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b144_s9: const #5s : i3
        let b144_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b144_s10: read-var u#26066:u32
        let b144_s10 = ctx.emitter().read_variable(fn_state.u_26066.clone());
        // b144_s11: bit-extract b144_s10 b144_s8 b144_s9
        let b144_s11 = ctx
            .emitter()
            .bit_extract(b144_s10.clone(), b144_s8.clone(), b144_s9.clone());
        // b144_s12: cast reint b144_s11 -> u5
        let b144_s12 = ctx
            .emitter()
            .cast(
                b144_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b144_s13: const #10s : i4
        let b144_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b144_s14: const #2s : i2
        let b144_s14 = ctx
            .emitter()
            .constant(
                2isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b144_s15: read-var u#26066:u32
        let b144_s15 = ctx.emitter().read_variable(fn_state.u_26066.clone());
        // b144_s16: bit-extract b144_s15 b144_s13 b144_s14
        let b144_s16 = ctx
            .emitter()
            .bit_extract(b144_s15.clone(), b144_s13.clone(), b144_s14.clone());
        // b144_s17: cast reint b144_s16 -> u2
        let b144_s17 = ctx
            .emitter()
            .cast(
                b144_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
                CastOperationKind::Reinterpret,
            );
        // b144_s18: const #31s : i5
        let b144_s18 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b144_s19: const #1s : i1
        let b144_s19 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b144_s20: read-var u#26066:u32
        let b144_s20 = ctx.emitter().read_variable(fn_state.u_26066.clone());
        // b144_s21: bit-extract b144_s20 b144_s18 b144_s19
        let b144_s21 = ctx
            .emitter()
            .bit_extract(b144_s20.clone(), b144_s18.clone(), b144_s19.clone());
        // b144_s22: cast reint b144_s21 -> u1
        let b144_s22 = ctx
            .emitter()
            .cast(
                b144_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b144_s23: call decode_rev16_int_aarch64_instrs_integer_arithmetic_rev(b144_s7, b144_s12, b144_s17, b144_s22)
        let b144_s23 = decode_rev16_int_aarch64_instrs_integer_arithmetic_rev(
            ctx,
            b144_s7,
            b144_s12,
            b144_s17,
            b144_s22,
        );
        // b144_s24: const #15616u : u32
        let b144_s24 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b144_s25: read-reg b144_s24:u1
        let b144_s25 = ctx
            .emitter()
            .read_register(
                b144_s24.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b144_s26: branch b144_s25 block78 block77
        return ctx
            .emitter()
            .branch(
                b144_s25.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_145(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b145_s0: const #736s : i10
        let b145_s0 = ctx
            .emitter()
            .constant(
                736isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b145_s1: const #14656u : u32
        let b145_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b145_s2: read-reg b145_s1:i
        let b145_s2 = ctx
            .emitter()
            .read_register(
                b145_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b145_s3: cmp-lt b145_s2 b145_s0
        let b145_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b145_s2.clone(), b145_s0.clone()),
            );
        // b145_s4: not b145_s3
        let b145_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b145_s3.clone()));
        // b145_s5: branch b145_s4 block54 block146
        return ctx
            .emitter()
            .branch(
                b145_s4.clone(),
                fn_state.block_refs[54usize].clone(),
                fn_state.block_refs[146usize].clone(),
            );
    }
    fn block_146(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b146_s0: const #736s : i10
        let b146_s0 = ctx
            .emitter()
            .constant(
                736isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b146_s1: const #14656u : u32
        let b146_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b146_s2: write-reg b146_s1 <= b146_s0
        let b146_s2 = ctx.emitter().write_register(b146_s1.clone(), b146_s0.clone());
        // b146_s3: const #0s : i0
        let b146_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b146_s4: const #5s : i3
        let b146_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b146_s5: read-var u#26060:u32
        let b146_s5 = ctx.emitter().read_variable(fn_state.u_26060.clone());
        // b146_s6: bit-extract b146_s5 b146_s3 b146_s4
        let b146_s6 = ctx
            .emitter()
            .bit_extract(b146_s5.clone(), b146_s3.clone(), b146_s4.clone());
        // b146_s7: cast reint b146_s6 -> u5
        let b146_s7 = ctx
            .emitter()
            .cast(
                b146_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b146_s8: const #5s : i3
        let b146_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b146_s9: const #5s : i3
        let b146_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b146_s10: read-var u#26060:u32
        let b146_s10 = ctx.emitter().read_variable(fn_state.u_26060.clone());
        // b146_s11: bit-extract b146_s10 b146_s8 b146_s9
        let b146_s11 = ctx
            .emitter()
            .bit_extract(b146_s10.clone(), b146_s8.clone(), b146_s9.clone());
        // b146_s12: cast reint b146_s11 -> u5
        let b146_s12 = ctx
            .emitter()
            .cast(
                b146_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b146_s13: const #10s : i4
        let b146_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b146_s14: const #2s : i2
        let b146_s14 = ctx
            .emitter()
            .constant(
                2isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b146_s15: read-var u#26060:u32
        let b146_s15 = ctx.emitter().read_variable(fn_state.u_26060.clone());
        // b146_s16: bit-extract b146_s15 b146_s13 b146_s14
        let b146_s16 = ctx
            .emitter()
            .bit_extract(b146_s15.clone(), b146_s13.clone(), b146_s14.clone());
        // b146_s17: cast reint b146_s16 -> u2
        let b146_s17 = ctx
            .emitter()
            .cast(
                b146_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
                CastOperationKind::Reinterpret,
            );
        // b146_s18: const #31s : i5
        let b146_s18 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b146_s19: const #1s : i1
        let b146_s19 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b146_s20: read-var u#26060:u32
        let b146_s20 = ctx.emitter().read_variable(fn_state.u_26060.clone());
        // b146_s21: bit-extract b146_s20 b146_s18 b146_s19
        let b146_s21 = ctx
            .emitter()
            .bit_extract(b146_s20.clone(), b146_s18.clone(), b146_s19.clone());
        // b146_s22: cast reint b146_s21 -> u1
        let b146_s22 = ctx
            .emitter()
            .cast(
                b146_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b146_s23: call decode_rev_aarch64_instrs_integer_arithmetic_rev(b146_s7, b146_s12, b146_s17, b146_s22)
        let b146_s23 = decode_rev_aarch64_instrs_integer_arithmetic_rev(
            ctx,
            b146_s7,
            b146_s12,
            b146_s17,
            b146_s22,
        );
        // b146_s24: const #15616u : u32
        let b146_s24 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b146_s25: read-reg b146_s24:u1
        let b146_s25 = ctx
            .emitter()
            .read_register(
                b146_s24.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b146_s26: branch b146_s25 block78 block77
        return ctx
            .emitter()
            .branch(
                b146_s25.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_147(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b147_s0: const #719s : i10
        let b147_s0 = ctx
            .emitter()
            .constant(
                719isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b147_s1: const #14656u : u32
        let b147_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b147_s2: read-reg b147_s1:i
        let b147_s2 = ctx
            .emitter()
            .read_register(
                b147_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b147_s3: cmp-lt b147_s2 b147_s0
        let b147_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b147_s2.clone(), b147_s0.clone()),
            );
        // b147_s4: not b147_s3
        let b147_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b147_s3.clone()));
        // b147_s5: branch b147_s4 block53 block148
        return ctx
            .emitter()
            .branch(
                b147_s4.clone(),
                fn_state.block_refs[53usize].clone(),
                fn_state.block_refs[148usize].clone(),
            );
    }
    fn block_148(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b148_s0: const #719s : i10
        let b148_s0 = ctx
            .emitter()
            .constant(
                719isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b148_s1: const #14656u : u32
        let b148_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b148_s2: write-reg b148_s1 <= b148_s0
        let b148_s2 = ctx.emitter().write_register(b148_s1.clone(), b148_s0.clone());
        // b148_s3: const #0s : i0
        let b148_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b148_s4: const #5s : i3
        let b148_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b148_s5: read-var u#26055:u32
        let b148_s5 = ctx.emitter().read_variable(fn_state.u_26055.clone());
        // b148_s6: bit-extract b148_s5 b148_s3 b148_s4
        let b148_s6 = ctx
            .emitter()
            .bit_extract(b148_s5.clone(), b148_s3.clone(), b148_s4.clone());
        // b148_s7: cast reint b148_s6 -> u5
        let b148_s7 = ctx
            .emitter()
            .cast(
                b148_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b148_s8: const #5s : i3
        let b148_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b148_s9: const #5s : i3
        let b148_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b148_s10: read-var u#26055:u32
        let b148_s10 = ctx.emitter().read_variable(fn_state.u_26055.clone());
        // b148_s11: bit-extract b148_s10 b148_s8 b148_s9
        let b148_s11 = ctx
            .emitter()
            .bit_extract(b148_s10.clone(), b148_s8.clone(), b148_s9.clone());
        // b148_s12: cast reint b148_s11 -> u5
        let b148_s12 = ctx
            .emitter()
            .cast(
                b148_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b148_s13: const #31s : i5
        let b148_s13 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b148_s14: const #1s : i1
        let b148_s14 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b148_s15: read-var u#26055:u32
        let b148_s15 = ctx.emitter().read_variable(fn_state.u_26055.clone());
        // b148_s16: bit-extract b148_s15 b148_s13 b148_s14
        let b148_s16 = ctx
            .emitter()
            .bit_extract(b148_s15.clone(), b148_s13.clone(), b148_s14.clone());
        // b148_s17: cast reint b148_s16 -> u1
        let b148_s17 = ctx
            .emitter()
            .cast(
                b148_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b148_s18: call decode_rbit_int_aarch64_instrs_integer_arithmetic_rbit(b148_s7, b148_s12, b148_s17)
        let b148_s18 = decode_rbit_int_aarch64_instrs_integer_arithmetic_rbit(
            ctx,
            b148_s7,
            b148_s12,
            b148_s17,
        );
        // b148_s19: return
        return BlockResult::None;
    }
    fn block_149(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b149_s0: const #10s : i4
        let b149_s0 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b149_s1: read-var u#26050:u32
        let b149_s1 = ctx.emitter().read_variable(fn_state.u_26050.clone());
        // b149_s2: const #3s : i2
        let b149_s2 = ctx
            .emitter()
            .constant(
                3isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b149_s3: bit-extract b149_s1 b149_s0 b149_s2
        let b149_s3 = ctx
            .emitter()
            .bit_extract(b149_s1.clone(), b149_s0.clone(), b149_s2.clone());
        // b149_s4: cast reint b149_s3 -> u3
        let b149_s4 = ctx
            .emitter()
            .cast(
                b149_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 3,
                },
                CastOperationKind::Reinterpret,
            );
        // b149_s5: const #1u : u3
        let b149_s5 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 3,
                },
            );
        // b149_s6: cmp-eq b149_s4 b149_s5
        let b149_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b149_s4.clone(), b149_s5.clone()),
            );
        // b149_s7: branch b149_s6 block150 block52
        return ctx
            .emitter()
            .branch(
                b149_s6.clone(),
                fn_state.block_refs[150usize].clone(),
                fn_state.block_refs[52usize].clone(),
            );
    }
    fn block_150(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b150_s0: const #713s : i10
        let b150_s0 = ctx
            .emitter()
            .constant(
                713isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b150_s1: const #14656u : u32
        let b150_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b150_s2: read-reg b150_s1:i
        let b150_s2 = ctx
            .emitter()
            .read_register(
                b150_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b150_s3: cmp-lt b150_s2 b150_s0
        let b150_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b150_s2.clone(), b150_s0.clone()),
            );
        // b150_s4: not b150_s3
        let b150_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b150_s3.clone()));
        // b150_s5: branch b150_s4 block52 block151
        return ctx
            .emitter()
            .branch(
                b150_s4.clone(),
                fn_state.block_refs[52usize].clone(),
                fn_state.block_refs[151usize].clone(),
            );
    }
    fn block_151(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b151_s0: const #713s : i10
        let b151_s0 = ctx
            .emitter()
            .constant(
                713isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b151_s1: const #14656u : u32
        let b151_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b151_s2: write-reg b151_s1 <= b151_s0
        let b151_s2 = ctx.emitter().write_register(b151_s1.clone(), b151_s0.clone());
        // b151_s3: const #0s : i0
        let b151_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b151_s4: const #5s : i3
        let b151_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b151_s5: read-var u#26050:u32
        let b151_s5 = ctx.emitter().read_variable(fn_state.u_26050.clone());
        // b151_s6: bit-extract b151_s5 b151_s3 b151_s4
        let b151_s6 = ctx
            .emitter()
            .bit_extract(b151_s5.clone(), b151_s3.clone(), b151_s4.clone());
        // b151_s7: cast reint b151_s6 -> u5
        let b151_s7 = ctx
            .emitter()
            .cast(
                b151_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b151_s8: const #5s : i3
        let b151_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b151_s9: const #5s : i3
        let b151_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b151_s10: read-var u#26050:u32
        let b151_s10 = ctx.emitter().read_variable(fn_state.u_26050.clone());
        // b151_s11: bit-extract b151_s10 b151_s8 b151_s9
        let b151_s11 = ctx
            .emitter()
            .bit_extract(b151_s10.clone(), b151_s8.clone(), b151_s9.clone());
        // b151_s12: cast reint b151_s11 -> u5
        let b151_s12 = ctx
            .emitter()
            .cast(
                b151_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b151_s13: const #13s : i4
        let b151_s13 = ctx
            .emitter()
            .constant(
                13isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b151_s14: const #1s : i1
        let b151_s14 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b151_s15: read-var u#26050:u32
        let b151_s15 = ctx.emitter().read_variable(fn_state.u_26050.clone());
        // b151_s16: bit-extract b151_s15 b151_s13 b151_s14
        let b151_s16 = ctx
            .emitter()
            .bit_extract(b151_s15.clone(), b151_s13.clone(), b151_s14.clone());
        // b151_s17: cast reint b151_s16 -> u1
        let b151_s17 = ctx
            .emitter()
            .cast(
                b151_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b151_s18: call decode_pacib_aarch64_instrs_integer_pac_pacib_dp_1src(b151_s7, b151_s12, b151_s17)
        let b151_s18 = decode_pacib_aarch64_instrs_integer_pac_pacib_dp_1src(
            ctx,
            b151_s7,
            b151_s12,
            b151_s17,
        );
        // b151_s19: const #15616u : u32
        let b151_s19 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b151_s20: read-reg b151_s19:u1
        let b151_s20 = ctx
            .emitter()
            .read_register(
                b151_s19.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b151_s21: branch b151_s20 block78 block77
        return ctx
            .emitter()
            .branch(
                b151_s20.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_152(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b152_s0: const #10s : i4
        let b152_s0 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b152_s1: read-var u#26045:u32
        let b152_s1 = ctx.emitter().read_variable(fn_state.u_26045.clone());
        // b152_s2: const #3s : i2
        let b152_s2 = ctx
            .emitter()
            .constant(
                3isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b152_s3: bit-extract b152_s1 b152_s0 b152_s2
        let b152_s3 = ctx
            .emitter()
            .bit_extract(b152_s1.clone(), b152_s0.clone(), b152_s2.clone());
        // b152_s4: cast reint b152_s3 -> u3
        let b152_s4 = ctx
            .emitter()
            .cast(
                b152_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 3,
                },
                CastOperationKind::Reinterpret,
            );
        // b152_s5: const #0u : u3
        let b152_s5 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 3,
                },
            );
        // b152_s6: cmp-eq b152_s4 b152_s5
        let b152_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b152_s4.clone(), b152_s5.clone()),
            );
        // b152_s7: branch b152_s6 block153 block51
        return ctx
            .emitter()
            .branch(
                b152_s6.clone(),
                fn_state.block_refs[153usize].clone(),
                fn_state.block_refs[51usize].clone(),
            );
    }
    fn block_153(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b153_s0: const #711s : i10
        let b153_s0 = ctx
            .emitter()
            .constant(
                711isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b153_s1: const #14656u : u32
        let b153_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b153_s2: read-reg b153_s1:i
        let b153_s2 = ctx
            .emitter()
            .read_register(
                b153_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b153_s3: cmp-lt b153_s2 b153_s0
        let b153_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b153_s2.clone(), b153_s0.clone()),
            );
        // b153_s4: not b153_s3
        let b153_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b153_s3.clone()));
        // b153_s5: branch b153_s4 block51 block154
        return ctx
            .emitter()
            .branch(
                b153_s4.clone(),
                fn_state.block_refs[51usize].clone(),
                fn_state.block_refs[154usize].clone(),
            );
    }
    fn block_154(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b154_s0: const #711s : i10
        let b154_s0 = ctx
            .emitter()
            .constant(
                711isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b154_s1: const #14656u : u32
        let b154_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b154_s2: write-reg b154_s1 <= b154_s0
        let b154_s2 = ctx.emitter().write_register(b154_s1.clone(), b154_s0.clone());
        // b154_s3: const #0s : i0
        let b154_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b154_s4: const #5s : i3
        let b154_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b154_s5: read-var u#26045:u32
        let b154_s5 = ctx.emitter().read_variable(fn_state.u_26045.clone());
        // b154_s6: bit-extract b154_s5 b154_s3 b154_s4
        let b154_s6 = ctx
            .emitter()
            .bit_extract(b154_s5.clone(), b154_s3.clone(), b154_s4.clone());
        // b154_s7: cast reint b154_s6 -> u5
        let b154_s7 = ctx
            .emitter()
            .cast(
                b154_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b154_s8: const #5s : i3
        let b154_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b154_s9: const #5s : i3
        let b154_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b154_s10: read-var u#26045:u32
        let b154_s10 = ctx.emitter().read_variable(fn_state.u_26045.clone());
        // b154_s11: bit-extract b154_s10 b154_s8 b154_s9
        let b154_s11 = ctx
            .emitter()
            .bit_extract(b154_s10.clone(), b154_s8.clone(), b154_s9.clone());
        // b154_s12: cast reint b154_s11 -> u5
        let b154_s12 = ctx
            .emitter()
            .cast(
                b154_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b154_s13: const #13s : i4
        let b154_s13 = ctx
            .emitter()
            .constant(
                13isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b154_s14: const #1s : i1
        let b154_s14 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b154_s15: read-var u#26045:u32
        let b154_s15 = ctx.emitter().read_variable(fn_state.u_26045.clone());
        // b154_s16: bit-extract b154_s15 b154_s13 b154_s14
        let b154_s16 = ctx
            .emitter()
            .bit_extract(b154_s15.clone(), b154_s13.clone(), b154_s14.clone());
        // b154_s17: cast reint b154_s16 -> u1
        let b154_s17 = ctx
            .emitter()
            .cast(
                b154_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b154_s18: call decode_pacia_aarch64_instrs_integer_pac_pacia_dp_1src(b154_s7, b154_s12, b154_s17)
        let b154_s18 = decode_pacia_aarch64_instrs_integer_pac_pacia_dp_1src(
            ctx,
            b154_s7,
            b154_s12,
            b154_s17,
        );
        // b154_s19: const #15616u : u32
        let b154_s19 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b154_s20: read-reg b154_s19:u1
        let b154_s20 = ctx
            .emitter()
            .read_register(
                b154_s19.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b154_s21: branch b154_s20 block78 block77
        return ctx
            .emitter()
            .branch(
                b154_s20.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_155(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b155_s0: const #10s : i4
        let b155_s0 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b155_s1: read-var u#26040:u32
        let b155_s1 = ctx.emitter().read_variable(fn_state.u_26040.clone());
        // b155_s2: const #6s : i3
        let b155_s2 = ctx
            .emitter()
            .constant(
                6isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b155_s3: bit-extract b155_s1 b155_s0 b155_s2
        let b155_s3 = ctx
            .emitter()
            .bit_extract(b155_s1.clone(), b155_s0.clone(), b155_s2.clone());
        // b155_s4: cast reint b155_s3 -> u6
        let b155_s4 = ctx
            .emitter()
            .cast(
                b155_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
                CastOperationKind::Reinterpret,
            );
        // b155_s5: const #12u : u6
        let b155_s5 = ctx
            .emitter()
            .constant(
                12,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
            );
        // b155_s6: cmp-eq b155_s4 b155_s5
        let b155_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b155_s4.clone(), b155_s5.clone()),
            );
        // b155_s7: branch b155_s6 block156 block50
        return ctx
            .emitter()
            .branch(
                b155_s6.clone(),
                fn_state.block_refs[156usize].clone(),
                fn_state.block_refs[50usize].clone(),
            );
    }
    fn block_156(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b156_s0: const #710s : i10
        let b156_s0 = ctx
            .emitter()
            .constant(
                710isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b156_s1: const #14656u : u32
        let b156_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b156_s2: read-reg b156_s1:i
        let b156_s2 = ctx
            .emitter()
            .read_register(
                b156_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b156_s3: cmp-lt b156_s2 b156_s0
        let b156_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b156_s2.clone(), b156_s0.clone()),
            );
        // b156_s4: not b156_s3
        let b156_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b156_s3.clone()));
        // b156_s5: branch b156_s4 block50 block157
        return ctx
            .emitter()
            .branch(
                b156_s4.clone(),
                fn_state.block_refs[50usize].clone(),
                fn_state.block_refs[157usize].clone(),
            );
    }
    fn block_157(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b157_s0: const #710s : i10
        let b157_s0 = ctx
            .emitter()
            .constant(
                710isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b157_s1: const #14656u : u32
        let b157_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b157_s2: write-reg b157_s1 <= b157_s0
        let b157_s2 = ctx.emitter().write_register(b157_s1.clone(), b157_s0.clone());
        // b157_s3: const #0s : i0
        let b157_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b157_s4: const #5s : i3
        let b157_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b157_s5: read-var u#26040:u32
        let b157_s5 = ctx.emitter().read_variable(fn_state.u_26040.clone());
        // b157_s6: bit-extract b157_s5 b157_s3 b157_s4
        let b157_s6 = ctx
            .emitter()
            .bit_extract(b157_s5.clone(), b157_s3.clone(), b157_s4.clone());
        // b157_s7: cast reint b157_s6 -> u5
        let b157_s7 = ctx
            .emitter()
            .cast(
                b157_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b157_s8: const #5s : i3
        let b157_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b157_s9: const #5s : i3
        let b157_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b157_s10: read-var u#26040:u32
        let b157_s10 = ctx.emitter().read_variable(fn_state.u_26040.clone());
        // b157_s11: bit-extract b157_s10 b157_s8 b157_s9
        let b157_s11 = ctx
            .emitter()
            .bit_extract(b157_s10.clone(), b157_s8.clone(), b157_s9.clone());
        // b157_s12: cast reint b157_s11 -> u5
        let b157_s12 = ctx
            .emitter()
            .cast(
                b157_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b157_s13: const #16s : i5
        let b157_s13 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b157_s14: const #5s : i3
        let b157_s14 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b157_s15: read-var u#26040:u32
        let b157_s15 = ctx.emitter().read_variable(fn_state.u_26040.clone());
        // b157_s16: bit-extract b157_s15 b157_s13 b157_s14
        let b157_s16 = ctx
            .emitter()
            .bit_extract(b157_s15.clone(), b157_s13.clone(), b157_s14.clone());
        // b157_s17: cast reint b157_s16 -> u5
        let b157_s17 = ctx
            .emitter()
            .cast(
                b157_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b157_s18: call decode_pacga_aarch64_instrs_integer_pac_pacga_dp_2src(b157_s7, b157_s12, b157_s17)
        let b157_s18 = decode_pacga_aarch64_instrs_integer_pac_pacga_dp_2src(
            ctx,
            b157_s7,
            b157_s12,
            b157_s17,
        );
        // b157_s19: const #15616u : u32
        let b157_s19 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b157_s20: read-reg b157_s19:u1
        let b157_s20 = ctx
            .emitter()
            .read_register(
                b157_s19.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b157_s21: branch b157_s20 block78 block77
        return ctx
            .emitter()
            .branch(
                b157_s20.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_158(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b158_s0: const #10s : i4
        let b158_s0 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b158_s1: read-var u#26035:u32
        let b158_s1 = ctx.emitter().read_variable(fn_state.u_26035.clone());
        // b158_s2: const #3s : i2
        let b158_s2 = ctx
            .emitter()
            .constant(
                3isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b158_s3: bit-extract b158_s1 b158_s0 b158_s2
        let b158_s3 = ctx
            .emitter()
            .bit_extract(b158_s1.clone(), b158_s0.clone(), b158_s2.clone());
        // b158_s4: cast reint b158_s3 -> u3
        let b158_s4 = ctx
            .emitter()
            .cast(
                b158_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 3,
                },
                CastOperationKind::Reinterpret,
            );
        // b158_s5: const #3u : u3
        let b158_s5 = ctx
            .emitter()
            .constant(
                3,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 3,
                },
            );
        // b158_s6: cmp-eq b158_s4 b158_s5
        let b158_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b158_s4.clone(), b158_s5.clone()),
            );
        // b158_s7: branch b158_s6 block159 block49
        return ctx
            .emitter()
            .branch(
                b158_s6.clone(),
                fn_state.block_refs[159usize].clone(),
                fn_state.block_refs[49usize].clone(),
            );
    }
    fn block_159(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b159_s0: const #709s : i10
        let b159_s0 = ctx
            .emitter()
            .constant(
                709isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b159_s1: const #14656u : u32
        let b159_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b159_s2: read-reg b159_s1:i
        let b159_s2 = ctx
            .emitter()
            .read_register(
                b159_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b159_s3: cmp-lt b159_s2 b159_s0
        let b159_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b159_s2.clone(), b159_s0.clone()),
            );
        // b159_s4: not b159_s3
        let b159_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b159_s3.clone()));
        // b159_s5: branch b159_s4 block49 block160
        return ctx
            .emitter()
            .branch(
                b159_s4.clone(),
                fn_state.block_refs[49usize].clone(),
                fn_state.block_refs[160usize].clone(),
            );
    }
    fn block_160(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b160_s0: const #709s : i10
        let b160_s0 = ctx
            .emitter()
            .constant(
                709isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b160_s1: const #14656u : u32
        let b160_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b160_s2: write-reg b160_s1 <= b160_s0
        let b160_s2 = ctx.emitter().write_register(b160_s1.clone(), b160_s0.clone());
        // b160_s3: const #0s : i0
        let b160_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b160_s4: const #5s : i3
        let b160_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b160_s5: read-var u#26035:u32
        let b160_s5 = ctx.emitter().read_variable(fn_state.u_26035.clone());
        // b160_s6: bit-extract b160_s5 b160_s3 b160_s4
        let b160_s6 = ctx
            .emitter()
            .bit_extract(b160_s5.clone(), b160_s3.clone(), b160_s4.clone());
        // b160_s7: cast reint b160_s6 -> u5
        let b160_s7 = ctx
            .emitter()
            .cast(
                b160_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b160_s8: const #5s : i3
        let b160_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b160_s9: const #5s : i3
        let b160_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b160_s10: read-var u#26035:u32
        let b160_s10 = ctx.emitter().read_variable(fn_state.u_26035.clone());
        // b160_s11: bit-extract b160_s10 b160_s8 b160_s9
        let b160_s11 = ctx
            .emitter()
            .bit_extract(b160_s10.clone(), b160_s8.clone(), b160_s9.clone());
        // b160_s12: cast reint b160_s11 -> u5
        let b160_s12 = ctx
            .emitter()
            .cast(
                b160_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b160_s13: const #13s : i4
        let b160_s13 = ctx
            .emitter()
            .constant(
                13isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b160_s14: const #1s : i1
        let b160_s14 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b160_s15: read-var u#26035:u32
        let b160_s15 = ctx.emitter().read_variable(fn_state.u_26035.clone());
        // b160_s16: bit-extract b160_s15 b160_s13 b160_s14
        let b160_s16 = ctx
            .emitter()
            .bit_extract(b160_s15.clone(), b160_s13.clone(), b160_s14.clone());
        // b160_s17: cast reint b160_s16 -> u1
        let b160_s17 = ctx
            .emitter()
            .cast(
                b160_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b160_s18: call decode_pacdb_aarch64_instrs_integer_pac_pacdb_dp_1src(b160_s7, b160_s12, b160_s17)
        let b160_s18 = decode_pacdb_aarch64_instrs_integer_pac_pacdb_dp_1src(
            ctx,
            b160_s7,
            b160_s12,
            b160_s17,
        );
        // b160_s19: const #15616u : u32
        let b160_s19 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b160_s20: read-reg b160_s19:u1
        let b160_s20 = ctx
            .emitter()
            .read_register(
                b160_s19.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b160_s21: branch b160_s20 block78 block77
        return ctx
            .emitter()
            .branch(
                b160_s20.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_161(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b161_s0: const #10s : i4
        let b161_s0 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b161_s1: read-var u#26030:u32
        let b161_s1 = ctx.emitter().read_variable(fn_state.u_26030.clone());
        // b161_s2: const #3s : i2
        let b161_s2 = ctx
            .emitter()
            .constant(
                3isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b161_s3: bit-extract b161_s1 b161_s0 b161_s2
        let b161_s3 = ctx
            .emitter()
            .bit_extract(b161_s1.clone(), b161_s0.clone(), b161_s2.clone());
        // b161_s4: cast reint b161_s3 -> u3
        let b161_s4 = ctx
            .emitter()
            .cast(
                b161_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 3,
                },
                CastOperationKind::Reinterpret,
            );
        // b161_s5: const #2u : u3
        let b161_s5 = ctx
            .emitter()
            .constant(
                2,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 3,
                },
            );
        // b161_s6: cmp-eq b161_s4 b161_s5
        let b161_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b161_s4.clone(), b161_s5.clone()),
            );
        // b161_s7: branch b161_s6 block162 block48
        return ctx
            .emitter()
            .branch(
                b161_s6.clone(),
                fn_state.block_refs[162usize].clone(),
                fn_state.block_refs[48usize].clone(),
            );
    }
    fn block_162(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b162_s0: const #708s : i10
        let b162_s0 = ctx
            .emitter()
            .constant(
                708isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b162_s1: const #14656u : u32
        let b162_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b162_s2: read-reg b162_s1:i
        let b162_s2 = ctx
            .emitter()
            .read_register(
                b162_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b162_s3: cmp-lt b162_s2 b162_s0
        let b162_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b162_s2.clone(), b162_s0.clone()),
            );
        // b162_s4: not b162_s3
        let b162_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b162_s3.clone()));
        // b162_s5: branch b162_s4 block48 block163
        return ctx
            .emitter()
            .branch(
                b162_s4.clone(),
                fn_state.block_refs[48usize].clone(),
                fn_state.block_refs[163usize].clone(),
            );
    }
    fn block_163(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b163_s0: const #708s : i10
        let b163_s0 = ctx
            .emitter()
            .constant(
                708isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b163_s1: const #14656u : u32
        let b163_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b163_s2: write-reg b163_s1 <= b163_s0
        let b163_s2 = ctx.emitter().write_register(b163_s1.clone(), b163_s0.clone());
        // b163_s3: const #0s : i0
        let b163_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b163_s4: const #5s : i3
        let b163_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b163_s5: read-var u#26030:u32
        let b163_s5 = ctx.emitter().read_variable(fn_state.u_26030.clone());
        // b163_s6: bit-extract b163_s5 b163_s3 b163_s4
        let b163_s6 = ctx
            .emitter()
            .bit_extract(b163_s5.clone(), b163_s3.clone(), b163_s4.clone());
        // b163_s7: cast reint b163_s6 -> u5
        let b163_s7 = ctx
            .emitter()
            .cast(
                b163_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b163_s8: const #5s : i3
        let b163_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b163_s9: const #5s : i3
        let b163_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b163_s10: read-var u#26030:u32
        let b163_s10 = ctx.emitter().read_variable(fn_state.u_26030.clone());
        // b163_s11: bit-extract b163_s10 b163_s8 b163_s9
        let b163_s11 = ctx
            .emitter()
            .bit_extract(b163_s10.clone(), b163_s8.clone(), b163_s9.clone());
        // b163_s12: cast reint b163_s11 -> u5
        let b163_s12 = ctx
            .emitter()
            .cast(
                b163_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b163_s13: const #13s : i4
        let b163_s13 = ctx
            .emitter()
            .constant(
                13isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b163_s14: const #1s : i1
        let b163_s14 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b163_s15: read-var u#26030:u32
        let b163_s15 = ctx.emitter().read_variable(fn_state.u_26030.clone());
        // b163_s16: bit-extract b163_s15 b163_s13 b163_s14
        let b163_s16 = ctx
            .emitter()
            .bit_extract(b163_s15.clone(), b163_s13.clone(), b163_s14.clone());
        // b163_s17: cast reint b163_s16 -> u1
        let b163_s17 = ctx
            .emitter()
            .cast(
                b163_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b163_s18: call decode_pacda_aarch64_instrs_integer_pac_pacda_dp_1src(b163_s7, b163_s12, b163_s17)
        let b163_s18 = decode_pacda_aarch64_instrs_integer_pac_pacda_dp_1src(
            ctx,
            b163_s7,
            b163_s12,
            b163_s17,
        );
        // b163_s19: const #15616u : u32
        let b163_s19 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b163_s20: read-reg b163_s19:u1
        let b163_s20 = ctx
            .emitter()
            .read_register(
                b163_s19.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b163_s21: branch b163_s20 block78 block77
        return ctx
            .emitter()
            .branch(
                b163_s20.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_164(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b164_s0: const #15s : i4
        let b164_s0 = ctx
            .emitter()
            .constant(
                15isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b164_s1: read-var u#26022:u32
        let b164_s1 = ctx.emitter().read_variable(fn_state.u_26022.clone());
        // b164_s2: const #1s : i0
        let b164_s2 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b164_s3: bit-extract b164_s1 b164_s0 b164_s2
        let b164_s3 = ctx
            .emitter()
            .bit_extract(b164_s1.clone(), b164_s0.clone(), b164_s2.clone());
        // b164_s4: cast reint b164_s3 -> u1
        let b164_s4 = ctx
            .emitter()
            .cast(
                b164_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b164_s5: const #1u : u1
        let b164_s5 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b164_s6: cmp-eq b164_s4 b164_s5
        let b164_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b164_s4.clone(), b164_s5.clone()),
            );
        // b164_s7: branch b164_s6 block165 block47
        return ctx
            .emitter()
            .branch(
                b164_s6.clone(),
                fn_state.block_refs[165usize].clone(),
                fn_state.block_refs[47usize].clone(),
            );
    }
    fn block_165(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b165_s0: const #691s : i10
        let b165_s0 = ctx
            .emitter()
            .constant(
                691isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b165_s1: const #14656u : u32
        let b165_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b165_s2: read-reg b165_s1:i
        let b165_s2 = ctx
            .emitter()
            .read_register(
                b165_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b165_s3: cmp-lt b165_s2 b165_s0
        let b165_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b165_s2.clone(), b165_s0.clone()),
            );
        // b165_s4: not b165_s3
        let b165_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b165_s3.clone()));
        // b165_s5: branch b165_s4 block47 block166
        return ctx
            .emitter()
            .branch(
                b165_s4.clone(),
                fn_state.block_refs[47usize].clone(),
                fn_state.block_refs[166usize].clone(),
            );
    }
    fn block_166(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b166_s0: const #691s : i10
        let b166_s0 = ctx
            .emitter()
            .constant(
                691isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b166_s1: const #14656u : u32
        let b166_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b166_s2: write-reg b166_s1 <= b166_s0
        let b166_s2 = ctx.emitter().write_register(b166_s1.clone(), b166_s0.clone());
        // b166_s3: const #0s : i0
        let b166_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b166_s4: const #5s : i3
        let b166_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b166_s5: read-var u#26022:u32
        let b166_s5 = ctx.emitter().read_variable(fn_state.u_26022.clone());
        // b166_s6: bit-extract b166_s5 b166_s3 b166_s4
        let b166_s6 = ctx
            .emitter()
            .bit_extract(b166_s5.clone(), b166_s3.clone(), b166_s4.clone());
        // b166_s7: cast reint b166_s6 -> u5
        let b166_s7 = ctx
            .emitter()
            .cast(
                b166_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b166_s8: const #5s : i3
        let b166_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b166_s9: const #5s : i3
        let b166_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b166_s10: read-var u#26022:u32
        let b166_s10 = ctx.emitter().read_variable(fn_state.u_26022.clone());
        // b166_s11: bit-extract b166_s10 b166_s8 b166_s9
        let b166_s11 = ctx
            .emitter()
            .bit_extract(b166_s10.clone(), b166_s8.clone(), b166_s9.clone());
        // b166_s12: cast reint b166_s11 -> u5
        let b166_s12 = ctx
            .emitter()
            .cast(
                b166_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b166_s13: const #10s : i4
        let b166_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b166_s14: const #5s : i3
        let b166_s14 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b166_s15: read-var u#26022:u32
        let b166_s15 = ctx.emitter().read_variable(fn_state.u_26022.clone());
        // b166_s16: bit-extract b166_s15 b166_s13 b166_s14
        let b166_s16 = ctx
            .emitter()
            .bit_extract(b166_s15.clone(), b166_s13.clone(), b166_s14.clone());
        // b166_s17: cast reint b166_s16 -> u5
        let b166_s17 = ctx
            .emitter()
            .cast(
                b166_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b166_s18: const #15s : i4
        let b166_s18 = ctx
            .emitter()
            .constant(
                15isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b166_s19: const #1s : i1
        let b166_s19 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b166_s20: read-var u#26022:u32
        let b166_s20 = ctx.emitter().read_variable(fn_state.u_26022.clone());
        // b166_s21: bit-extract b166_s20 b166_s18 b166_s19
        let b166_s21 = ctx
            .emitter()
            .bit_extract(b166_s20.clone(), b166_s18.clone(), b166_s19.clone());
        // b166_s22: cast reint b166_s21 -> u1
        let b166_s22 = ctx
            .emitter()
            .cast(
                b166_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b166_s23: const #16s : i5
        let b166_s23 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b166_s24: const #5s : i3
        let b166_s24 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b166_s25: read-var u#26022:u32
        let b166_s25 = ctx.emitter().read_variable(fn_state.u_26022.clone());
        // b166_s26: bit-extract b166_s25 b166_s23 b166_s24
        let b166_s26 = ctx
            .emitter()
            .bit_extract(b166_s25.clone(), b166_s23.clone(), b166_s24.clone());
        // b166_s27: cast reint b166_s26 -> u5
        let b166_s27 = ctx
            .emitter()
            .cast(
                b166_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b166_s28: const #31s : i5
        let b166_s28 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b166_s29: const #1s : i1
        let b166_s29 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b166_s30: read-var u#26022:u32
        let b166_s30 = ctx.emitter().read_variable(fn_state.u_26022.clone());
        // b166_s31: bit-extract b166_s30 b166_s28 b166_s29
        let b166_s31 = ctx
            .emitter()
            .bit_extract(b166_s30.clone(), b166_s28.clone(), b166_s29.clone());
        // b166_s32: cast reint b166_s31 -> u1
        let b166_s32 = ctx
            .emitter()
            .cast(
                b166_s31.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b166_s33: call decode_msub_aarch64_instrs_integer_arithmetic_mul_uniform_add_sub(b166_s7, b166_s12, b166_s17, b166_s22, b166_s27, b166_s32)
        let b166_s33 = decode_msub_aarch64_instrs_integer_arithmetic_mul_uniform_add_sub(
            ctx,
            b166_s7,
            b166_s12,
            b166_s17,
            b166_s22,
            b166_s27,
            b166_s32,
        );
        // b166_s34: return
        return BlockResult::None;
    }
    fn block_167(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b167_s0: const #15s : i4
        let b167_s0 = ctx
            .emitter()
            .constant(
                15isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b167_s1: read-var u#26016:u32
        let b167_s1 = ctx.emitter().read_variable(fn_state.u_26016.clone());
        // b167_s2: const #1s : i0
        let b167_s2 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b167_s3: bit-extract b167_s1 b167_s0 b167_s2
        let b167_s3 = ctx
            .emitter()
            .bit_extract(b167_s1.clone(), b167_s0.clone(), b167_s2.clone());
        // b167_s4: cast reint b167_s3 -> u1
        let b167_s4 = ctx
            .emitter()
            .cast(
                b167_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b167_s5: const #0u : u1
        let b167_s5 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b167_s6: cmp-eq b167_s4 b167_s5
        let b167_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b167_s4.clone(), b167_s5.clone()),
            );
        // b167_s7: branch b167_s6 block168 block46
        return ctx
            .emitter()
            .branch(
                b167_s6.clone(),
                fn_state.block_refs[168usize].clone(),
                fn_state.block_refs[46usize].clone(),
            );
    }
    fn block_168(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b168_s0: const #690s : i10
        let b168_s0 = ctx
            .emitter()
            .constant(
                690isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b168_s1: const #14656u : u32
        let b168_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b168_s2: read-reg b168_s1:i
        let b168_s2 = ctx
            .emitter()
            .read_register(
                b168_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b168_s3: cmp-lt b168_s2 b168_s0
        let b168_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b168_s2.clone(), b168_s0.clone()),
            );
        // b168_s4: not b168_s3
        let b168_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b168_s3.clone()));
        // b168_s5: branch b168_s4 block46 block169
        return ctx
            .emitter()
            .branch(
                b168_s4.clone(),
                fn_state.block_refs[46usize].clone(),
                fn_state.block_refs[169usize].clone(),
            );
    }
    fn block_169(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b169_s0: const #690s : i10
        let b169_s0 = ctx
            .emitter()
            .constant(
                690isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 10,
                },
            );
        // b169_s1: const #14656u : u32
        let b169_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b169_s2: write-reg b169_s1 <= b169_s0
        let b169_s2 = ctx.emitter().write_register(b169_s1.clone(), b169_s0.clone());
        // b169_s3: const #0s : i0
        let b169_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b169_s4: const #5s : i3
        let b169_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b169_s5: read-var u#26016:u32
        let b169_s5 = ctx.emitter().read_variable(fn_state.u_26016.clone());
        // b169_s6: bit-extract b169_s5 b169_s3 b169_s4
        let b169_s6 = ctx
            .emitter()
            .bit_extract(b169_s5.clone(), b169_s3.clone(), b169_s4.clone());
        // b169_s7: cast reint b169_s6 -> u5
        let b169_s7 = ctx
            .emitter()
            .cast(
                b169_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b169_s8: const #5s : i3
        let b169_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b169_s9: const #5s : i3
        let b169_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b169_s10: read-var u#26016:u32
        let b169_s10 = ctx.emitter().read_variable(fn_state.u_26016.clone());
        // b169_s11: bit-extract b169_s10 b169_s8 b169_s9
        let b169_s11 = ctx
            .emitter()
            .bit_extract(b169_s10.clone(), b169_s8.clone(), b169_s9.clone());
        // b169_s12: cast reint b169_s11 -> u5
        let b169_s12 = ctx
            .emitter()
            .cast(
                b169_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b169_s13: const #10s : i4
        let b169_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b169_s14: const #5s : i3
        let b169_s14 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b169_s15: read-var u#26016:u32
        let b169_s15 = ctx.emitter().read_variable(fn_state.u_26016.clone());
        // b169_s16: bit-extract b169_s15 b169_s13 b169_s14
        let b169_s16 = ctx
            .emitter()
            .bit_extract(b169_s15.clone(), b169_s13.clone(), b169_s14.clone());
        // b169_s17: cast reint b169_s16 -> u5
        let b169_s17 = ctx
            .emitter()
            .cast(
                b169_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b169_s18: const #15s : i4
        let b169_s18 = ctx
            .emitter()
            .constant(
                15isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b169_s19: const #1s : i1
        let b169_s19 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b169_s20: read-var u#26016:u32
        let b169_s20 = ctx.emitter().read_variable(fn_state.u_26016.clone());
        // b169_s21: bit-extract b169_s20 b169_s18 b169_s19
        let b169_s21 = ctx
            .emitter()
            .bit_extract(b169_s20.clone(), b169_s18.clone(), b169_s19.clone());
        // b169_s22: cast reint b169_s21 -> u1
        let b169_s22 = ctx
            .emitter()
            .cast(
                b169_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b169_s23: const #16s : i5
        let b169_s23 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b169_s24: const #5s : i3
        let b169_s24 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b169_s25: read-var u#26016:u32
        let b169_s25 = ctx.emitter().read_variable(fn_state.u_26016.clone());
        // b169_s26: bit-extract b169_s25 b169_s23 b169_s24
        let b169_s26 = ctx
            .emitter()
            .bit_extract(b169_s25.clone(), b169_s23.clone(), b169_s24.clone());
        // b169_s27: cast reint b169_s26 -> u5
        let b169_s27 = ctx
            .emitter()
            .cast(
                b169_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b169_s28: const #31s : i5
        let b169_s28 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b169_s29: const #1s : i1
        let b169_s29 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b169_s30: read-var u#26016:u32
        let b169_s30 = ctx.emitter().read_variable(fn_state.u_26016.clone());
        // b169_s31: bit-extract b169_s30 b169_s28 b169_s29
        let b169_s31 = ctx
            .emitter()
            .bit_extract(b169_s30.clone(), b169_s28.clone(), b169_s29.clone());
        // b169_s32: cast reint b169_s31 -> u1
        let b169_s32 = ctx
            .emitter()
            .cast(
                b169_s31.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b169_s33: call decode_madd_aarch64_instrs_integer_arithmetic_mul_uniform_add_sub(b169_s7, b169_s12, b169_s17, b169_s22, b169_s27, b169_s32)
        let b169_s33 = decode_madd_aarch64_instrs_integer_arithmetic_mul_uniform_add_sub(
            ctx,
            b169_s7,
            b169_s12,
            b169_s17,
            b169_s22,
            b169_s27,
            b169_s32,
        );
        // b169_s34: return
        return BlockResult::None;
    }
    fn block_170(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b170_s0: const #10s : i4
        let b170_s0 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b170_s1: read-var u#26011:u32
        let b170_s1 = ctx.emitter().read_variable(fn_state.u_26011.clone());
        // b170_s2: const #6s : i3
        let b170_s2 = ctx
            .emitter()
            .constant(
                6isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b170_s3: bit-extract b170_s1 b170_s0 b170_s2
        let b170_s3 = ctx
            .emitter()
            .bit_extract(b170_s1.clone(), b170_s0.clone(), b170_s2.clone());
        // b170_s4: cast reint b170_s3 -> u6
        let b170_s4 = ctx
            .emitter()
            .cast(
                b170_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
                CastOperationKind::Reinterpret,
            );
        // b170_s5: const #4u : u6
        let b170_s5 = ctx
            .emitter()
            .constant(
                4,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
            );
        // b170_s6: cmp-eq b170_s4 b170_s5
        let b170_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b170_s4.clone(), b170_s5.clone()),
            );
        // b170_s7: branch b170_s6 block171 block45
        return ctx
            .emitter()
            .branch(
                b170_s6.clone(),
                fn_state.block_refs[171usize].clone(),
                fn_state.block_refs[45usize].clone(),
            );
    }
    fn block_171(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b171_s0: const #482s : i9
        let b171_s0 = ctx
            .emitter()
            .constant(
                482isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 9,
                },
            );
        // b171_s1: const #14656u : u32
        let b171_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b171_s2: read-reg b171_s1:i
        let b171_s2 = ctx
            .emitter()
            .read_register(
                b171_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b171_s3: cmp-lt b171_s2 b171_s0
        let b171_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b171_s2.clone(), b171_s0.clone()),
            );
        // b171_s4: not b171_s3
        let b171_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b171_s3.clone()));
        // b171_s5: branch b171_s4 block45 block172
        return ctx
            .emitter()
            .branch(
                b171_s4.clone(),
                fn_state.block_refs[45usize].clone(),
                fn_state.block_refs[172usize].clone(),
            );
    }
    fn block_172(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b172_s0: const #482s : i9
        let b172_s0 = ctx
            .emitter()
            .constant(
                482isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 9,
                },
            );
        // b172_s1: const #14656u : u32
        let b172_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b172_s2: write-reg b172_s1 <= b172_s0
        let b172_s2 = ctx.emitter().write_register(b172_s1.clone(), b172_s0.clone());
        // b172_s3: const #0s : i0
        let b172_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b172_s4: const #5s : i3
        let b172_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b172_s5: read-var u#26011:u32
        let b172_s5 = ctx.emitter().read_variable(fn_state.u_26011.clone());
        // b172_s6: bit-extract b172_s5 b172_s3 b172_s4
        let b172_s6 = ctx
            .emitter()
            .bit_extract(b172_s5.clone(), b172_s3.clone(), b172_s4.clone());
        // b172_s7: cast reint b172_s6 -> u5
        let b172_s7 = ctx
            .emitter()
            .cast(
                b172_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b172_s8: const #5s : i3
        let b172_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b172_s9: const #5s : i3
        let b172_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b172_s10: read-var u#26011:u32
        let b172_s10 = ctx.emitter().read_variable(fn_state.u_26011.clone());
        // b172_s11: bit-extract b172_s10 b172_s8 b172_s9
        let b172_s11 = ctx
            .emitter()
            .bit_extract(b172_s10.clone(), b172_s8.clone(), b172_s9.clone());
        // b172_s12: cast reint b172_s11 -> u5
        let b172_s12 = ctx
            .emitter()
            .cast(
                b172_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b172_s13: const #16s : i5
        let b172_s13 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b172_s14: const #5s : i3
        let b172_s14 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b172_s15: read-var u#26011:u32
        let b172_s15 = ctx.emitter().read_variable(fn_state.u_26011.clone());
        // b172_s16: bit-extract b172_s15 b172_s13 b172_s14
        let b172_s16 = ctx
            .emitter()
            .bit_extract(b172_s15.clone(), b172_s13.clone(), b172_s14.clone());
        // b172_s17: cast reint b172_s16 -> u5
        let b172_s17 = ctx
            .emitter()
            .cast(
                b172_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b172_s18: call decode_irg_aarch64_instrs_integer_tags_mcinsertrandomtag(b172_s7, b172_s12, b172_s17)
        let b172_s18 = decode_irg_aarch64_instrs_integer_tags_mcinsertrandomtag(
            ctx,
            b172_s7,
            b172_s12,
            b172_s17,
        );
        // b172_s19: const #15616u : u32
        let b172_s19 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b172_s20: read-reg b172_s19:u1
        let b172_s20 = ctx
            .emitter()
            .read_register(
                b172_s19.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b172_s21: branch b172_s20 block78 block77
        return ctx
            .emitter()
            .branch(
                b172_s20.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_173(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b173_s0: const #10s : i4
        let b173_s0 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b173_s1: read-var u#26009:u32
        let b173_s1 = ctx.emitter().read_variable(fn_state.u_26009.clone());
        // b173_s2: const #6s : i3
        let b173_s2 = ctx
            .emitter()
            .constant(
                6isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b173_s3: bit-extract b173_s1 b173_s0 b173_s2
        let b173_s3 = ctx
            .emitter()
            .bit_extract(b173_s1.clone(), b173_s0.clone(), b173_s2.clone());
        // b173_s4: cast reint b173_s3 -> u6
        let b173_s4 = ctx
            .emitter()
            .cast(
                b173_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
                CastOperationKind::Reinterpret,
            );
        // b173_s5: const #5u : u6
        let b173_s5 = ctx
            .emitter()
            .constant(
                5,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
            );
        // b173_s6: cmp-eq b173_s4 b173_s5
        let b173_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b173_s4.clone(), b173_s5.clone()),
            );
        // b173_s7: branch b173_s6 block174 block44
        return ctx
            .emitter()
            .branch(
                b173_s6.clone(),
                fn_state.block_refs[174usize].clone(),
                fn_state.block_refs[44usize].clone(),
            );
    }
    fn block_174(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b174_s0: const #477s : i9
        let b174_s0 = ctx
            .emitter()
            .constant(
                477isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 9,
                },
            );
        // b174_s1: const #14656u : u32
        let b174_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b174_s2: read-reg b174_s1:i
        let b174_s2 = ctx
            .emitter()
            .read_register(
                b174_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b174_s3: cmp-lt b174_s2 b174_s0
        let b174_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b174_s2.clone(), b174_s0.clone()),
            );
        // b174_s4: not b174_s3
        let b174_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b174_s3.clone()));
        // b174_s5: branch b174_s4 block44 block175
        return ctx
            .emitter()
            .branch(
                b174_s4.clone(),
                fn_state.block_refs[44usize].clone(),
                fn_state.block_refs[175usize].clone(),
            );
    }
    fn block_175(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b175_s0: const #477s : i9
        let b175_s0 = ctx
            .emitter()
            .constant(
                477isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 9,
                },
            );
        // b175_s1: const #14656u : u32
        let b175_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b175_s2: write-reg b175_s1 <= b175_s0
        let b175_s2 = ctx.emitter().write_register(b175_s1.clone(), b175_s0.clone());
        // b175_s3: const #0s : i0
        let b175_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b175_s4: const #5s : i3
        let b175_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b175_s5: read-var u#26009:u32
        let b175_s5 = ctx.emitter().read_variable(fn_state.u_26009.clone());
        // b175_s6: bit-extract b175_s5 b175_s3 b175_s4
        let b175_s6 = ctx
            .emitter()
            .bit_extract(b175_s5.clone(), b175_s3.clone(), b175_s4.clone());
        // b175_s7: cast reint b175_s6 -> u5
        let b175_s7 = ctx
            .emitter()
            .cast(
                b175_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b175_s8: const #5s : i3
        let b175_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b175_s9: const #5s : i3
        let b175_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b175_s10: read-var u#26009:u32
        let b175_s10 = ctx.emitter().read_variable(fn_state.u_26009.clone());
        // b175_s11: bit-extract b175_s10 b175_s8 b175_s9
        let b175_s11 = ctx
            .emitter()
            .bit_extract(b175_s10.clone(), b175_s8.clone(), b175_s9.clone());
        // b175_s12: cast reint b175_s11 -> u5
        let b175_s12 = ctx
            .emitter()
            .cast(
                b175_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b175_s13: const #16s : i5
        let b175_s13 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b175_s14: const #5s : i3
        let b175_s14 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b175_s15: read-var u#26009:u32
        let b175_s15 = ctx.emitter().read_variable(fn_state.u_26009.clone());
        // b175_s16: bit-extract b175_s15 b175_s13 b175_s14
        let b175_s16 = ctx
            .emitter()
            .bit_extract(b175_s15.clone(), b175_s13.clone(), b175_s14.clone());
        // b175_s17: cast reint b175_s16 -> u5
        let b175_s17 = ctx
            .emitter()
            .cast(
                b175_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b175_s18: call decode_gmi_aarch64_instrs_integer_tags_mcinserttagmask(b175_s7, b175_s12, b175_s17)
        let b175_s18 = decode_gmi_aarch64_instrs_integer_tags_mcinserttagmask(
            ctx,
            b175_s7,
            b175_s12,
            b175_s17,
        );
        // b175_s19: const #15616u : u32
        let b175_s19 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b175_s20: read-reg b175_s19:u1
        let b175_s20 = ctx
            .emitter()
            .read_register(
                b175_s19.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b175_s21: branch b175_s20 block78 block77
        return ctx
            .emitter()
            .branch(
                b175_s20.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_176(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b176_s0: const #191s : i8
        let b176_s0 = ctx
            .emitter()
            .constant(
                191isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 8,
                },
            );
        // b176_s1: const #14656u : u32
        let b176_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b176_s2: read-reg b176_s1:i
        let b176_s2 = ctx
            .emitter()
            .read_register(
                b176_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b176_s3: cmp-lt b176_s2 b176_s0
        let b176_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b176_s2.clone(), b176_s0.clone()),
            );
        // b176_s4: not b176_s3
        let b176_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b176_s3.clone()));
        // b176_s5: branch b176_s4 block43 block177
        return ctx
            .emitter()
            .branch(
                b176_s4.clone(),
                fn_state.block_refs[43usize].clone(),
                fn_state.block_refs[177usize].clone(),
            );
    }
    fn block_177(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b177_s0: const #191s : i8
        let b177_s0 = ctx
            .emitter()
            .constant(
                191isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 8,
                },
            );
        // b177_s1: const #14656u : u32
        let b177_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b177_s2: write-reg b177_s1 <= b177_s0
        let b177_s2 = ctx.emitter().write_register(b177_s1.clone(), b177_s0.clone());
        // b177_s3: const #0s : i0
        let b177_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b177_s4: const #5s : i3
        let b177_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b177_s5: read-var u#26004:u32
        let b177_s5 = ctx.emitter().read_variable(fn_state.u_26004.clone());
        // b177_s6: bit-extract b177_s5 b177_s3 b177_s4
        let b177_s6 = ctx
            .emitter()
            .bit_extract(b177_s5.clone(), b177_s3.clone(), b177_s4.clone());
        // b177_s7: cast reint b177_s6 -> u5
        let b177_s7 = ctx
            .emitter()
            .cast(
                b177_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b177_s8: const #5s : i3
        let b177_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b177_s9: const #5s : i3
        let b177_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b177_s10: read-var u#26004:u32
        let b177_s10 = ctx.emitter().read_variable(fn_state.u_26004.clone());
        // b177_s11: bit-extract b177_s10 b177_s8 b177_s9
        let b177_s11 = ctx
            .emitter()
            .bit_extract(b177_s10.clone(), b177_s8.clone(), b177_s9.clone());
        // b177_s12: cast reint b177_s11 -> u5
        let b177_s12 = ctx
            .emitter()
            .cast(
                b177_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b177_s13: const #31s : i5
        let b177_s13 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b177_s14: const #1s : i1
        let b177_s14 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b177_s15: read-var u#26004:u32
        let b177_s15 = ctx.emitter().read_variable(fn_state.u_26004.clone());
        // b177_s16: bit-extract b177_s15 b177_s13 b177_s14
        let b177_s16 = ctx
            .emitter()
            .bit_extract(b177_s15.clone(), b177_s13.clone(), b177_s14.clone());
        // b177_s17: cast reint b177_s16 -> u1
        let b177_s17 = ctx
            .emitter()
            .cast(
                b177_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b177_s18: call decode_ctz_aarch64_instrs_integer_arithmetic_unary_ctz(b177_s7, b177_s12, b177_s17)
        let b177_s18 = decode_ctz_aarch64_instrs_integer_arithmetic_unary_ctz(
            ctx,
            b177_s7,
            b177_s12,
            b177_s17,
        );
        // b177_s19: const #15616u : u32
        let b177_s19 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b177_s20: read-reg b177_s19:u1
        let b177_s20 = ctx
            .emitter()
            .read_register(
                b177_s19.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b177_s21: branch b177_s20 block78 block77
        return ctx
            .emitter()
            .branch(
                b177_s20.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_178(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b178_s0: const #10s : i4
        let b178_s0 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b178_s1: read-var u#25995:u32
        let b178_s1 = ctx.emitter().read_variable(fn_state.u_25995.clone());
        // b178_s2: const #2s : i1
        let b178_s2 = ctx
            .emitter()
            .constant(
                2isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b178_s3: bit-extract b178_s1 b178_s0 b178_s2
        let b178_s3 = ctx
            .emitter()
            .bit_extract(b178_s1.clone(), b178_s0.clone(), b178_s2.clone());
        // b178_s4: cast reint b178_s3 -> u2
        let b178_s4 = ctx
            .emitter()
            .cast(
                b178_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
                CastOperationKind::Reinterpret,
            );
        // b178_s5: const #1u : u2
        let b178_s5 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
            );
        // b178_s6: cmp-eq b178_s4 b178_s5
        let b178_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b178_s4.clone(), b178_s5.clone()),
            );
        // b178_s7: branch b178_s6 block179 block42
        return ctx
            .emitter()
            .branch(
                b178_s6.clone(),
                fn_state.block_refs[179usize].clone(),
                fn_state.block_refs[42usize].clone(),
            );
    }
    fn block_179(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b179_s0: const #190s : i8
        let b179_s0 = ctx
            .emitter()
            .constant(
                190isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 8,
                },
            );
        // b179_s1: const #14656u : u32
        let b179_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b179_s2: read-reg b179_s1:i
        let b179_s2 = ctx
            .emitter()
            .read_register(
                b179_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b179_s3: cmp-lt b179_s2 b179_s0
        let b179_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b179_s2.clone(), b179_s0.clone()),
            );
        // b179_s4: not b179_s3
        let b179_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b179_s3.clone()));
        // b179_s5: branch b179_s4 block42 block180
        return ctx
            .emitter()
            .branch(
                b179_s4.clone(),
                fn_state.block_refs[42usize].clone(),
                fn_state.block_refs[180usize].clone(),
            );
    }
    fn block_180(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b180_s0: const #190s : i8
        let b180_s0 = ctx
            .emitter()
            .constant(
                190isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 8,
                },
            );
        // b180_s1: const #14656u : u32
        let b180_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b180_s2: write-reg b180_s1 <= b180_s0
        let b180_s2 = ctx.emitter().write_register(b180_s1.clone(), b180_s0.clone());
        // b180_s3: const #0s : i0
        let b180_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b180_s4: const #5s : i3
        let b180_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b180_s5: read-var u#25995:u32
        let b180_s5 = ctx.emitter().read_variable(fn_state.u_25995.clone());
        // b180_s6: bit-extract b180_s5 b180_s3 b180_s4
        let b180_s6 = ctx
            .emitter()
            .bit_extract(b180_s5.clone(), b180_s3.clone(), b180_s4.clone());
        // b180_s7: cast reint b180_s6 -> u5
        let b180_s7 = ctx
            .emitter()
            .cast(
                b180_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b180_s8: const #5s : i3
        let b180_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b180_s9: const #5s : i3
        let b180_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b180_s10: read-var u#25995:u32
        let b180_s10 = ctx.emitter().read_variable(fn_state.u_25995.clone());
        // b180_s11: bit-extract b180_s10 b180_s8 b180_s9
        let b180_s11 = ctx
            .emitter()
            .bit_extract(b180_s10.clone(), b180_s8.clone(), b180_s9.clone());
        // b180_s12: cast reint b180_s11 -> u5
        let b180_s12 = ctx
            .emitter()
            .cast(
                b180_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b180_s13: const #10s : i4
        let b180_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b180_s14: const #1s : i1
        let b180_s14 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b180_s15: read-var u#25995:u32
        let b180_s15 = ctx.emitter().read_variable(fn_state.u_25995.clone());
        // b180_s16: bit-extract b180_s15 b180_s13 b180_s14
        let b180_s16 = ctx
            .emitter()
            .bit_extract(b180_s15.clone(), b180_s13.clone(), b180_s14.clone());
        // b180_s17: cast reint b180_s16 -> u1
        let b180_s17 = ctx
            .emitter()
            .cast(
                b180_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b180_s18: const #12s : i4
        let b180_s18 = ctx
            .emitter()
            .constant(
                12isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b180_s19: const #4s : i3
        let b180_s19 = ctx
            .emitter()
            .constant(
                4isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b180_s20: read-var u#25995:u32
        let b180_s20 = ctx.emitter().read_variable(fn_state.u_25995.clone());
        // b180_s21: bit-extract b180_s20 b180_s18 b180_s19
        let b180_s21 = ctx
            .emitter()
            .bit_extract(b180_s20.clone(), b180_s18.clone(), b180_s19.clone());
        // b180_s22: cast reint b180_s21 -> u4
        let b180_s22 = ctx
            .emitter()
            .cast(
                b180_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 4,
                },
                CastOperationKind::Reinterpret,
            );
        // b180_s23: const #16s : i5
        let b180_s23 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b180_s24: const #5s : i3
        let b180_s24 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b180_s25: read-var u#25995:u32
        let b180_s25 = ctx.emitter().read_variable(fn_state.u_25995.clone());
        // b180_s26: bit-extract b180_s25 b180_s23 b180_s24
        let b180_s26 = ctx
            .emitter()
            .bit_extract(b180_s25.clone(), b180_s23.clone(), b180_s24.clone());
        // b180_s27: cast reint b180_s26 -> u5
        let b180_s27 = ctx
            .emitter()
            .cast(
                b180_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b180_s28: const #30s : i5
        let b180_s28 = ctx
            .emitter()
            .constant(
                30isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b180_s29: const #1s : i1
        let b180_s29 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b180_s30: read-var u#25995:u32
        let b180_s30 = ctx.emitter().read_variable(fn_state.u_25995.clone());
        // b180_s31: bit-extract b180_s30 b180_s28 b180_s29
        let b180_s31 = ctx
            .emitter()
            .bit_extract(b180_s30.clone(), b180_s28.clone(), b180_s29.clone());
        // b180_s32: cast reint b180_s31 -> u1
        let b180_s32 = ctx
            .emitter()
            .cast(
                b180_s31.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b180_s33: const #31s : i5
        let b180_s33 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b180_s34: const #1s : i1
        let b180_s34 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b180_s35: read-var u#25995:u32
        let b180_s35 = ctx.emitter().read_variable(fn_state.u_25995.clone());
        // b180_s36: bit-extract b180_s35 b180_s33 b180_s34
        let b180_s36 = ctx
            .emitter()
            .bit_extract(b180_s35.clone(), b180_s33.clone(), b180_s34.clone());
        // b180_s37: cast reint b180_s36 -> u1
        let b180_s37 = ctx
            .emitter()
            .cast(
                b180_s36.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b180_s38: call decode_csneg_aarch64_instrs_integer_conditional_select(b180_s7, b180_s12, b180_s17, b180_s22, b180_s27, b180_s32, b180_s37)
        let b180_s38 = decode_csneg_aarch64_instrs_integer_conditional_select(
            ctx,
            b180_s7,
            b180_s12,
            b180_s17,
            b180_s22,
            b180_s27,
            b180_s32,
            b180_s37,
        );
        // b180_s39: return
        return BlockResult::None;
    }
    fn block_181(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b181_s0: const #10s : i4
        let b181_s0 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b181_s1: read-var u#25986:u32
        let b181_s1 = ctx.emitter().read_variable(fn_state.u_25986.clone());
        // b181_s2: const #2s : i1
        let b181_s2 = ctx
            .emitter()
            .constant(
                2isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b181_s3: bit-extract b181_s1 b181_s0 b181_s2
        let b181_s3 = ctx
            .emitter()
            .bit_extract(b181_s1.clone(), b181_s0.clone(), b181_s2.clone());
        // b181_s4: cast reint b181_s3 -> u2
        let b181_s4 = ctx
            .emitter()
            .cast(
                b181_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
                CastOperationKind::Reinterpret,
            );
        // b181_s5: const #0u : u2
        let b181_s5 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
            );
        // b181_s6: cmp-eq b181_s4 b181_s5
        let b181_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b181_s4.clone(), b181_s5.clone()),
            );
        // b181_s7: branch b181_s6 block182 block41
        return ctx
            .emitter()
            .branch(
                b181_s6.clone(),
                fn_state.block_refs[182usize].clone(),
                fn_state.block_refs[41usize].clone(),
            );
    }
    fn block_182(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b182_s0: const #189s : i8
        let b182_s0 = ctx
            .emitter()
            .constant(
                189isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 8,
                },
            );
        // b182_s1: const #14656u : u32
        let b182_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b182_s2: read-reg b182_s1:i
        let b182_s2 = ctx
            .emitter()
            .read_register(
                b182_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b182_s3: cmp-lt b182_s2 b182_s0
        let b182_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b182_s2.clone(), b182_s0.clone()),
            );
        // b182_s4: not b182_s3
        let b182_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b182_s3.clone()));
        // b182_s5: branch b182_s4 block41 block183
        return ctx
            .emitter()
            .branch(
                b182_s4.clone(),
                fn_state.block_refs[41usize].clone(),
                fn_state.block_refs[183usize].clone(),
            );
    }
    fn block_183(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b183_s0: const #189s : i8
        let b183_s0 = ctx
            .emitter()
            .constant(
                189isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 8,
                },
            );
        // b183_s1: const #14656u : u32
        let b183_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b183_s2: write-reg b183_s1 <= b183_s0
        let b183_s2 = ctx.emitter().write_register(b183_s1.clone(), b183_s0.clone());
        // b183_s3: const #0s : i0
        let b183_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b183_s4: const #5s : i3
        let b183_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b183_s5: read-var u#25986:u32
        let b183_s5 = ctx.emitter().read_variable(fn_state.u_25986.clone());
        // b183_s6: bit-extract b183_s5 b183_s3 b183_s4
        let b183_s6 = ctx
            .emitter()
            .bit_extract(b183_s5.clone(), b183_s3.clone(), b183_s4.clone());
        // b183_s7: cast reint b183_s6 -> u5
        let b183_s7 = ctx
            .emitter()
            .cast(
                b183_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b183_s8: const #5s : i3
        let b183_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b183_s9: const #5s : i3
        let b183_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b183_s10: read-var u#25986:u32
        let b183_s10 = ctx.emitter().read_variable(fn_state.u_25986.clone());
        // b183_s11: bit-extract b183_s10 b183_s8 b183_s9
        let b183_s11 = ctx
            .emitter()
            .bit_extract(b183_s10.clone(), b183_s8.clone(), b183_s9.clone());
        // b183_s12: cast reint b183_s11 -> u5
        let b183_s12 = ctx
            .emitter()
            .cast(
                b183_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b183_s13: const #10s : i4
        let b183_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b183_s14: const #1s : i1
        let b183_s14 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b183_s15: read-var u#25986:u32
        let b183_s15 = ctx.emitter().read_variable(fn_state.u_25986.clone());
        // b183_s16: bit-extract b183_s15 b183_s13 b183_s14
        let b183_s16 = ctx
            .emitter()
            .bit_extract(b183_s15.clone(), b183_s13.clone(), b183_s14.clone());
        // b183_s17: cast reint b183_s16 -> u1
        let b183_s17 = ctx
            .emitter()
            .cast(
                b183_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b183_s18: const #12s : i4
        let b183_s18 = ctx
            .emitter()
            .constant(
                12isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b183_s19: const #4s : i3
        let b183_s19 = ctx
            .emitter()
            .constant(
                4isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b183_s20: read-var u#25986:u32
        let b183_s20 = ctx.emitter().read_variable(fn_state.u_25986.clone());
        // b183_s21: bit-extract b183_s20 b183_s18 b183_s19
        let b183_s21 = ctx
            .emitter()
            .bit_extract(b183_s20.clone(), b183_s18.clone(), b183_s19.clone());
        // b183_s22: cast reint b183_s21 -> u4
        let b183_s22 = ctx
            .emitter()
            .cast(
                b183_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 4,
                },
                CastOperationKind::Reinterpret,
            );
        // b183_s23: const #16s : i5
        let b183_s23 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b183_s24: const #5s : i3
        let b183_s24 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b183_s25: read-var u#25986:u32
        let b183_s25 = ctx.emitter().read_variable(fn_state.u_25986.clone());
        // b183_s26: bit-extract b183_s25 b183_s23 b183_s24
        let b183_s26 = ctx
            .emitter()
            .bit_extract(b183_s25.clone(), b183_s23.clone(), b183_s24.clone());
        // b183_s27: cast reint b183_s26 -> u5
        let b183_s27 = ctx
            .emitter()
            .cast(
                b183_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b183_s28: const #30s : i5
        let b183_s28 = ctx
            .emitter()
            .constant(
                30isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b183_s29: const #1s : i1
        let b183_s29 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b183_s30: read-var u#25986:u32
        let b183_s30 = ctx.emitter().read_variable(fn_state.u_25986.clone());
        // b183_s31: bit-extract b183_s30 b183_s28 b183_s29
        let b183_s31 = ctx
            .emitter()
            .bit_extract(b183_s30.clone(), b183_s28.clone(), b183_s29.clone());
        // b183_s32: cast reint b183_s31 -> u1
        let b183_s32 = ctx
            .emitter()
            .cast(
                b183_s31.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b183_s33: const #31s : i5
        let b183_s33 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b183_s34: const #1s : i1
        let b183_s34 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b183_s35: read-var u#25986:u32
        let b183_s35 = ctx.emitter().read_variable(fn_state.u_25986.clone());
        // b183_s36: bit-extract b183_s35 b183_s33 b183_s34
        let b183_s36 = ctx
            .emitter()
            .bit_extract(b183_s35.clone(), b183_s33.clone(), b183_s34.clone());
        // b183_s37: cast reint b183_s36 -> u1
        let b183_s37 = ctx
            .emitter()
            .cast(
                b183_s36.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b183_s38: call decode_csinv_aarch64_instrs_integer_conditional_select(b183_s7, b183_s12, b183_s17, b183_s22, b183_s27, b183_s32, b183_s37)
        let b183_s38 = decode_csinv_aarch64_instrs_integer_conditional_select(
            ctx,
            b183_s7,
            b183_s12,
            b183_s17,
            b183_s22,
            b183_s27,
            b183_s32,
            b183_s37,
        );
        // b183_s39: return
        return BlockResult::None;
    }
    fn block_184(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b184_s0: const #10s : i4
        let b184_s0 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b184_s1: read-var u#25977:u32
        let b184_s1 = ctx.emitter().read_variable(fn_state.u_25977.clone());
        // b184_s2: const #2s : i1
        let b184_s2 = ctx
            .emitter()
            .constant(
                2isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b184_s3: bit-extract b184_s1 b184_s0 b184_s2
        let b184_s3 = ctx
            .emitter()
            .bit_extract(b184_s1.clone(), b184_s0.clone(), b184_s2.clone());
        // b184_s4: cast reint b184_s3 -> u2
        let b184_s4 = ctx
            .emitter()
            .cast(
                b184_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
                CastOperationKind::Reinterpret,
            );
        // b184_s5: const #1u : u2
        let b184_s5 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
            );
        // b184_s6: cmp-eq b184_s4 b184_s5
        let b184_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b184_s4.clone(), b184_s5.clone()),
            );
        // b184_s7: branch b184_s6 block185 block40
        return ctx
            .emitter()
            .branch(
                b184_s6.clone(),
                fn_state.block_refs[185usize].clone(),
                fn_state.block_refs[40usize].clone(),
            );
    }
    fn block_185(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b185_s0: const #188s : i8
        let b185_s0 = ctx
            .emitter()
            .constant(
                188isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 8,
                },
            );
        // b185_s1: const #14656u : u32
        let b185_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b185_s2: read-reg b185_s1:i
        let b185_s2 = ctx
            .emitter()
            .read_register(
                b185_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b185_s3: cmp-lt b185_s2 b185_s0
        let b185_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b185_s2.clone(), b185_s0.clone()),
            );
        // b185_s4: not b185_s3
        let b185_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b185_s3.clone()));
        // b185_s5: branch b185_s4 block40 block186
        return ctx
            .emitter()
            .branch(
                b185_s4.clone(),
                fn_state.block_refs[40usize].clone(),
                fn_state.block_refs[186usize].clone(),
            );
    }
    fn block_186(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b186_s0: const #188s : i8
        let b186_s0 = ctx
            .emitter()
            .constant(
                188isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 8,
                },
            );
        // b186_s1: const #14656u : u32
        let b186_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b186_s2: write-reg b186_s1 <= b186_s0
        let b186_s2 = ctx.emitter().write_register(b186_s1.clone(), b186_s0.clone());
        // b186_s3: const #0s : i0
        let b186_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b186_s4: const #5s : i3
        let b186_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b186_s5: read-var u#25977:u32
        let b186_s5 = ctx.emitter().read_variable(fn_state.u_25977.clone());
        // b186_s6: bit-extract b186_s5 b186_s3 b186_s4
        let b186_s6 = ctx
            .emitter()
            .bit_extract(b186_s5.clone(), b186_s3.clone(), b186_s4.clone());
        // b186_s7: cast reint b186_s6 -> u5
        let b186_s7 = ctx
            .emitter()
            .cast(
                b186_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b186_s8: const #5s : i3
        let b186_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b186_s9: const #5s : i3
        let b186_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b186_s10: read-var u#25977:u32
        let b186_s10 = ctx.emitter().read_variable(fn_state.u_25977.clone());
        // b186_s11: bit-extract b186_s10 b186_s8 b186_s9
        let b186_s11 = ctx
            .emitter()
            .bit_extract(b186_s10.clone(), b186_s8.clone(), b186_s9.clone());
        // b186_s12: cast reint b186_s11 -> u5
        let b186_s12 = ctx
            .emitter()
            .cast(
                b186_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b186_s13: const #10s : i4
        let b186_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b186_s14: const #1s : i1
        let b186_s14 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b186_s15: read-var u#25977:u32
        let b186_s15 = ctx.emitter().read_variable(fn_state.u_25977.clone());
        // b186_s16: bit-extract b186_s15 b186_s13 b186_s14
        let b186_s16 = ctx
            .emitter()
            .bit_extract(b186_s15.clone(), b186_s13.clone(), b186_s14.clone());
        // b186_s17: cast reint b186_s16 -> u1
        let b186_s17 = ctx
            .emitter()
            .cast(
                b186_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b186_s18: const #12s : i4
        let b186_s18 = ctx
            .emitter()
            .constant(
                12isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b186_s19: const #4s : i3
        let b186_s19 = ctx
            .emitter()
            .constant(
                4isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b186_s20: read-var u#25977:u32
        let b186_s20 = ctx.emitter().read_variable(fn_state.u_25977.clone());
        // b186_s21: bit-extract b186_s20 b186_s18 b186_s19
        let b186_s21 = ctx
            .emitter()
            .bit_extract(b186_s20.clone(), b186_s18.clone(), b186_s19.clone());
        // b186_s22: cast reint b186_s21 -> u4
        let b186_s22 = ctx
            .emitter()
            .cast(
                b186_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 4,
                },
                CastOperationKind::Reinterpret,
            );
        // b186_s23: const #16s : i5
        let b186_s23 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b186_s24: const #5s : i3
        let b186_s24 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b186_s25: read-var u#25977:u32
        let b186_s25 = ctx.emitter().read_variable(fn_state.u_25977.clone());
        // b186_s26: bit-extract b186_s25 b186_s23 b186_s24
        let b186_s26 = ctx
            .emitter()
            .bit_extract(b186_s25.clone(), b186_s23.clone(), b186_s24.clone());
        // b186_s27: cast reint b186_s26 -> u5
        let b186_s27 = ctx
            .emitter()
            .cast(
                b186_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b186_s28: const #30s : i5
        let b186_s28 = ctx
            .emitter()
            .constant(
                30isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b186_s29: const #1s : i1
        let b186_s29 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b186_s30: read-var u#25977:u32
        let b186_s30 = ctx.emitter().read_variable(fn_state.u_25977.clone());
        // b186_s31: bit-extract b186_s30 b186_s28 b186_s29
        let b186_s31 = ctx
            .emitter()
            .bit_extract(b186_s30.clone(), b186_s28.clone(), b186_s29.clone());
        // b186_s32: cast reint b186_s31 -> u1
        let b186_s32 = ctx
            .emitter()
            .cast(
                b186_s31.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b186_s33: const #31s : i5
        let b186_s33 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b186_s34: const #1s : i1
        let b186_s34 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b186_s35: read-var u#25977:u32
        let b186_s35 = ctx.emitter().read_variable(fn_state.u_25977.clone());
        // b186_s36: bit-extract b186_s35 b186_s33 b186_s34
        let b186_s36 = ctx
            .emitter()
            .bit_extract(b186_s35.clone(), b186_s33.clone(), b186_s34.clone());
        // b186_s37: cast reint b186_s36 -> u1
        let b186_s37 = ctx
            .emitter()
            .cast(
                b186_s36.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b186_s38: call decode_csinc_aarch64_instrs_integer_conditional_select(b186_s7, b186_s12, b186_s17, b186_s22, b186_s27, b186_s32, b186_s37)
        let b186_s38 = decode_csinc_aarch64_instrs_integer_conditional_select(
            ctx,
            b186_s7,
            b186_s12,
            b186_s17,
            b186_s22,
            b186_s27,
            b186_s32,
            b186_s37,
        );
        // b186_s39: return
        return BlockResult::None;
    }
    fn block_187(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b187_s0: const #10s : i4
        let b187_s0 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b187_s1: read-var u#25969:u32
        let b187_s1 = ctx.emitter().read_variable(fn_state.u_25969.clone());
        // b187_s2: const #2s : i1
        let b187_s2 = ctx
            .emitter()
            .constant(
                2isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b187_s3: bit-extract b187_s1 b187_s0 b187_s2
        let b187_s3 = ctx
            .emitter()
            .bit_extract(b187_s1.clone(), b187_s0.clone(), b187_s2.clone());
        // b187_s4: cast reint b187_s3 -> u2
        let b187_s4 = ctx
            .emitter()
            .cast(
                b187_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
                CastOperationKind::Reinterpret,
            );
        // b187_s5: const #0u : u2
        let b187_s5 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
            );
        // b187_s6: cmp-eq b187_s4 b187_s5
        let b187_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b187_s4.clone(), b187_s5.clone()),
            );
        // b187_s7: branch b187_s6 block188 block39
        return ctx
            .emitter()
            .branch(
                b187_s6.clone(),
                fn_state.block_refs[188usize].clone(),
                fn_state.block_refs[39usize].clone(),
            );
    }
    fn block_188(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b188_s0: const #187s : i8
        let b188_s0 = ctx
            .emitter()
            .constant(
                187isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 8,
                },
            );
        // b188_s1: const #14656u : u32
        let b188_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b188_s2: read-reg b188_s1:i
        let b188_s2 = ctx
            .emitter()
            .read_register(
                b188_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b188_s3: cmp-lt b188_s2 b188_s0
        let b188_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b188_s2.clone(), b188_s0.clone()),
            );
        // b188_s4: not b188_s3
        let b188_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b188_s3.clone()));
        // b188_s5: branch b188_s4 block39 block189
        return ctx
            .emitter()
            .branch(
                b188_s4.clone(),
                fn_state.block_refs[39usize].clone(),
                fn_state.block_refs[189usize].clone(),
            );
    }
    fn block_189(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b189_s0: const #187s : i8
        let b189_s0 = ctx
            .emitter()
            .constant(
                187isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 8,
                },
            );
        // b189_s1: const #14656u : u32
        let b189_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b189_s2: write-reg b189_s1 <= b189_s0
        let b189_s2 = ctx.emitter().write_register(b189_s1.clone(), b189_s0.clone());
        // b189_s3: const #0s : i0
        let b189_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b189_s4: const #5s : i3
        let b189_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b189_s5: read-var u#25969:u32
        let b189_s5 = ctx.emitter().read_variable(fn_state.u_25969.clone());
        // b189_s6: bit-extract b189_s5 b189_s3 b189_s4
        let b189_s6 = ctx
            .emitter()
            .bit_extract(b189_s5.clone(), b189_s3.clone(), b189_s4.clone());
        // b189_s7: cast reint b189_s6 -> u5
        let b189_s7 = ctx
            .emitter()
            .cast(
                b189_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b189_s8: const #5s : i3
        let b189_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b189_s9: const #5s : i3
        let b189_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b189_s10: read-var u#25969:u32
        let b189_s10 = ctx.emitter().read_variable(fn_state.u_25969.clone());
        // b189_s11: bit-extract b189_s10 b189_s8 b189_s9
        let b189_s11 = ctx
            .emitter()
            .bit_extract(b189_s10.clone(), b189_s8.clone(), b189_s9.clone());
        // b189_s12: cast reint b189_s11 -> u5
        let b189_s12 = ctx
            .emitter()
            .cast(
                b189_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b189_s13: const #10s : i4
        let b189_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b189_s14: const #1s : i1
        let b189_s14 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b189_s15: read-var u#25969:u32
        let b189_s15 = ctx.emitter().read_variable(fn_state.u_25969.clone());
        // b189_s16: bit-extract b189_s15 b189_s13 b189_s14
        let b189_s16 = ctx
            .emitter()
            .bit_extract(b189_s15.clone(), b189_s13.clone(), b189_s14.clone());
        // b189_s17: cast reint b189_s16 -> u1
        let b189_s17 = ctx
            .emitter()
            .cast(
                b189_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b189_s18: const #12s : i4
        let b189_s18 = ctx
            .emitter()
            .constant(
                12isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b189_s19: const #4s : i3
        let b189_s19 = ctx
            .emitter()
            .constant(
                4isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b189_s20: read-var u#25969:u32
        let b189_s20 = ctx.emitter().read_variable(fn_state.u_25969.clone());
        // b189_s21: bit-extract b189_s20 b189_s18 b189_s19
        let b189_s21 = ctx
            .emitter()
            .bit_extract(b189_s20.clone(), b189_s18.clone(), b189_s19.clone());
        // b189_s22: cast reint b189_s21 -> u4
        let b189_s22 = ctx
            .emitter()
            .cast(
                b189_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 4,
                },
                CastOperationKind::Reinterpret,
            );
        // b189_s23: const #16s : i5
        let b189_s23 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b189_s24: const #5s : i3
        let b189_s24 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b189_s25: read-var u#25969:u32
        let b189_s25 = ctx.emitter().read_variable(fn_state.u_25969.clone());
        // b189_s26: bit-extract b189_s25 b189_s23 b189_s24
        let b189_s26 = ctx
            .emitter()
            .bit_extract(b189_s25.clone(), b189_s23.clone(), b189_s24.clone());
        // b189_s27: cast reint b189_s26 -> u5
        let b189_s27 = ctx
            .emitter()
            .cast(
                b189_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b189_s28: const #30s : i5
        let b189_s28 = ctx
            .emitter()
            .constant(
                30isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b189_s29: const #1s : i1
        let b189_s29 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b189_s30: read-var u#25969:u32
        let b189_s30 = ctx.emitter().read_variable(fn_state.u_25969.clone());
        // b189_s31: bit-extract b189_s30 b189_s28 b189_s29
        let b189_s31 = ctx
            .emitter()
            .bit_extract(b189_s30.clone(), b189_s28.clone(), b189_s29.clone());
        // b189_s32: cast reint b189_s31 -> u1
        let b189_s32 = ctx
            .emitter()
            .cast(
                b189_s31.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b189_s33: const #31s : i5
        let b189_s33 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b189_s34: const #1s : i1
        let b189_s34 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b189_s35: read-var u#25969:u32
        let b189_s35 = ctx.emitter().read_variable(fn_state.u_25969.clone());
        // b189_s36: bit-extract b189_s35 b189_s33 b189_s34
        let b189_s36 = ctx
            .emitter()
            .bit_extract(b189_s35.clone(), b189_s33.clone(), b189_s34.clone());
        // b189_s37: cast reint b189_s36 -> u1
        let b189_s37 = ctx
            .emitter()
            .cast(
                b189_s36.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b189_s38: call decode_csel_aarch64_instrs_integer_conditional_select(b189_s7, b189_s12, b189_s17, b189_s22, b189_s27, b189_s32, b189_s37)
        let b189_s38 = decode_csel_aarch64_instrs_integer_conditional_select(
            ctx,
            b189_s7,
            b189_s12,
            b189_s17,
            b189_s22,
            b189_s27,
            b189_s32,
            b189_s37,
        );
        // b189_s39: return
        return BlockResult::None;
    }
    fn block_190(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b190_s0: const #12s : i4
        let b190_s0 = ctx
            .emitter()
            .constant(
                12isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b190_s1: read-var u#25961:u32
        let b190_s1 = ctx.emitter().read_variable(fn_state.u_25961.clone());
        // b190_s2: const #4s : i2
        let b190_s2 = ctx
            .emitter()
            .constant(
                4isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b190_s3: bit-extract b190_s1 b190_s0 b190_s2
        let b190_s3 = ctx
            .emitter()
            .bit_extract(b190_s1.clone(), b190_s0.clone(), b190_s2.clone());
        // b190_s4: cast reint b190_s3 -> u4
        let b190_s4 = ctx
            .emitter()
            .cast(
                b190_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 4,
                },
                CastOperationKind::Reinterpret,
            );
        // b190_s5: const #5u : u4
        let b190_s5 = ctx
            .emitter()
            .constant(
                5,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 4,
                },
            );
        // b190_s6: cmp-eq b190_s4 b190_s5
        let b190_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b190_s4.clone(), b190_s5.clone()),
            );
        // b190_s7: branch b190_s6 block191 block38
        return ctx
            .emitter()
            .branch(
                b190_s6.clone(),
                fn_state.block_refs[191usize].clone(),
                fn_state.block_refs[38usize].clone(),
            );
    }
    fn block_191(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b191_s0: const #186s : i8
        let b191_s0 = ctx
            .emitter()
            .constant(
                186isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 8,
                },
            );
        // b191_s1: const #14656u : u32
        let b191_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b191_s2: read-reg b191_s1:i
        let b191_s2 = ctx
            .emitter()
            .read_register(
                b191_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b191_s3: cmp-lt b191_s2 b191_s0
        let b191_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b191_s2.clone(), b191_s0.clone()),
            );
        // b191_s4: not b191_s3
        let b191_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b191_s3.clone()));
        // b191_s5: branch b191_s4 block38 block192
        return ctx
            .emitter()
            .branch(
                b191_s4.clone(),
                fn_state.block_refs[38usize].clone(),
                fn_state.block_refs[192usize].clone(),
            );
    }
    fn block_192(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b192_s0: const #186s : i8
        let b192_s0 = ctx
            .emitter()
            .constant(
                186isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 8,
                },
            );
        // b192_s1: const #14656u : u32
        let b192_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b192_s2: write-reg b192_s1 <= b192_s0
        let b192_s2 = ctx.emitter().write_register(b192_s1.clone(), b192_s0.clone());
        // b192_s3: const #0s : i0
        let b192_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b192_s4: const #5s : i3
        let b192_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b192_s5: read-var u#25961:u32
        let b192_s5 = ctx.emitter().read_variable(fn_state.u_25961.clone());
        // b192_s6: bit-extract b192_s5 b192_s3 b192_s4
        let b192_s6 = ctx
            .emitter()
            .bit_extract(b192_s5.clone(), b192_s3.clone(), b192_s4.clone());
        // b192_s7: cast reint b192_s6 -> u5
        let b192_s7 = ctx
            .emitter()
            .cast(
                b192_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b192_s8: const #5s : i3
        let b192_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b192_s9: const #5s : i3
        let b192_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b192_s10: read-var u#25961:u32
        let b192_s10 = ctx.emitter().read_variable(fn_state.u_25961.clone());
        // b192_s11: bit-extract b192_s10 b192_s8 b192_s9
        let b192_s11 = ctx
            .emitter()
            .bit_extract(b192_s10.clone(), b192_s8.clone(), b192_s9.clone());
        // b192_s12: cast reint b192_s11 -> u5
        let b192_s12 = ctx
            .emitter()
            .cast(
                b192_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b192_s13: const #10s : i4
        let b192_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b192_s14: const #2s : i2
        let b192_s14 = ctx
            .emitter()
            .constant(
                2isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b192_s15: read-var u#25961:u32
        let b192_s15 = ctx.emitter().read_variable(fn_state.u_25961.clone());
        // b192_s16: bit-extract b192_s15 b192_s13 b192_s14
        let b192_s16 = ctx
            .emitter()
            .bit_extract(b192_s15.clone(), b192_s13.clone(), b192_s14.clone());
        // b192_s17: cast reint b192_s16 -> u2
        let b192_s17 = ctx
            .emitter()
            .cast(
                b192_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
                CastOperationKind::Reinterpret,
            );
        // b192_s18: const #12s : i4
        let b192_s18 = ctx
            .emitter()
            .constant(
                12isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b192_s19: const #1s : i1
        let b192_s19 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b192_s20: read-var u#25961:u32
        let b192_s20 = ctx.emitter().read_variable(fn_state.u_25961.clone());
        // b192_s21: bit-extract b192_s20 b192_s18 b192_s19
        let b192_s21 = ctx
            .emitter()
            .bit_extract(b192_s20.clone(), b192_s18.clone(), b192_s19.clone());
        // b192_s22: cast reint b192_s21 -> u1
        let b192_s22 = ctx
            .emitter()
            .cast(
                b192_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b192_s23: const #16s : i5
        let b192_s23 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b192_s24: const #5s : i3
        let b192_s24 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b192_s25: read-var u#25961:u32
        let b192_s25 = ctx.emitter().read_variable(fn_state.u_25961.clone());
        // b192_s26: bit-extract b192_s25 b192_s23 b192_s24
        let b192_s26 = ctx
            .emitter()
            .bit_extract(b192_s25.clone(), b192_s23.clone(), b192_s24.clone());
        // b192_s27: cast reint b192_s26 -> u5
        let b192_s27 = ctx
            .emitter()
            .cast(
                b192_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b192_s28: const #31s : i5
        let b192_s28 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b192_s29: const #1s : i1
        let b192_s29 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b192_s30: read-var u#25961:u32
        let b192_s30 = ctx.emitter().read_variable(fn_state.u_25961.clone());
        // b192_s31: bit-extract b192_s30 b192_s28 b192_s29
        let b192_s31 = ctx
            .emitter()
            .bit_extract(b192_s30.clone(), b192_s28.clone(), b192_s29.clone());
        // b192_s32: cast reint b192_s31 -> u1
        let b192_s32 = ctx
            .emitter()
            .cast(
                b192_s31.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b192_s33: call decode_crc32c_aarch64_instrs_integer_crc(b192_s7, b192_s12, b192_s17, b192_s22, b192_s27, b192_s32)
        let b192_s33 = decode_crc32c_aarch64_instrs_integer_crc(
            ctx,
            b192_s7,
            b192_s12,
            b192_s17,
            b192_s22,
            b192_s27,
            b192_s32,
        );
        // b192_s34: const #15616u : u32
        let b192_s34 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b192_s35: read-reg b192_s34:u1
        let b192_s35 = ctx
            .emitter()
            .read_register(
                b192_s34.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b192_s36: branch b192_s35 block78 block77
        return ctx
            .emitter()
            .branch(
                b192_s35.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_193(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b193_s0: const #12s : i4
        let b193_s0 = ctx
            .emitter()
            .constant(
                12isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b193_s1: read-var u#25955:u32
        let b193_s1 = ctx.emitter().read_variable(fn_state.u_25955.clone());
        // b193_s2: const #4s : i2
        let b193_s2 = ctx
            .emitter()
            .constant(
                4isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b193_s3: bit-extract b193_s1 b193_s0 b193_s2
        let b193_s3 = ctx
            .emitter()
            .bit_extract(b193_s1.clone(), b193_s0.clone(), b193_s2.clone());
        // b193_s4: cast reint b193_s3 -> u4
        let b193_s4 = ctx
            .emitter()
            .cast(
                b193_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 4,
                },
                CastOperationKind::Reinterpret,
            );
        // b193_s5: const #4u : u4
        let b193_s5 = ctx
            .emitter()
            .constant(
                4,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 4,
                },
            );
        // b193_s6: cmp-eq b193_s4 b193_s5
        let b193_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b193_s4.clone(), b193_s5.clone()),
            );
        // b193_s7: branch b193_s6 block194 block37
        return ctx
            .emitter()
            .branch(
                b193_s6.clone(),
                fn_state.block_refs[194usize].clone(),
                fn_state.block_refs[37usize].clone(),
            );
    }
    fn block_194(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b194_s0: const #185s : i8
        let b194_s0 = ctx
            .emitter()
            .constant(
                185isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 8,
                },
            );
        // b194_s1: const #14656u : u32
        let b194_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b194_s2: read-reg b194_s1:i
        let b194_s2 = ctx
            .emitter()
            .read_register(
                b194_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b194_s3: cmp-lt b194_s2 b194_s0
        let b194_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b194_s2.clone(), b194_s0.clone()),
            );
        // b194_s4: not b194_s3
        let b194_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b194_s3.clone()));
        // b194_s5: branch b194_s4 block37 block195
        return ctx
            .emitter()
            .branch(
                b194_s4.clone(),
                fn_state.block_refs[37usize].clone(),
                fn_state.block_refs[195usize].clone(),
            );
    }
    fn block_195(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b195_s0: const #185s : i8
        let b195_s0 = ctx
            .emitter()
            .constant(
                185isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 8,
                },
            );
        // b195_s1: const #14656u : u32
        let b195_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b195_s2: write-reg b195_s1 <= b195_s0
        let b195_s2 = ctx.emitter().write_register(b195_s1.clone(), b195_s0.clone());
        // b195_s3: const #0s : i0
        let b195_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b195_s4: const #5s : i3
        let b195_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b195_s5: read-var u#25955:u32
        let b195_s5 = ctx.emitter().read_variable(fn_state.u_25955.clone());
        // b195_s6: bit-extract b195_s5 b195_s3 b195_s4
        let b195_s6 = ctx
            .emitter()
            .bit_extract(b195_s5.clone(), b195_s3.clone(), b195_s4.clone());
        // b195_s7: cast reint b195_s6 -> u5
        let b195_s7 = ctx
            .emitter()
            .cast(
                b195_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b195_s8: const #5s : i3
        let b195_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b195_s9: const #5s : i3
        let b195_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b195_s10: read-var u#25955:u32
        let b195_s10 = ctx.emitter().read_variable(fn_state.u_25955.clone());
        // b195_s11: bit-extract b195_s10 b195_s8 b195_s9
        let b195_s11 = ctx
            .emitter()
            .bit_extract(b195_s10.clone(), b195_s8.clone(), b195_s9.clone());
        // b195_s12: cast reint b195_s11 -> u5
        let b195_s12 = ctx
            .emitter()
            .cast(
                b195_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b195_s13: const #10s : i4
        let b195_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b195_s14: const #2s : i2
        let b195_s14 = ctx
            .emitter()
            .constant(
                2isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b195_s15: read-var u#25955:u32
        let b195_s15 = ctx.emitter().read_variable(fn_state.u_25955.clone());
        // b195_s16: bit-extract b195_s15 b195_s13 b195_s14
        let b195_s16 = ctx
            .emitter()
            .bit_extract(b195_s15.clone(), b195_s13.clone(), b195_s14.clone());
        // b195_s17: cast reint b195_s16 -> u2
        let b195_s17 = ctx
            .emitter()
            .cast(
                b195_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
                CastOperationKind::Reinterpret,
            );
        // b195_s18: const #12s : i4
        let b195_s18 = ctx
            .emitter()
            .constant(
                12isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b195_s19: const #1s : i1
        let b195_s19 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b195_s20: read-var u#25955:u32
        let b195_s20 = ctx.emitter().read_variable(fn_state.u_25955.clone());
        // b195_s21: bit-extract b195_s20 b195_s18 b195_s19
        let b195_s21 = ctx
            .emitter()
            .bit_extract(b195_s20.clone(), b195_s18.clone(), b195_s19.clone());
        // b195_s22: cast reint b195_s21 -> u1
        let b195_s22 = ctx
            .emitter()
            .cast(
                b195_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b195_s23: const #16s : i5
        let b195_s23 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b195_s24: const #5s : i3
        let b195_s24 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b195_s25: read-var u#25955:u32
        let b195_s25 = ctx.emitter().read_variable(fn_state.u_25955.clone());
        // b195_s26: bit-extract b195_s25 b195_s23 b195_s24
        let b195_s26 = ctx
            .emitter()
            .bit_extract(b195_s25.clone(), b195_s23.clone(), b195_s24.clone());
        // b195_s27: cast reint b195_s26 -> u5
        let b195_s27 = ctx
            .emitter()
            .cast(
                b195_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b195_s28: const #31s : i5
        let b195_s28 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b195_s29: const #1s : i1
        let b195_s29 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b195_s30: read-var u#25955:u32
        let b195_s30 = ctx.emitter().read_variable(fn_state.u_25955.clone());
        // b195_s31: bit-extract b195_s30 b195_s28 b195_s29
        let b195_s31 = ctx
            .emitter()
            .bit_extract(b195_s30.clone(), b195_s28.clone(), b195_s29.clone());
        // b195_s32: cast reint b195_s31 -> u1
        let b195_s32 = ctx
            .emitter()
            .cast(
                b195_s31.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b195_s33: call decode_crc32_aarch64_instrs_integer_crc(b195_s7, b195_s12, b195_s17, b195_s22, b195_s27, b195_s32)
        let b195_s33 = decode_crc32_aarch64_instrs_integer_crc(
            ctx,
            b195_s7,
            b195_s12,
            b195_s17,
            b195_s22,
            b195_s27,
            b195_s32,
        );
        // b195_s34: const #15616u : u32
        let b195_s34 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b195_s35: read-reg b195_s34:u1
        let b195_s35 = ctx
            .emitter()
            .read_register(
                b195_s34.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b195_s36: branch b195_s35 block78 block77
        return ctx
            .emitter()
            .branch(
                b195_s35.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_196(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b196_s0: const #151s : i8
        let b196_s0 = ctx
            .emitter()
            .constant(
                151isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 8,
                },
            );
        // b196_s1: const #14656u : u32
        let b196_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b196_s2: read-reg b196_s1:i
        let b196_s2 = ctx
            .emitter()
            .read_register(
                b196_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b196_s3: cmp-lt b196_s2 b196_s0
        let b196_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b196_s2.clone(), b196_s0.clone()),
            );
        // b196_s4: not b196_s3
        let b196_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b196_s3.clone()));
        // b196_s5: branch b196_s4 block36 block197
        return ctx
            .emitter()
            .branch(
                b196_s4.clone(),
                fn_state.block_refs[36usize].clone(),
                fn_state.block_refs[197usize].clone(),
            );
    }
    fn block_197(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b197_s0: const #151s : i8
        let b197_s0 = ctx
            .emitter()
            .constant(
                151isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 8,
                },
            );
        // b197_s1: const #14656u : u32
        let b197_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b197_s2: write-reg b197_s1 <= b197_s0
        let b197_s2 = ctx.emitter().write_register(b197_s1.clone(), b197_s0.clone());
        // b197_s3: const #0s : i0
        let b197_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b197_s4: const #5s : i3
        let b197_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b197_s5: read-var u#25950:u32
        let b197_s5 = ctx.emitter().read_variable(fn_state.u_25950.clone());
        // b197_s6: bit-extract b197_s5 b197_s3 b197_s4
        let b197_s6 = ctx
            .emitter()
            .bit_extract(b197_s5.clone(), b197_s3.clone(), b197_s4.clone());
        // b197_s7: cast reint b197_s6 -> u5
        let b197_s7 = ctx
            .emitter()
            .cast(
                b197_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b197_s8: const #5s : i3
        let b197_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b197_s9: const #5s : i3
        let b197_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b197_s10: read-var u#25950:u32
        let b197_s10 = ctx.emitter().read_variable(fn_state.u_25950.clone());
        // b197_s11: bit-extract b197_s10 b197_s8 b197_s9
        let b197_s11 = ctx
            .emitter()
            .bit_extract(b197_s10.clone(), b197_s8.clone(), b197_s9.clone());
        // b197_s12: cast reint b197_s11 -> u5
        let b197_s12 = ctx
            .emitter()
            .cast(
                b197_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b197_s13: const #31s : i5
        let b197_s13 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b197_s14: const #1s : i1
        let b197_s14 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b197_s15: read-var u#25950:u32
        let b197_s15 = ctx.emitter().read_variable(fn_state.u_25950.clone());
        // b197_s16: bit-extract b197_s15 b197_s13 b197_s14
        let b197_s16 = ctx
            .emitter()
            .bit_extract(b197_s15.clone(), b197_s13.clone(), b197_s14.clone());
        // b197_s17: cast reint b197_s16 -> u1
        let b197_s17 = ctx
            .emitter()
            .cast(
                b197_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b197_s18: call decode_cnt_aarch64_instrs_integer_arithmetic_unary_cnt(b197_s7, b197_s12, b197_s17)
        let b197_s18 = decode_cnt_aarch64_instrs_integer_arithmetic_unary_cnt(
            ctx,
            b197_s7,
            b197_s12,
            b197_s17,
        );
        // b197_s19: const #15616u : u32
        let b197_s19 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b197_s20: read-reg b197_s19:u1
        let b197_s20 = ctx
            .emitter()
            .read_register(
                b197_s19.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b197_s21: branch b197_s20 block78 block77
        return ctx
            .emitter()
            .branch(
                b197_s20.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_198(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b198_s0: const #128s : i8
        let b198_s0 = ctx
            .emitter()
            .constant(
                128isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 8,
                },
            );
        // b198_s1: const #14656u : u32
        let b198_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b198_s2: read-reg b198_s1:i
        let b198_s2 = ctx
            .emitter()
            .read_register(
                b198_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b198_s3: cmp-lt b198_s2 b198_s0
        let b198_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b198_s2.clone(), b198_s0.clone()),
            );
        // b198_s4: not b198_s3
        let b198_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b198_s3.clone()));
        // b198_s5: branch b198_s4 block35 block199
        return ctx
            .emitter()
            .branch(
                b198_s4.clone(),
                fn_state.block_refs[35usize].clone(),
                fn_state.block_refs[199usize].clone(),
            );
    }
    fn block_199(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b199_s0: const #128s : i8
        let b199_s0 = ctx
            .emitter()
            .constant(
                128isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 8,
                },
            );
        // b199_s1: const #14656u : u32
        let b199_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b199_s2: write-reg b199_s1 <= b199_s0
        let b199_s2 = ctx.emitter().write_register(b199_s1.clone(), b199_s0.clone());
        // b199_s3: const #0s : i0
        let b199_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b199_s4: const #5s : i3
        let b199_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b199_s5: read-var u#25944:u32
        let b199_s5 = ctx.emitter().read_variable(fn_state.u_25944.clone());
        // b199_s6: bit-extract b199_s5 b199_s3 b199_s4
        let b199_s6 = ctx
            .emitter()
            .bit_extract(b199_s5.clone(), b199_s3.clone(), b199_s4.clone());
        // b199_s7: cast reint b199_s6 -> u5
        let b199_s7 = ctx
            .emitter()
            .cast(
                b199_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b199_s8: const #5s : i3
        let b199_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b199_s9: const #5s : i3
        let b199_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b199_s10: read-var u#25944:u32
        let b199_s10 = ctx.emitter().read_variable(fn_state.u_25944.clone());
        // b199_s11: bit-extract b199_s10 b199_s8 b199_s9
        let b199_s11 = ctx
            .emitter()
            .bit_extract(b199_s10.clone(), b199_s8.clone(), b199_s9.clone());
        // b199_s12: cast reint b199_s11 -> u5
        let b199_s12 = ctx
            .emitter()
            .cast(
                b199_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b199_s13: const #10s : i4
        let b199_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b199_s14: const #1s : i1
        let b199_s14 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b199_s15: read-var u#25944:u32
        let b199_s15 = ctx.emitter().read_variable(fn_state.u_25944.clone());
        // b199_s16: bit-extract b199_s15 b199_s13 b199_s14
        let b199_s16 = ctx
            .emitter()
            .bit_extract(b199_s15.clone(), b199_s13.clone(), b199_s14.clone());
        // b199_s17: cast reint b199_s16 -> u1
        let b199_s17 = ctx
            .emitter()
            .cast(
                b199_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b199_s18: const #31s : i5
        let b199_s18 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b199_s19: const #1s : i1
        let b199_s19 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b199_s20: read-var u#25944:u32
        let b199_s20 = ctx.emitter().read_variable(fn_state.u_25944.clone());
        // b199_s21: bit-extract b199_s20 b199_s18 b199_s19
        let b199_s21 = ctx
            .emitter()
            .bit_extract(b199_s20.clone(), b199_s18.clone(), b199_s19.clone());
        // b199_s22: cast reint b199_s21 -> u1
        let b199_s22 = ctx
            .emitter()
            .cast(
                b199_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b199_s23: call decode_clz_int_aarch64_instrs_integer_arithmetic_cnt(b199_s7, b199_s12, b199_s17, b199_s22)
        let b199_s23 = decode_clz_int_aarch64_instrs_integer_arithmetic_cnt(
            ctx,
            b199_s7,
            b199_s12,
            b199_s17,
            b199_s22,
        );
        // b199_s24: return
        return BlockResult::None;
    }
    fn block_200(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b200_s0: const #127s : i7
        let b200_s0 = ctx
            .emitter()
            .constant(
                127isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 7,
                },
            );
        // b200_s1: const #14656u : u32
        let b200_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b200_s2: read-reg b200_s1:i
        let b200_s2 = ctx
            .emitter()
            .read_register(
                b200_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b200_s3: cmp-lt b200_s2 b200_s0
        let b200_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b200_s2.clone(), b200_s0.clone()),
            );
        // b200_s4: not b200_s3
        let b200_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b200_s3.clone()));
        // b200_s5: branch b200_s4 block34 block201
        return ctx
            .emitter()
            .branch(
                b200_s4.clone(),
                fn_state.block_refs[34usize].clone(),
                fn_state.block_refs[201usize].clone(),
            );
    }
    fn block_201(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b201_s0: const #127s : i7
        let b201_s0 = ctx
            .emitter()
            .constant(
                127isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 7,
                },
            );
        // b201_s1: const #14656u : u32
        let b201_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b201_s2: write-reg b201_s1 <= b201_s0
        let b201_s2 = ctx.emitter().write_register(b201_s1.clone(), b201_s0.clone());
        // b201_s3: const #0s : i0
        let b201_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b201_s4: const #5s : i3
        let b201_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b201_s5: read-var u#25938:u32
        let b201_s5 = ctx.emitter().read_variable(fn_state.u_25938.clone());
        // b201_s6: bit-extract b201_s5 b201_s3 b201_s4
        let b201_s6 = ctx
            .emitter()
            .bit_extract(b201_s5.clone(), b201_s3.clone(), b201_s4.clone());
        // b201_s7: cast reint b201_s6 -> u5
        let b201_s7 = ctx
            .emitter()
            .cast(
                b201_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b201_s8: const #5s : i3
        let b201_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b201_s9: const #5s : i3
        let b201_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b201_s10: read-var u#25938:u32
        let b201_s10 = ctx.emitter().read_variable(fn_state.u_25938.clone());
        // b201_s11: bit-extract b201_s10 b201_s8 b201_s9
        let b201_s11 = ctx
            .emitter()
            .bit_extract(b201_s10.clone(), b201_s8.clone(), b201_s9.clone());
        // b201_s12: cast reint b201_s11 -> u5
        let b201_s12 = ctx
            .emitter()
            .cast(
                b201_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b201_s13: const #10s : i4
        let b201_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b201_s14: const #1s : i1
        let b201_s14 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b201_s15: read-var u#25938:u32
        let b201_s15 = ctx.emitter().read_variable(fn_state.u_25938.clone());
        // b201_s16: bit-extract b201_s15 b201_s13 b201_s14
        let b201_s16 = ctx
            .emitter()
            .bit_extract(b201_s15.clone(), b201_s13.clone(), b201_s14.clone());
        // b201_s17: cast reint b201_s16 -> u1
        let b201_s17 = ctx
            .emitter()
            .cast(
                b201_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b201_s18: const #31s : i5
        let b201_s18 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b201_s19: const #1s : i1
        let b201_s19 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b201_s20: read-var u#25938:u32
        let b201_s20 = ctx.emitter().read_variable(fn_state.u_25938.clone());
        // b201_s21: bit-extract b201_s20 b201_s18 b201_s19
        let b201_s21 = ctx
            .emitter()
            .bit_extract(b201_s20.clone(), b201_s18.clone(), b201_s19.clone());
        // b201_s22: cast reint b201_s21 -> u1
        let b201_s22 = ctx
            .emitter()
            .cast(
                b201_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b201_s23: call decode_cls_int_aarch64_instrs_integer_arithmetic_cnt(b201_s7, b201_s12, b201_s17, b201_s22)
        let b201_s23 = decode_cls_int_aarch64_instrs_integer_arithmetic_cnt(
            ctx,
            b201_s7,
            b201_s12,
            b201_s17,
            b201_s22,
        );
        // b201_s24: return
        return BlockResult::None;
    }
    fn block_202(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b202_s0: const #10s : i4
        let b202_s0 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b202_s1: read-var u#25930:u32
        let b202_s1 = ctx.emitter().read_variable(fn_state.u_25930.clone());
        // b202_s2: const #2s : i1
        let b202_s2 = ctx
            .emitter()
            .constant(
                2isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b202_s3: bit-extract b202_s1 b202_s0 b202_s2
        let b202_s3 = ctx
            .emitter()
            .bit_extract(b202_s1.clone(), b202_s0.clone(), b202_s2.clone());
        // b202_s4: cast reint b202_s3 -> u2
        let b202_s4 = ctx
            .emitter()
            .cast(
                b202_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
                CastOperationKind::Reinterpret,
            );
        // b202_s5: const #2u : u2
        let b202_s5 = ctx
            .emitter()
            .constant(
                2,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
            );
        // b202_s6: cmp-eq b202_s4 b202_s5
        let b202_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b202_s4.clone(), b202_s5.clone()),
            );
        // b202_s7: branch b202_s6 block203 block33
        return ctx
            .emitter()
            .branch(
                b202_s6.clone(),
                fn_state.block_refs[203usize].clone(),
                fn_state.block_refs[33usize].clone(),
            );
    }
    fn block_203(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b203_s0: const #4s : i3
        let b203_s0 = ctx
            .emitter()
            .constant(
                4isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b203_s1: read-var u#25930:u32
        let b203_s1 = ctx.emitter().read_variable(fn_state.u_25930.clone());
        // b203_s2: const #1s : i0
        let b203_s2 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b203_s3: bit-extract b203_s1 b203_s0 b203_s2
        let b203_s3 = ctx
            .emitter()
            .bit_extract(b203_s1.clone(), b203_s0.clone(), b203_s2.clone());
        // b203_s4: cast reint b203_s3 -> u1
        let b203_s4 = ctx
            .emitter()
            .cast(
                b203_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b203_s5: const #0u : u1
        let b203_s5 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b203_s6: cmp-eq b203_s4 b203_s5
        let b203_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b203_s4.clone(), b203_s5.clone()),
            );
        // b203_s7: branch b203_s6 block204 block33
        return ctx
            .emitter()
            .branch(
                b203_s6.clone(),
                fn_state.block_refs[204usize].clone(),
                fn_state.block_refs[33usize].clone(),
            );
    }
    fn block_204(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b204_s0: const #122s : i7
        let b204_s0 = ctx
            .emitter()
            .constant(
                122isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 7,
                },
            );
        // b204_s1: const #14656u : u32
        let b204_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b204_s2: read-reg b204_s1:i
        let b204_s2 = ctx
            .emitter()
            .read_register(
                b204_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b204_s3: cmp-lt b204_s2 b204_s0
        let b204_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b204_s2.clone(), b204_s0.clone()),
            );
        // b204_s4: not b204_s3
        let b204_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b204_s3.clone()));
        // b204_s5: branch b204_s4 block33 block205
        return ctx
            .emitter()
            .branch(
                b204_s4.clone(),
                fn_state.block_refs[33usize].clone(),
                fn_state.block_refs[205usize].clone(),
            );
    }
    fn block_205(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b205_s0: const #122s : i7
        let b205_s0 = ctx
            .emitter()
            .constant(
                122isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 7,
                },
            );
        // b205_s1: const #14656u : u32
        let b205_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b205_s2: write-reg b205_s1 <= b205_s0
        let b205_s2 = ctx.emitter().write_register(b205_s1.clone(), b205_s0.clone());
        // b205_s3: const #0s : i0
        let b205_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b205_s4: const #4s : i3
        let b205_s4 = ctx
            .emitter()
            .constant(
                4isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b205_s5: read-var u#25930:u32
        let b205_s5 = ctx.emitter().read_variable(fn_state.u_25930.clone());
        // b205_s6: bit-extract b205_s5 b205_s3 b205_s4
        let b205_s6 = ctx
            .emitter()
            .bit_extract(b205_s5.clone(), b205_s3.clone(), b205_s4.clone());
        // b205_s7: cast reint b205_s6 -> u4
        let b205_s7 = ctx
            .emitter()
            .cast(
                b205_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 4,
                },
                CastOperationKind::Reinterpret,
            );
        // b205_s8: const #5s : i3
        let b205_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b205_s9: const #5s : i3
        let b205_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b205_s10: read-var u#25930:u32
        let b205_s10 = ctx.emitter().read_variable(fn_state.u_25930.clone());
        // b205_s11: bit-extract b205_s10 b205_s8 b205_s9
        let b205_s11 = ctx
            .emitter()
            .bit_extract(b205_s10.clone(), b205_s8.clone(), b205_s9.clone());
        // b205_s12: cast reint b205_s11 -> u5
        let b205_s12 = ctx
            .emitter()
            .cast(
                b205_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b205_s13: const #12s : i4
        let b205_s13 = ctx
            .emitter()
            .constant(
                12isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b205_s14: const #4s : i3
        let b205_s14 = ctx
            .emitter()
            .constant(
                4isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b205_s15: read-var u#25930:u32
        let b205_s15 = ctx.emitter().read_variable(fn_state.u_25930.clone());
        // b205_s16: bit-extract b205_s15 b205_s13 b205_s14
        let b205_s16 = ctx
            .emitter()
            .bit_extract(b205_s15.clone(), b205_s13.clone(), b205_s14.clone());
        // b205_s17: cast reint b205_s16 -> u4
        let b205_s17 = ctx
            .emitter()
            .cast(
                b205_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 4,
                },
                CastOperationKind::Reinterpret,
            );
        // b205_s18: const #16s : i5
        let b205_s18 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b205_s19: const #5s : i3
        let b205_s19 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b205_s20: read-var u#25930:u32
        let b205_s20 = ctx.emitter().read_variable(fn_state.u_25930.clone());
        // b205_s21: bit-extract b205_s20 b205_s18 b205_s19
        let b205_s21 = ctx
            .emitter()
            .bit_extract(b205_s20.clone(), b205_s18.clone(), b205_s19.clone());
        // b205_s22: cast reint b205_s21 -> u5
        let b205_s22 = ctx
            .emitter()
            .cast(
                b205_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b205_s23: const #30s : i5
        let b205_s23 = ctx
            .emitter()
            .constant(
                30isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b205_s24: const #1s : i1
        let b205_s24 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b205_s25: read-var u#25930:u32
        let b205_s25 = ctx.emitter().read_variable(fn_state.u_25930.clone());
        // b205_s26: bit-extract b205_s25 b205_s23 b205_s24
        let b205_s26 = ctx
            .emitter()
            .bit_extract(b205_s25.clone(), b205_s23.clone(), b205_s24.clone());
        // b205_s27: cast reint b205_s26 -> u1
        let b205_s27 = ctx
            .emitter()
            .cast(
                b205_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b205_s28: const #31s : i5
        let b205_s28 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b205_s29: const #1s : i1
        let b205_s29 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b205_s30: read-var u#25930:u32
        let b205_s30 = ctx.emitter().read_variable(fn_state.u_25930.clone());
        // b205_s31: bit-extract b205_s30 b205_s28 b205_s29
        let b205_s31 = ctx
            .emitter()
            .bit_extract(b205_s30.clone(), b205_s28.clone(), b205_s29.clone());
        // b205_s32: cast reint b205_s31 -> u1
        let b205_s32 = ctx
            .emitter()
            .cast(
                b205_s31.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b205_s33: call decode_ccmp_imm_aarch64_instrs_integer_conditional_compare_immediate(b205_s7, b205_s12, b205_s17, b205_s22, b205_s27, b205_s32)
        let b205_s33 = decode_ccmp_imm_aarch64_instrs_integer_conditional_compare_immediate(
            ctx,
            b205_s7,
            b205_s12,
            b205_s17,
            b205_s22,
            b205_s27,
            b205_s32,
        );
        // b205_s34: return
        return BlockResult::None;
    }
    fn block_206(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b206_s0: const #10s : i4
        let b206_s0 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b206_s1: read-var u#25923:u32
        let b206_s1 = ctx.emitter().read_variable(fn_state.u_25923.clone());
        // b206_s2: const #2s : i1
        let b206_s2 = ctx
            .emitter()
            .constant(
                2isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b206_s3: bit-extract b206_s1 b206_s0 b206_s2
        let b206_s3 = ctx
            .emitter()
            .bit_extract(b206_s1.clone(), b206_s0.clone(), b206_s2.clone());
        // b206_s4: cast reint b206_s3 -> u2
        let b206_s4 = ctx
            .emitter()
            .cast(
                b206_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
                CastOperationKind::Reinterpret,
            );
        // b206_s5: const #2u : u2
        let b206_s5 = ctx
            .emitter()
            .constant(
                2,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
            );
        // b206_s6: cmp-eq b206_s4 b206_s5
        let b206_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b206_s4.clone(), b206_s5.clone()),
            );
        // b206_s7: branch b206_s6 block207 block32
        return ctx
            .emitter()
            .branch(
                b206_s6.clone(),
                fn_state.block_refs[207usize].clone(),
                fn_state.block_refs[32usize].clone(),
            );
    }
    fn block_207(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b207_s0: const #4s : i3
        let b207_s0 = ctx
            .emitter()
            .constant(
                4isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b207_s1: read-var u#25923:u32
        let b207_s1 = ctx.emitter().read_variable(fn_state.u_25923.clone());
        // b207_s2: const #1s : i0
        let b207_s2 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b207_s3: bit-extract b207_s1 b207_s0 b207_s2
        let b207_s3 = ctx
            .emitter()
            .bit_extract(b207_s1.clone(), b207_s0.clone(), b207_s2.clone());
        // b207_s4: cast reint b207_s3 -> u1
        let b207_s4 = ctx
            .emitter()
            .cast(
                b207_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b207_s5: const #0u : u1
        let b207_s5 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b207_s6: cmp-eq b207_s4 b207_s5
        let b207_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b207_s4.clone(), b207_s5.clone()),
            );
        // b207_s7: branch b207_s6 block208 block32
        return ctx
            .emitter()
            .branch(
                b207_s6.clone(),
                fn_state.block_refs[208usize].clone(),
                fn_state.block_refs[32usize].clone(),
            );
    }
    fn block_208(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b208_s0: const #121s : i7
        let b208_s0 = ctx
            .emitter()
            .constant(
                121isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 7,
                },
            );
        // b208_s1: const #14656u : u32
        let b208_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b208_s2: read-reg b208_s1:i
        let b208_s2 = ctx
            .emitter()
            .read_register(
                b208_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b208_s3: cmp-lt b208_s2 b208_s0
        let b208_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b208_s2.clone(), b208_s0.clone()),
            );
        // b208_s4: not b208_s3
        let b208_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b208_s3.clone()));
        // b208_s5: branch b208_s4 block32 block209
        return ctx
            .emitter()
            .branch(
                b208_s4.clone(),
                fn_state.block_refs[32usize].clone(),
                fn_state.block_refs[209usize].clone(),
            );
    }
    fn block_209(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b209_s0: const #121s : i7
        let b209_s0 = ctx
            .emitter()
            .constant(
                121isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 7,
                },
            );
        // b209_s1: const #14656u : u32
        let b209_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b209_s2: write-reg b209_s1 <= b209_s0
        let b209_s2 = ctx.emitter().write_register(b209_s1.clone(), b209_s0.clone());
        // b209_s3: const #0s : i0
        let b209_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b209_s4: const #4s : i3
        let b209_s4 = ctx
            .emitter()
            .constant(
                4isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b209_s5: read-var u#25923:u32
        let b209_s5 = ctx.emitter().read_variable(fn_state.u_25923.clone());
        // b209_s6: bit-extract b209_s5 b209_s3 b209_s4
        let b209_s6 = ctx
            .emitter()
            .bit_extract(b209_s5.clone(), b209_s3.clone(), b209_s4.clone());
        // b209_s7: cast reint b209_s6 -> u4
        let b209_s7 = ctx
            .emitter()
            .cast(
                b209_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 4,
                },
                CastOperationKind::Reinterpret,
            );
        // b209_s8: const #5s : i3
        let b209_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b209_s9: const #5s : i3
        let b209_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b209_s10: read-var u#25923:u32
        let b209_s10 = ctx.emitter().read_variable(fn_state.u_25923.clone());
        // b209_s11: bit-extract b209_s10 b209_s8 b209_s9
        let b209_s11 = ctx
            .emitter()
            .bit_extract(b209_s10.clone(), b209_s8.clone(), b209_s9.clone());
        // b209_s12: cast reint b209_s11 -> u5
        let b209_s12 = ctx
            .emitter()
            .cast(
                b209_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b209_s13: const #12s : i4
        let b209_s13 = ctx
            .emitter()
            .constant(
                12isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b209_s14: const #4s : i3
        let b209_s14 = ctx
            .emitter()
            .constant(
                4isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b209_s15: read-var u#25923:u32
        let b209_s15 = ctx.emitter().read_variable(fn_state.u_25923.clone());
        // b209_s16: bit-extract b209_s15 b209_s13 b209_s14
        let b209_s16 = ctx
            .emitter()
            .bit_extract(b209_s15.clone(), b209_s13.clone(), b209_s14.clone());
        // b209_s17: cast reint b209_s16 -> u4
        let b209_s17 = ctx
            .emitter()
            .cast(
                b209_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 4,
                },
                CastOperationKind::Reinterpret,
            );
        // b209_s18: const #16s : i5
        let b209_s18 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b209_s19: const #5s : i3
        let b209_s19 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b209_s20: read-var u#25923:u32
        let b209_s20 = ctx.emitter().read_variable(fn_state.u_25923.clone());
        // b209_s21: bit-extract b209_s20 b209_s18 b209_s19
        let b209_s21 = ctx
            .emitter()
            .bit_extract(b209_s20.clone(), b209_s18.clone(), b209_s19.clone());
        // b209_s22: cast reint b209_s21 -> u5
        let b209_s22 = ctx
            .emitter()
            .cast(
                b209_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b209_s23: const #30s : i5
        let b209_s23 = ctx
            .emitter()
            .constant(
                30isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b209_s24: const #1s : i1
        let b209_s24 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b209_s25: read-var u#25923:u32
        let b209_s25 = ctx.emitter().read_variable(fn_state.u_25923.clone());
        // b209_s26: bit-extract b209_s25 b209_s23 b209_s24
        let b209_s26 = ctx
            .emitter()
            .bit_extract(b209_s25.clone(), b209_s23.clone(), b209_s24.clone());
        // b209_s27: cast reint b209_s26 -> u1
        let b209_s27 = ctx
            .emitter()
            .cast(
                b209_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b209_s28: const #31s : i5
        let b209_s28 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b209_s29: const #1s : i1
        let b209_s29 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b209_s30: read-var u#25923:u32
        let b209_s30 = ctx.emitter().read_variable(fn_state.u_25923.clone());
        // b209_s31: bit-extract b209_s30 b209_s28 b209_s29
        let b209_s31 = ctx
            .emitter()
            .bit_extract(b209_s30.clone(), b209_s28.clone(), b209_s29.clone());
        // b209_s32: cast reint b209_s31 -> u1
        let b209_s32 = ctx
            .emitter()
            .cast(
                b209_s31.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b209_s33: call decode_ccmn_imm_aarch64_instrs_integer_conditional_compare_immediate(b209_s7, b209_s12, b209_s17, b209_s22, b209_s27, b209_s32)
        let b209_s33 = decode_ccmn_imm_aarch64_instrs_integer_conditional_compare_immediate(
            ctx,
            b209_s7,
            b209_s12,
            b209_s17,
            b209_s22,
            b209_s27,
            b209_s32,
        );
        // b209_s34: return
        return BlockResult::None;
    }
    fn block_210(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b210_s0: const #10s : i4
        let b210_s0 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b210_s1: read-var u#25915:u32
        let b210_s1 = ctx.emitter().read_variable(fn_state.u_25915.clone());
        // b210_s2: const #2s : i1
        let b210_s2 = ctx
            .emitter()
            .constant(
                2isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b210_s3: bit-extract b210_s1 b210_s0 b210_s2
        let b210_s3 = ctx
            .emitter()
            .bit_extract(b210_s1.clone(), b210_s0.clone(), b210_s2.clone());
        // b210_s4: cast reint b210_s3 -> u2
        let b210_s4 = ctx
            .emitter()
            .cast(
                b210_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
                CastOperationKind::Reinterpret,
            );
        // b210_s5: const #0u : u2
        let b210_s5 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
            );
        // b210_s6: cmp-eq b210_s4 b210_s5
        let b210_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b210_s4.clone(), b210_s5.clone()),
            );
        // b210_s7: branch b210_s6 block211 block31
        return ctx
            .emitter()
            .branch(
                b210_s6.clone(),
                fn_state.block_refs[211usize].clone(),
                fn_state.block_refs[31usize].clone(),
            );
    }
    fn block_211(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b211_s0: const #4s : i3
        let b211_s0 = ctx
            .emitter()
            .constant(
                4isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b211_s1: read-var u#25915:u32
        let b211_s1 = ctx.emitter().read_variable(fn_state.u_25915.clone());
        // b211_s2: const #1s : i0
        let b211_s2 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b211_s3: bit-extract b211_s1 b211_s0 b211_s2
        let b211_s3 = ctx
            .emitter()
            .bit_extract(b211_s1.clone(), b211_s0.clone(), b211_s2.clone());
        // b211_s4: cast reint b211_s3 -> u1
        let b211_s4 = ctx
            .emitter()
            .cast(
                b211_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b211_s5: const #0u : u1
        let b211_s5 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b211_s6: cmp-eq b211_s4 b211_s5
        let b211_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b211_s4.clone(), b211_s5.clone()),
            );
        // b211_s7: branch b211_s6 block212 block31
        return ctx
            .emitter()
            .branch(
                b211_s6.clone(),
                fn_state.block_refs[212usize].clone(),
                fn_state.block_refs[31usize].clone(),
            );
    }
    fn block_212(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b212_s0: const #120s : i7
        let b212_s0 = ctx
            .emitter()
            .constant(
                120isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 7,
                },
            );
        // b212_s1: const #14656u : u32
        let b212_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b212_s2: read-reg b212_s1:i
        let b212_s2 = ctx
            .emitter()
            .read_register(
                b212_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b212_s3: cmp-lt b212_s2 b212_s0
        let b212_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b212_s2.clone(), b212_s0.clone()),
            );
        // b212_s4: not b212_s3
        let b212_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b212_s3.clone()));
        // b212_s5: branch b212_s4 block31 block213
        return ctx
            .emitter()
            .branch(
                b212_s4.clone(),
                fn_state.block_refs[31usize].clone(),
                fn_state.block_refs[213usize].clone(),
            );
    }
    fn block_213(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b213_s0: const #120s : i7
        let b213_s0 = ctx
            .emitter()
            .constant(
                120isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 7,
                },
            );
        // b213_s1: const #14656u : u32
        let b213_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b213_s2: write-reg b213_s1 <= b213_s0
        let b213_s2 = ctx.emitter().write_register(b213_s1.clone(), b213_s0.clone());
        // b213_s3: const #0s : i0
        let b213_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b213_s4: const #4s : i3
        let b213_s4 = ctx
            .emitter()
            .constant(
                4isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b213_s5: read-var u#25915:u32
        let b213_s5 = ctx.emitter().read_variable(fn_state.u_25915.clone());
        // b213_s6: bit-extract b213_s5 b213_s3 b213_s4
        let b213_s6 = ctx
            .emitter()
            .bit_extract(b213_s5.clone(), b213_s3.clone(), b213_s4.clone());
        // b213_s7: cast reint b213_s6 -> u4
        let b213_s7 = ctx
            .emitter()
            .cast(
                b213_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 4,
                },
                CastOperationKind::Reinterpret,
            );
        // b213_s8: const #5s : i3
        let b213_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b213_s9: const #5s : i3
        let b213_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b213_s10: read-var u#25915:u32
        let b213_s10 = ctx.emitter().read_variable(fn_state.u_25915.clone());
        // b213_s11: bit-extract b213_s10 b213_s8 b213_s9
        let b213_s11 = ctx
            .emitter()
            .bit_extract(b213_s10.clone(), b213_s8.clone(), b213_s9.clone());
        // b213_s12: cast reint b213_s11 -> u5
        let b213_s12 = ctx
            .emitter()
            .cast(
                b213_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b213_s13: const #12s : i4
        let b213_s13 = ctx
            .emitter()
            .constant(
                12isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b213_s14: const #4s : i3
        let b213_s14 = ctx
            .emitter()
            .constant(
                4isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b213_s15: read-var u#25915:u32
        let b213_s15 = ctx.emitter().read_variable(fn_state.u_25915.clone());
        // b213_s16: bit-extract b213_s15 b213_s13 b213_s14
        let b213_s16 = ctx
            .emitter()
            .bit_extract(b213_s15.clone(), b213_s13.clone(), b213_s14.clone());
        // b213_s17: cast reint b213_s16 -> u4
        let b213_s17 = ctx
            .emitter()
            .cast(
                b213_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 4,
                },
                CastOperationKind::Reinterpret,
            );
        // b213_s18: const #16s : i5
        let b213_s18 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b213_s19: const #5s : i3
        let b213_s19 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b213_s20: read-var u#25915:u32
        let b213_s20 = ctx.emitter().read_variable(fn_state.u_25915.clone());
        // b213_s21: bit-extract b213_s20 b213_s18 b213_s19
        let b213_s21 = ctx
            .emitter()
            .bit_extract(b213_s20.clone(), b213_s18.clone(), b213_s19.clone());
        // b213_s22: cast reint b213_s21 -> u5
        let b213_s22 = ctx
            .emitter()
            .cast(
                b213_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b213_s23: const #30s : i5
        let b213_s23 = ctx
            .emitter()
            .constant(
                30isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b213_s24: const #1s : i1
        let b213_s24 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b213_s25: read-var u#25915:u32
        let b213_s25 = ctx.emitter().read_variable(fn_state.u_25915.clone());
        // b213_s26: bit-extract b213_s25 b213_s23 b213_s24
        let b213_s26 = ctx
            .emitter()
            .bit_extract(b213_s25.clone(), b213_s23.clone(), b213_s24.clone());
        // b213_s27: cast reint b213_s26 -> u1
        let b213_s27 = ctx
            .emitter()
            .cast(
                b213_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b213_s28: const #31s : i5
        let b213_s28 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b213_s29: const #1s : i1
        let b213_s29 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b213_s30: read-var u#25915:u32
        let b213_s30 = ctx.emitter().read_variable(fn_state.u_25915.clone());
        // b213_s31: bit-extract b213_s30 b213_s28 b213_s29
        let b213_s31 = ctx
            .emitter()
            .bit_extract(b213_s30.clone(), b213_s28.clone(), b213_s29.clone());
        // b213_s32: cast reint b213_s31 -> u1
        let b213_s32 = ctx
            .emitter()
            .cast(
                b213_s31.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b213_s33: call decode_ccmp_reg_aarch64_instrs_integer_conditional_compare_register(b213_s7, b213_s12, b213_s17, b213_s22, b213_s27, b213_s32)
        let b213_s33 = decode_ccmp_reg_aarch64_instrs_integer_conditional_compare_register(
            ctx,
            b213_s7,
            b213_s12,
            b213_s17,
            b213_s22,
            b213_s27,
            b213_s32,
        );
        // b213_s34: return
        return BlockResult::None;
    }
    fn block_214(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b214_s0: const #10s : i4
        let b214_s0 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b214_s1: read-var u#25909:u32
        let b214_s1 = ctx.emitter().read_variable(fn_state.u_25909.clone());
        // b214_s2: const #2s : i1
        let b214_s2 = ctx
            .emitter()
            .constant(
                2isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b214_s3: bit-extract b214_s1 b214_s0 b214_s2
        let b214_s3 = ctx
            .emitter()
            .bit_extract(b214_s1.clone(), b214_s0.clone(), b214_s2.clone());
        // b214_s4: cast reint b214_s3 -> u2
        let b214_s4 = ctx
            .emitter()
            .cast(
                b214_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
                CastOperationKind::Reinterpret,
            );
        // b214_s5: const #0u : u2
        let b214_s5 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
            );
        // b214_s6: cmp-eq b214_s4 b214_s5
        let b214_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b214_s4.clone(), b214_s5.clone()),
            );
        // b214_s7: branch b214_s6 block215 block30
        return ctx
            .emitter()
            .branch(
                b214_s6.clone(),
                fn_state.block_refs[215usize].clone(),
                fn_state.block_refs[30usize].clone(),
            );
    }
    fn block_215(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b215_s0: const #4s : i3
        let b215_s0 = ctx
            .emitter()
            .constant(
                4isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b215_s1: read-var u#25909:u32
        let b215_s1 = ctx.emitter().read_variable(fn_state.u_25909.clone());
        // b215_s2: const #1s : i0
        let b215_s2 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b215_s3: bit-extract b215_s1 b215_s0 b215_s2
        let b215_s3 = ctx
            .emitter()
            .bit_extract(b215_s1.clone(), b215_s0.clone(), b215_s2.clone());
        // b215_s4: cast reint b215_s3 -> u1
        let b215_s4 = ctx
            .emitter()
            .cast(
                b215_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b215_s5: const #0u : u1
        let b215_s5 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b215_s6: cmp-eq b215_s4 b215_s5
        let b215_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b215_s4.clone(), b215_s5.clone()),
            );
        // b215_s7: branch b215_s6 block216 block30
        return ctx
            .emitter()
            .branch(
                b215_s6.clone(),
                fn_state.block_refs[216usize].clone(),
                fn_state.block_refs[30usize].clone(),
            );
    }
    fn block_216(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b216_s0: const #119s : i7
        let b216_s0 = ctx
            .emitter()
            .constant(
                119isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 7,
                },
            );
        // b216_s1: const #14656u : u32
        let b216_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b216_s2: read-reg b216_s1:i
        let b216_s2 = ctx
            .emitter()
            .read_register(
                b216_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b216_s3: cmp-lt b216_s2 b216_s0
        let b216_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b216_s2.clone(), b216_s0.clone()),
            );
        // b216_s4: not b216_s3
        let b216_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b216_s3.clone()));
        // b216_s5: branch b216_s4 block30 block217
        return ctx
            .emitter()
            .branch(
                b216_s4.clone(),
                fn_state.block_refs[30usize].clone(),
                fn_state.block_refs[217usize].clone(),
            );
    }
    fn block_217(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b217_s0: const #119s : i7
        let b217_s0 = ctx
            .emitter()
            .constant(
                119isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 7,
                },
            );
        // b217_s1: const #14656u : u32
        let b217_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b217_s2: write-reg b217_s1 <= b217_s0
        let b217_s2 = ctx.emitter().write_register(b217_s1.clone(), b217_s0.clone());
        // b217_s3: const #0s : i0
        let b217_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b217_s4: const #4s : i3
        let b217_s4 = ctx
            .emitter()
            .constant(
                4isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b217_s5: read-var u#25909:u32
        let b217_s5 = ctx.emitter().read_variable(fn_state.u_25909.clone());
        // b217_s6: bit-extract b217_s5 b217_s3 b217_s4
        let b217_s6 = ctx
            .emitter()
            .bit_extract(b217_s5.clone(), b217_s3.clone(), b217_s4.clone());
        // b217_s7: cast reint b217_s6 -> u4
        let b217_s7 = ctx
            .emitter()
            .cast(
                b217_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 4,
                },
                CastOperationKind::Reinterpret,
            );
        // b217_s8: const #5s : i3
        let b217_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b217_s9: const #5s : i3
        let b217_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b217_s10: read-var u#25909:u32
        let b217_s10 = ctx.emitter().read_variable(fn_state.u_25909.clone());
        // b217_s11: bit-extract b217_s10 b217_s8 b217_s9
        let b217_s11 = ctx
            .emitter()
            .bit_extract(b217_s10.clone(), b217_s8.clone(), b217_s9.clone());
        // b217_s12: cast reint b217_s11 -> u5
        let b217_s12 = ctx
            .emitter()
            .cast(
                b217_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b217_s13: const #12s : i4
        let b217_s13 = ctx
            .emitter()
            .constant(
                12isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b217_s14: const #4s : i3
        let b217_s14 = ctx
            .emitter()
            .constant(
                4isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b217_s15: read-var u#25909:u32
        let b217_s15 = ctx.emitter().read_variable(fn_state.u_25909.clone());
        // b217_s16: bit-extract b217_s15 b217_s13 b217_s14
        let b217_s16 = ctx
            .emitter()
            .bit_extract(b217_s15.clone(), b217_s13.clone(), b217_s14.clone());
        // b217_s17: cast reint b217_s16 -> u4
        let b217_s17 = ctx
            .emitter()
            .cast(
                b217_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 4,
                },
                CastOperationKind::Reinterpret,
            );
        // b217_s18: const #16s : i5
        let b217_s18 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b217_s19: const #5s : i3
        let b217_s19 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b217_s20: read-var u#25909:u32
        let b217_s20 = ctx.emitter().read_variable(fn_state.u_25909.clone());
        // b217_s21: bit-extract b217_s20 b217_s18 b217_s19
        let b217_s21 = ctx
            .emitter()
            .bit_extract(b217_s20.clone(), b217_s18.clone(), b217_s19.clone());
        // b217_s22: cast reint b217_s21 -> u5
        let b217_s22 = ctx
            .emitter()
            .cast(
                b217_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b217_s23: const #30s : i5
        let b217_s23 = ctx
            .emitter()
            .constant(
                30isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b217_s24: const #1s : i1
        let b217_s24 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b217_s25: read-var u#25909:u32
        let b217_s25 = ctx.emitter().read_variable(fn_state.u_25909.clone());
        // b217_s26: bit-extract b217_s25 b217_s23 b217_s24
        let b217_s26 = ctx
            .emitter()
            .bit_extract(b217_s25.clone(), b217_s23.clone(), b217_s24.clone());
        // b217_s27: cast reint b217_s26 -> u1
        let b217_s27 = ctx
            .emitter()
            .cast(
                b217_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b217_s28: const #31s : i5
        let b217_s28 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b217_s29: const #1s : i1
        let b217_s29 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b217_s30: read-var u#25909:u32
        let b217_s30 = ctx.emitter().read_variable(fn_state.u_25909.clone());
        // b217_s31: bit-extract b217_s30 b217_s28 b217_s29
        let b217_s31 = ctx
            .emitter()
            .bit_extract(b217_s30.clone(), b217_s28.clone(), b217_s29.clone());
        // b217_s32: cast reint b217_s31 -> u1
        let b217_s32 = ctx
            .emitter()
            .cast(
                b217_s31.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b217_s33: call decode_ccmn_reg_aarch64_instrs_integer_conditional_compare_register(b217_s7, b217_s12, b217_s17, b217_s22, b217_s27, b217_s32)
        let b217_s33 = decode_ccmn_reg_aarch64_instrs_integer_conditional_compare_register(
            ctx,
            b217_s7,
            b217_s12,
            b217_s17,
            b217_s22,
            b217_s27,
            b217_s32,
        );
        // b217_s34: return
        return BlockResult::None;
    }
    fn block_218(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b218_s0: const #10s : i4
        let b218_s0 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b218_s1: read-var u#25904:u32
        let b218_s1 = ctx.emitter().read_variable(fn_state.u_25904.clone());
        // b218_s2: const #3s : i2
        let b218_s2 = ctx
            .emitter()
            .constant(
                3isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b218_s3: bit-extract b218_s1 b218_s0 b218_s2
        let b218_s3 = ctx
            .emitter()
            .bit_extract(b218_s1.clone(), b218_s0.clone(), b218_s2.clone());
        // b218_s4: cast reint b218_s3 -> u3
        let b218_s4 = ctx
            .emitter()
            .cast(
                b218_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 3,
                },
                CastOperationKind::Reinterpret,
            );
        // b218_s5: const #5u : u3
        let b218_s5 = ctx
            .emitter()
            .constant(
                5,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 3,
                },
            );
        // b218_s6: cmp-eq b218_s4 b218_s5
        let b218_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b218_s4.clone(), b218_s5.clone()),
            );
        // b218_s7: branch b218_s6 block219 block29
        return ctx
            .emitter()
            .branch(
                b218_s6.clone(),
                fn_state.block_refs[219usize].clone(),
                fn_state.block_refs[29usize].clone(),
            );
    }
    fn block_219(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b219_s0: const #64s : i7
        let b219_s0 = ctx
            .emitter()
            .constant(
                64isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 7,
                },
            );
        // b219_s1: const #14656u : u32
        let b219_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b219_s2: read-reg b219_s1:i
        let b219_s2 = ctx
            .emitter()
            .read_register(
                b219_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b219_s3: cmp-lt b219_s2 b219_s0
        let b219_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b219_s2.clone(), b219_s0.clone()),
            );
        // b219_s4: not b219_s3
        let b219_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b219_s3.clone()));
        // b219_s5: branch b219_s4 block29 block220
        return ctx
            .emitter()
            .branch(
                b219_s4.clone(),
                fn_state.block_refs[29usize].clone(),
                fn_state.block_refs[220usize].clone(),
            );
    }
    fn block_220(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b220_s0: const #64s : i7
        let b220_s0 = ctx
            .emitter()
            .constant(
                64isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 7,
                },
            );
        // b220_s1: const #14656u : u32
        let b220_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b220_s2: write-reg b220_s1 <= b220_s0
        let b220_s2 = ctx.emitter().write_register(b220_s1.clone(), b220_s0.clone());
        // b220_s3: const #0s : i0
        let b220_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b220_s4: const #5s : i3
        let b220_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b220_s5: read-var u#25904:u32
        let b220_s5 = ctx.emitter().read_variable(fn_state.u_25904.clone());
        // b220_s6: bit-extract b220_s5 b220_s3 b220_s4
        let b220_s6 = ctx
            .emitter()
            .bit_extract(b220_s5.clone(), b220_s3.clone(), b220_s4.clone());
        // b220_s7: cast reint b220_s6 -> u5
        let b220_s7 = ctx
            .emitter()
            .cast(
                b220_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b220_s8: const #5s : i3
        let b220_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b220_s9: const #5s : i3
        let b220_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b220_s10: read-var u#25904:u32
        let b220_s10 = ctx.emitter().read_variable(fn_state.u_25904.clone());
        // b220_s11: bit-extract b220_s10 b220_s8 b220_s9
        let b220_s11 = ctx
            .emitter()
            .bit_extract(b220_s10.clone(), b220_s8.clone(), b220_s9.clone());
        // b220_s12: cast reint b220_s11 -> u5
        let b220_s12 = ctx
            .emitter()
            .cast(
                b220_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b220_s13: const #13s : i4
        let b220_s13 = ctx
            .emitter()
            .constant(
                13isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b220_s14: const #1s : i1
        let b220_s14 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b220_s15: read-var u#25904:u32
        let b220_s15 = ctx.emitter().read_variable(fn_state.u_25904.clone());
        // b220_s16: bit-extract b220_s15 b220_s13 b220_s14
        let b220_s16 = ctx
            .emitter()
            .bit_extract(b220_s15.clone(), b220_s13.clone(), b220_s14.clone());
        // b220_s17: cast reint b220_s16 -> u1
        let b220_s17 = ctx
            .emitter()
            .cast(
                b220_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b220_s18: call decode_autib_aarch64_instrs_integer_pac_autib_dp_1src(b220_s7, b220_s12, b220_s17)
        let b220_s18 = decode_autib_aarch64_instrs_integer_pac_autib_dp_1src(
            ctx,
            b220_s7,
            b220_s12,
            b220_s17,
        );
        // b220_s19: const #15616u : u32
        let b220_s19 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b220_s20: read-reg b220_s19:u1
        let b220_s20 = ctx
            .emitter()
            .read_register(
                b220_s19.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b220_s21: branch b220_s20 block78 block77
        return ctx
            .emitter()
            .branch(
                b220_s20.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_221(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b221_s0: const #10s : i4
        let b221_s0 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b221_s1: read-var u#25899:u32
        let b221_s1 = ctx.emitter().read_variable(fn_state.u_25899.clone());
        // b221_s2: const #3s : i2
        let b221_s2 = ctx
            .emitter()
            .constant(
                3isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b221_s3: bit-extract b221_s1 b221_s0 b221_s2
        let b221_s3 = ctx
            .emitter()
            .bit_extract(b221_s1.clone(), b221_s0.clone(), b221_s2.clone());
        // b221_s4: cast reint b221_s3 -> u3
        let b221_s4 = ctx
            .emitter()
            .cast(
                b221_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 3,
                },
                CastOperationKind::Reinterpret,
            );
        // b221_s5: const #4u : u3
        let b221_s5 = ctx
            .emitter()
            .constant(
                4,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 3,
                },
            );
        // b221_s6: cmp-eq b221_s4 b221_s5
        let b221_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b221_s4.clone(), b221_s5.clone()),
            );
        // b221_s7: branch b221_s6 block222 block28
        return ctx
            .emitter()
            .branch(
                b221_s6.clone(),
                fn_state.block_refs[222usize].clone(),
                fn_state.block_refs[28usize].clone(),
            );
    }
    fn block_222(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b222_s0: const #62s : i6
        let b222_s0 = ctx
            .emitter()
            .constant(
                62isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 6,
                },
            );
        // b222_s1: const #14656u : u32
        let b222_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b222_s2: read-reg b222_s1:i
        let b222_s2 = ctx
            .emitter()
            .read_register(
                b222_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b222_s3: cmp-lt b222_s2 b222_s0
        let b222_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b222_s2.clone(), b222_s0.clone()),
            );
        // b222_s4: not b222_s3
        let b222_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b222_s3.clone()));
        // b222_s5: branch b222_s4 block28 block223
        return ctx
            .emitter()
            .branch(
                b222_s4.clone(),
                fn_state.block_refs[28usize].clone(),
                fn_state.block_refs[223usize].clone(),
            );
    }
    fn block_223(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b223_s0: const #62s : i6
        let b223_s0 = ctx
            .emitter()
            .constant(
                62isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 6,
                },
            );
        // b223_s1: const #14656u : u32
        let b223_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b223_s2: write-reg b223_s1 <= b223_s0
        let b223_s2 = ctx.emitter().write_register(b223_s1.clone(), b223_s0.clone());
        // b223_s3: const #0s : i0
        let b223_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b223_s4: const #5s : i3
        let b223_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b223_s5: read-var u#25899:u32
        let b223_s5 = ctx.emitter().read_variable(fn_state.u_25899.clone());
        // b223_s6: bit-extract b223_s5 b223_s3 b223_s4
        let b223_s6 = ctx
            .emitter()
            .bit_extract(b223_s5.clone(), b223_s3.clone(), b223_s4.clone());
        // b223_s7: cast reint b223_s6 -> u5
        let b223_s7 = ctx
            .emitter()
            .cast(
                b223_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b223_s8: const #5s : i3
        let b223_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b223_s9: const #5s : i3
        let b223_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b223_s10: read-var u#25899:u32
        let b223_s10 = ctx.emitter().read_variable(fn_state.u_25899.clone());
        // b223_s11: bit-extract b223_s10 b223_s8 b223_s9
        let b223_s11 = ctx
            .emitter()
            .bit_extract(b223_s10.clone(), b223_s8.clone(), b223_s9.clone());
        // b223_s12: cast reint b223_s11 -> u5
        let b223_s12 = ctx
            .emitter()
            .cast(
                b223_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b223_s13: const #13s : i4
        let b223_s13 = ctx
            .emitter()
            .constant(
                13isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b223_s14: const #1s : i1
        let b223_s14 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b223_s15: read-var u#25899:u32
        let b223_s15 = ctx.emitter().read_variable(fn_state.u_25899.clone());
        // b223_s16: bit-extract b223_s15 b223_s13 b223_s14
        let b223_s16 = ctx
            .emitter()
            .bit_extract(b223_s15.clone(), b223_s13.clone(), b223_s14.clone());
        // b223_s17: cast reint b223_s16 -> u1
        let b223_s17 = ctx
            .emitter()
            .cast(
                b223_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b223_s18: call decode_autia_aarch64_instrs_integer_pac_autia_dp_1src(b223_s7, b223_s12, b223_s17)
        let b223_s18 = decode_autia_aarch64_instrs_integer_pac_autia_dp_1src(
            ctx,
            b223_s7,
            b223_s12,
            b223_s17,
        );
        // b223_s19: const #15616u : u32
        let b223_s19 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b223_s20: read-reg b223_s19:u1
        let b223_s20 = ctx
            .emitter()
            .read_register(
                b223_s19.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b223_s21: branch b223_s20 block78 block77
        return ctx
            .emitter()
            .branch(
                b223_s20.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_224(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b224_s0: const #10s : i4
        let b224_s0 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b224_s1: read-var u#25894:u32
        let b224_s1 = ctx.emitter().read_variable(fn_state.u_25894.clone());
        // b224_s2: const #3s : i2
        let b224_s2 = ctx
            .emitter()
            .constant(
                3isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b224_s3: bit-extract b224_s1 b224_s0 b224_s2
        let b224_s3 = ctx
            .emitter()
            .bit_extract(b224_s1.clone(), b224_s0.clone(), b224_s2.clone());
        // b224_s4: cast reint b224_s3 -> u3
        let b224_s4 = ctx
            .emitter()
            .cast(
                b224_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 3,
                },
                CastOperationKind::Reinterpret,
            );
        // b224_s5: const #7u : u3
        let b224_s5 = ctx
            .emitter()
            .constant(
                7,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 3,
                },
            );
        // b224_s6: cmp-eq b224_s4 b224_s5
        let b224_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b224_s4.clone(), b224_s5.clone()),
            );
        // b224_s7: branch b224_s6 block225 block27
        return ctx
            .emitter()
            .branch(
                b224_s6.clone(),
                fn_state.block_refs[225usize].clone(),
                fn_state.block_refs[27usize].clone(),
            );
    }
    fn block_225(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b225_s0: const #61s : i6
        let b225_s0 = ctx
            .emitter()
            .constant(
                61isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 6,
                },
            );
        // b225_s1: const #14656u : u32
        let b225_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b225_s2: read-reg b225_s1:i
        let b225_s2 = ctx
            .emitter()
            .read_register(
                b225_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b225_s3: cmp-lt b225_s2 b225_s0
        let b225_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b225_s2.clone(), b225_s0.clone()),
            );
        // b225_s4: not b225_s3
        let b225_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b225_s3.clone()));
        // b225_s5: branch b225_s4 block27 block226
        return ctx
            .emitter()
            .branch(
                b225_s4.clone(),
                fn_state.block_refs[27usize].clone(),
                fn_state.block_refs[226usize].clone(),
            );
    }
    fn block_226(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b226_s0: const #61s : i6
        let b226_s0 = ctx
            .emitter()
            .constant(
                61isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 6,
                },
            );
        // b226_s1: const #14656u : u32
        let b226_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b226_s2: write-reg b226_s1 <= b226_s0
        let b226_s2 = ctx.emitter().write_register(b226_s1.clone(), b226_s0.clone());
        // b226_s3: const #0s : i0
        let b226_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b226_s4: const #5s : i3
        let b226_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b226_s5: read-var u#25894:u32
        let b226_s5 = ctx.emitter().read_variable(fn_state.u_25894.clone());
        // b226_s6: bit-extract b226_s5 b226_s3 b226_s4
        let b226_s6 = ctx
            .emitter()
            .bit_extract(b226_s5.clone(), b226_s3.clone(), b226_s4.clone());
        // b226_s7: cast reint b226_s6 -> u5
        let b226_s7 = ctx
            .emitter()
            .cast(
                b226_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b226_s8: const #5s : i3
        let b226_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b226_s9: const #5s : i3
        let b226_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b226_s10: read-var u#25894:u32
        let b226_s10 = ctx.emitter().read_variable(fn_state.u_25894.clone());
        // b226_s11: bit-extract b226_s10 b226_s8 b226_s9
        let b226_s11 = ctx
            .emitter()
            .bit_extract(b226_s10.clone(), b226_s8.clone(), b226_s9.clone());
        // b226_s12: cast reint b226_s11 -> u5
        let b226_s12 = ctx
            .emitter()
            .cast(
                b226_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b226_s13: const #13s : i4
        let b226_s13 = ctx
            .emitter()
            .constant(
                13isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b226_s14: const #1s : i1
        let b226_s14 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b226_s15: read-var u#25894:u32
        let b226_s15 = ctx.emitter().read_variable(fn_state.u_25894.clone());
        // b226_s16: bit-extract b226_s15 b226_s13 b226_s14
        let b226_s16 = ctx
            .emitter()
            .bit_extract(b226_s15.clone(), b226_s13.clone(), b226_s14.clone());
        // b226_s17: cast reint b226_s16 -> u1
        let b226_s17 = ctx
            .emitter()
            .cast(
                b226_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b226_s18: call decode_autdb_aarch64_instrs_integer_pac_autdb_dp_1src(b226_s7, b226_s12, b226_s17)
        let b226_s18 = decode_autdb_aarch64_instrs_integer_pac_autdb_dp_1src(
            ctx,
            b226_s7,
            b226_s12,
            b226_s17,
        );
        // b226_s19: const #15616u : u32
        let b226_s19 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b226_s20: read-reg b226_s19:u1
        let b226_s20 = ctx
            .emitter()
            .read_register(
                b226_s19.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b226_s21: branch b226_s20 block78 block77
        return ctx
            .emitter()
            .branch(
                b226_s20.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_227(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b227_s0: const #10s : i4
        let b227_s0 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b227_s1: read-var u#25890:u32
        let b227_s1 = ctx.emitter().read_variable(fn_state.u_25890.clone());
        // b227_s2: const #3s : i2
        let b227_s2 = ctx
            .emitter()
            .constant(
                3isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b227_s3: bit-extract b227_s1 b227_s0 b227_s2
        let b227_s3 = ctx
            .emitter()
            .bit_extract(b227_s1.clone(), b227_s0.clone(), b227_s2.clone());
        // b227_s4: cast reint b227_s3 -> u3
        let b227_s4 = ctx
            .emitter()
            .cast(
                b227_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 3,
                },
                CastOperationKind::Reinterpret,
            );
        // b227_s5: const #6u : u3
        let b227_s5 = ctx
            .emitter()
            .constant(
                6,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 3,
                },
            );
        // b227_s6: cmp-eq b227_s4 b227_s5
        let b227_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b227_s4.clone(), b227_s5.clone()),
            );
        // b227_s7: branch b227_s6 block228 block26
        return ctx
            .emitter()
            .branch(
                b227_s6.clone(),
                fn_state.block_refs[228usize].clone(),
                fn_state.block_refs[26usize].clone(),
            );
    }
    fn block_228(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b228_s0: const #60s : i6
        let b228_s0 = ctx
            .emitter()
            .constant(
                60isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 6,
                },
            );
        // b228_s1: const #14656u : u32
        let b228_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b228_s2: read-reg b228_s1:i
        let b228_s2 = ctx
            .emitter()
            .read_register(
                b228_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b228_s3: cmp-lt b228_s2 b228_s0
        let b228_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b228_s2.clone(), b228_s0.clone()),
            );
        // b228_s4: not b228_s3
        let b228_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b228_s3.clone()));
        // b228_s5: branch b228_s4 block26 block229
        return ctx
            .emitter()
            .branch(
                b228_s4.clone(),
                fn_state.block_refs[26usize].clone(),
                fn_state.block_refs[229usize].clone(),
            );
    }
    fn block_229(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b229_s0: const #60s : i6
        let b229_s0 = ctx
            .emitter()
            .constant(
                60isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 6,
                },
            );
        // b229_s1: const #14656u : u32
        let b229_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b229_s2: write-reg b229_s1 <= b229_s0
        let b229_s2 = ctx.emitter().write_register(b229_s1.clone(), b229_s0.clone());
        // b229_s3: const #0s : i0
        let b229_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b229_s4: const #5s : i3
        let b229_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b229_s5: read-var u#25890:u32
        let b229_s5 = ctx.emitter().read_variable(fn_state.u_25890.clone());
        // b229_s6: bit-extract b229_s5 b229_s3 b229_s4
        let b229_s6 = ctx
            .emitter()
            .bit_extract(b229_s5.clone(), b229_s3.clone(), b229_s4.clone());
        // b229_s7: cast reint b229_s6 -> u5
        let b229_s7 = ctx
            .emitter()
            .cast(
                b229_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b229_s8: const #5s : i3
        let b229_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b229_s9: const #5s : i3
        let b229_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b229_s10: read-var u#25890:u32
        let b229_s10 = ctx.emitter().read_variable(fn_state.u_25890.clone());
        // b229_s11: bit-extract b229_s10 b229_s8 b229_s9
        let b229_s11 = ctx
            .emitter()
            .bit_extract(b229_s10.clone(), b229_s8.clone(), b229_s9.clone());
        // b229_s12: cast reint b229_s11 -> u5
        let b229_s12 = ctx
            .emitter()
            .cast(
                b229_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b229_s13: const #13s : i4
        let b229_s13 = ctx
            .emitter()
            .constant(
                13isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b229_s14: const #1s : i1
        let b229_s14 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b229_s15: read-var u#25890:u32
        let b229_s15 = ctx.emitter().read_variable(fn_state.u_25890.clone());
        // b229_s16: bit-extract b229_s15 b229_s13 b229_s14
        let b229_s16 = ctx
            .emitter()
            .bit_extract(b229_s15.clone(), b229_s13.clone(), b229_s14.clone());
        // b229_s17: cast reint b229_s16 -> u1
        let b229_s17 = ctx
            .emitter()
            .cast(
                b229_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b229_s18: call decode_autda_aarch64_instrs_integer_pac_autda_dp_1src(b229_s7, b229_s12, b229_s17)
        let b229_s18 = decode_autda_aarch64_instrs_integer_pac_autda_dp_1src(
            ctx,
            b229_s7,
            b229_s12,
            b229_s17,
        );
        // b229_s19: const #15616u : u32
        let b229_s19 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b229_s20: read-reg b229_s19:u1
        let b229_s20 = ctx
            .emitter()
            .read_register(
                b229_s19.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b229_s21: branch b229_s20 block78 block77
        return ctx
            .emitter()
            .branch(
                b229_s20.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_230(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b230_s0: const #10s : i4
        let b230_s0 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b230_s1: read-var u#25883:u32
        let b230_s1 = ctx.emitter().read_variable(fn_state.u_25883.clone());
        // b230_s2: const #6s : i3
        let b230_s2 = ctx
            .emitter()
            .constant(
                6isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b230_s3: bit-extract b230_s1 b230_s0 b230_s2
        let b230_s3 = ctx
            .emitter()
            .bit_extract(b230_s1.clone(), b230_s0.clone(), b230_s2.clone());
        // b230_s4: cast reint b230_s3 -> u6
        let b230_s4 = ctx
            .emitter()
            .cast(
                b230_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
                CastOperationKind::Reinterpret,
            );
        // b230_s5: const #11u : u6
        let b230_s5 = ctx
            .emitter()
            .constant(
                11,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
            );
        // b230_s6: cmp-eq b230_s4 b230_s5
        let b230_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b230_s4.clone(), b230_s5.clone()),
            );
        // b230_s7: branch b230_s6 block231 block25
        return ctx
            .emitter()
            .branch(
                b230_s6.clone(),
                fn_state.block_refs[231usize].clone(),
                fn_state.block_refs[25usize].clone(),
            );
    }
    fn block_231(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b231_s0: const #59s : i6
        let b231_s0 = ctx
            .emitter()
            .constant(
                59isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 6,
                },
            );
        // b231_s1: const #14656u : u32
        let b231_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b231_s2: read-reg b231_s1:i
        let b231_s2 = ctx
            .emitter()
            .read_register(
                b231_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b231_s3: cmp-lt b231_s2 b231_s0
        let b231_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b231_s2.clone(), b231_s0.clone()),
            );
        // b231_s4: not b231_s3
        let b231_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b231_s3.clone()));
        // b231_s5: branch b231_s4 block25 block232
        return ctx
            .emitter()
            .branch(
                b231_s4.clone(),
                fn_state.block_refs[25usize].clone(),
                fn_state.block_refs[232usize].clone(),
            );
    }
    fn block_232(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b232_s0: const #59s : i6
        let b232_s0 = ctx
            .emitter()
            .constant(
                59isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 6,
                },
            );
        // b232_s1: const #14656u : u32
        let b232_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b232_s2: write-reg b232_s1 <= b232_s0
        let b232_s2 = ctx.emitter().write_register(b232_s1.clone(), b232_s0.clone());
        // b232_s3: const #0s : i0
        let b232_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b232_s4: const #5s : i3
        let b232_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b232_s5: read-var u#25883:u32
        let b232_s5 = ctx.emitter().read_variable(fn_state.u_25883.clone());
        // b232_s6: bit-extract b232_s5 b232_s3 b232_s4
        let b232_s6 = ctx
            .emitter()
            .bit_extract(b232_s5.clone(), b232_s3.clone(), b232_s4.clone());
        // b232_s7: cast reint b232_s6 -> u5
        let b232_s7 = ctx
            .emitter()
            .cast(
                b232_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b232_s8: const #5s : i3
        let b232_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b232_s9: const #5s : i3
        let b232_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b232_s10: read-var u#25883:u32
        let b232_s10 = ctx.emitter().read_variable(fn_state.u_25883.clone());
        // b232_s11: bit-extract b232_s10 b232_s8 b232_s9
        let b232_s11 = ctx
            .emitter()
            .bit_extract(b232_s10.clone(), b232_s8.clone(), b232_s9.clone());
        // b232_s12: cast reint b232_s11 -> u5
        let b232_s12 = ctx
            .emitter()
            .cast(
                b232_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b232_s13: const #10s : i4
        let b232_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b232_s14: const #2s : i2
        let b232_s14 = ctx
            .emitter()
            .constant(
                2isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b232_s15: read-var u#25883:u32
        let b232_s15 = ctx.emitter().read_variable(fn_state.u_25883.clone());
        // b232_s16: bit-extract b232_s15 b232_s13 b232_s14
        let b232_s16 = ctx
            .emitter()
            .bit_extract(b232_s15.clone(), b232_s13.clone(), b232_s14.clone());
        // b232_s17: cast reint b232_s16 -> u2
        let b232_s17 = ctx
            .emitter()
            .cast(
                b232_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
                CastOperationKind::Reinterpret,
            );
        // b232_s18: const #16s : i5
        let b232_s18 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b232_s19: const #5s : i3
        let b232_s19 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b232_s20: read-var u#25883:u32
        let b232_s20 = ctx.emitter().read_variable(fn_state.u_25883.clone());
        // b232_s21: bit-extract b232_s20 b232_s18 b232_s19
        let b232_s21 = ctx
            .emitter()
            .bit_extract(b232_s20.clone(), b232_s18.clone(), b232_s19.clone());
        // b232_s22: cast reint b232_s21 -> u5
        let b232_s22 = ctx
            .emitter()
            .cast(
                b232_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b232_s23: const #31s : i5
        let b232_s23 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b232_s24: const #1s : i1
        let b232_s24 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b232_s25: read-var u#25883:u32
        let b232_s25 = ctx.emitter().read_variable(fn_state.u_25883.clone());
        // b232_s26: bit-extract b232_s25 b232_s23 b232_s24
        let b232_s26 = ctx
            .emitter()
            .bit_extract(b232_s25.clone(), b232_s23.clone(), b232_s24.clone());
        // b232_s27: cast reint b232_s26 -> u1
        let b232_s27 = ctx
            .emitter()
            .cast(
                b232_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b232_s28: call decode_rorv_aarch64_instrs_integer_shift_variable(b232_s7, b232_s12, b232_s17, b232_s22, b232_s27)
        let b232_s28 = decode_rorv_aarch64_instrs_integer_shift_variable(
            ctx,
            b232_s7,
            b232_s12,
            b232_s17,
            b232_s22,
            b232_s27,
        );
        // b232_s29: return
        return BlockResult::None;
    }
    fn block_233(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b233_s0: const #10s : i4
        let b233_s0 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b233_s1: read-var u#25876:u32
        let b233_s1 = ctx.emitter().read_variable(fn_state.u_25876.clone());
        // b233_s2: const #6s : i3
        let b233_s2 = ctx
            .emitter()
            .constant(
                6isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b233_s3: bit-extract b233_s1 b233_s0 b233_s2
        let b233_s3 = ctx
            .emitter()
            .bit_extract(b233_s1.clone(), b233_s0.clone(), b233_s2.clone());
        // b233_s4: cast reint b233_s3 -> u6
        let b233_s4 = ctx
            .emitter()
            .cast(
                b233_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
                CastOperationKind::Reinterpret,
            );
        // b233_s5: const #9u : u6
        let b233_s5 = ctx
            .emitter()
            .constant(
                9,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
            );
        // b233_s6: cmp-eq b233_s4 b233_s5
        let b233_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b233_s4.clone(), b233_s5.clone()),
            );
        // b233_s7: branch b233_s6 block234 block24
        return ctx
            .emitter()
            .branch(
                b233_s6.clone(),
                fn_state.block_refs[234usize].clone(),
                fn_state.block_refs[24usize].clone(),
            );
    }
    fn block_234(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b234_s0: const #58s : i6
        let b234_s0 = ctx
            .emitter()
            .constant(
                58isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 6,
                },
            );
        // b234_s1: const #14656u : u32
        let b234_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b234_s2: read-reg b234_s1:i
        let b234_s2 = ctx
            .emitter()
            .read_register(
                b234_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b234_s3: cmp-lt b234_s2 b234_s0
        let b234_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b234_s2.clone(), b234_s0.clone()),
            );
        // b234_s4: not b234_s3
        let b234_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b234_s3.clone()));
        // b234_s5: branch b234_s4 block24 block235
        return ctx
            .emitter()
            .branch(
                b234_s4.clone(),
                fn_state.block_refs[24usize].clone(),
                fn_state.block_refs[235usize].clone(),
            );
    }
    fn block_235(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b235_s0: const #58s : i6
        let b235_s0 = ctx
            .emitter()
            .constant(
                58isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 6,
                },
            );
        // b235_s1: const #14656u : u32
        let b235_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b235_s2: write-reg b235_s1 <= b235_s0
        let b235_s2 = ctx.emitter().write_register(b235_s1.clone(), b235_s0.clone());
        // b235_s3: const #0s : i0
        let b235_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b235_s4: const #5s : i3
        let b235_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b235_s5: read-var u#25876:u32
        let b235_s5 = ctx.emitter().read_variable(fn_state.u_25876.clone());
        // b235_s6: bit-extract b235_s5 b235_s3 b235_s4
        let b235_s6 = ctx
            .emitter()
            .bit_extract(b235_s5.clone(), b235_s3.clone(), b235_s4.clone());
        // b235_s7: cast reint b235_s6 -> u5
        let b235_s7 = ctx
            .emitter()
            .cast(
                b235_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b235_s8: const #5s : i3
        let b235_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b235_s9: const #5s : i3
        let b235_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b235_s10: read-var u#25876:u32
        let b235_s10 = ctx.emitter().read_variable(fn_state.u_25876.clone());
        // b235_s11: bit-extract b235_s10 b235_s8 b235_s9
        let b235_s11 = ctx
            .emitter()
            .bit_extract(b235_s10.clone(), b235_s8.clone(), b235_s9.clone());
        // b235_s12: cast reint b235_s11 -> u5
        let b235_s12 = ctx
            .emitter()
            .cast(
                b235_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b235_s13: const #10s : i4
        let b235_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b235_s14: const #2s : i2
        let b235_s14 = ctx
            .emitter()
            .constant(
                2isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b235_s15: read-var u#25876:u32
        let b235_s15 = ctx.emitter().read_variable(fn_state.u_25876.clone());
        // b235_s16: bit-extract b235_s15 b235_s13 b235_s14
        let b235_s16 = ctx
            .emitter()
            .bit_extract(b235_s15.clone(), b235_s13.clone(), b235_s14.clone());
        // b235_s17: cast reint b235_s16 -> u2
        let b235_s17 = ctx
            .emitter()
            .cast(
                b235_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
                CastOperationKind::Reinterpret,
            );
        // b235_s18: const #16s : i5
        let b235_s18 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b235_s19: const #5s : i3
        let b235_s19 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b235_s20: read-var u#25876:u32
        let b235_s20 = ctx.emitter().read_variable(fn_state.u_25876.clone());
        // b235_s21: bit-extract b235_s20 b235_s18 b235_s19
        let b235_s21 = ctx
            .emitter()
            .bit_extract(b235_s20.clone(), b235_s18.clone(), b235_s19.clone());
        // b235_s22: cast reint b235_s21 -> u5
        let b235_s22 = ctx
            .emitter()
            .cast(
                b235_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b235_s23: const #31s : i5
        let b235_s23 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b235_s24: const #1s : i1
        let b235_s24 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b235_s25: read-var u#25876:u32
        let b235_s25 = ctx.emitter().read_variable(fn_state.u_25876.clone());
        // b235_s26: bit-extract b235_s25 b235_s23 b235_s24
        let b235_s26 = ctx
            .emitter()
            .bit_extract(b235_s25.clone(), b235_s23.clone(), b235_s24.clone());
        // b235_s27: cast reint b235_s26 -> u1
        let b235_s27 = ctx
            .emitter()
            .cast(
                b235_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b235_s28: call decode_lsrv_aarch64_instrs_integer_shift_variable(b235_s7, b235_s12, b235_s17, b235_s22, b235_s27)
        let b235_s28 = decode_lsrv_aarch64_instrs_integer_shift_variable(
            ctx,
            b235_s7,
            b235_s12,
            b235_s17,
            b235_s22,
            b235_s27,
        );
        // b235_s29: return
        return BlockResult::None;
    }
    fn block_236(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b236_s0: const #10s : i4
        let b236_s0 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b236_s1: read-var u#25869:u32
        let b236_s1 = ctx.emitter().read_variable(fn_state.u_25869.clone());
        // b236_s2: const #6s : i3
        let b236_s2 = ctx
            .emitter()
            .constant(
                6isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b236_s3: bit-extract b236_s1 b236_s0 b236_s2
        let b236_s3 = ctx
            .emitter()
            .bit_extract(b236_s1.clone(), b236_s0.clone(), b236_s2.clone());
        // b236_s4: cast reint b236_s3 -> u6
        let b236_s4 = ctx
            .emitter()
            .cast(
                b236_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
                CastOperationKind::Reinterpret,
            );
        // b236_s5: const #8u : u6
        let b236_s5 = ctx
            .emitter()
            .constant(
                8,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
            );
        // b236_s6: cmp-eq b236_s4 b236_s5
        let b236_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b236_s4.clone(), b236_s5.clone()),
            );
        // b236_s7: branch b236_s6 block237 block23
        return ctx
            .emitter()
            .branch(
                b236_s6.clone(),
                fn_state.block_refs[237usize].clone(),
                fn_state.block_refs[23usize].clone(),
            );
    }
    fn block_237(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b237_s0: const #57s : i6
        let b237_s0 = ctx
            .emitter()
            .constant(
                57isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 6,
                },
            );
        // b237_s1: const #14656u : u32
        let b237_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b237_s2: read-reg b237_s1:i
        let b237_s2 = ctx
            .emitter()
            .read_register(
                b237_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b237_s3: cmp-lt b237_s2 b237_s0
        let b237_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b237_s2.clone(), b237_s0.clone()),
            );
        // b237_s4: not b237_s3
        let b237_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b237_s3.clone()));
        // b237_s5: branch b237_s4 block23 block238
        return ctx
            .emitter()
            .branch(
                b237_s4.clone(),
                fn_state.block_refs[23usize].clone(),
                fn_state.block_refs[238usize].clone(),
            );
    }
    fn block_238(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b238_s0: const #57s : i6
        let b238_s0 = ctx
            .emitter()
            .constant(
                57isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 6,
                },
            );
        // b238_s1: const #14656u : u32
        let b238_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b238_s2: write-reg b238_s1 <= b238_s0
        let b238_s2 = ctx.emitter().write_register(b238_s1.clone(), b238_s0.clone());
        // b238_s3: const #0s : i0
        let b238_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b238_s4: const #5s : i3
        let b238_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b238_s5: read-var u#25869:u32
        let b238_s5 = ctx.emitter().read_variable(fn_state.u_25869.clone());
        // b238_s6: bit-extract b238_s5 b238_s3 b238_s4
        let b238_s6 = ctx
            .emitter()
            .bit_extract(b238_s5.clone(), b238_s3.clone(), b238_s4.clone());
        // b238_s7: cast reint b238_s6 -> u5
        let b238_s7 = ctx
            .emitter()
            .cast(
                b238_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b238_s8: const #5s : i3
        let b238_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b238_s9: const #5s : i3
        let b238_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b238_s10: read-var u#25869:u32
        let b238_s10 = ctx.emitter().read_variable(fn_state.u_25869.clone());
        // b238_s11: bit-extract b238_s10 b238_s8 b238_s9
        let b238_s11 = ctx
            .emitter()
            .bit_extract(b238_s10.clone(), b238_s8.clone(), b238_s9.clone());
        // b238_s12: cast reint b238_s11 -> u5
        let b238_s12 = ctx
            .emitter()
            .cast(
                b238_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b238_s13: const #10s : i4
        let b238_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b238_s14: const #2s : i2
        let b238_s14 = ctx
            .emitter()
            .constant(
                2isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b238_s15: read-var u#25869:u32
        let b238_s15 = ctx.emitter().read_variable(fn_state.u_25869.clone());
        // b238_s16: bit-extract b238_s15 b238_s13 b238_s14
        let b238_s16 = ctx
            .emitter()
            .bit_extract(b238_s15.clone(), b238_s13.clone(), b238_s14.clone());
        // b238_s17: cast reint b238_s16 -> u2
        let b238_s17 = ctx
            .emitter()
            .cast(
                b238_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
                CastOperationKind::Reinterpret,
            );
        // b238_s18: const #16s : i5
        let b238_s18 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b238_s19: const #5s : i3
        let b238_s19 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b238_s20: read-var u#25869:u32
        let b238_s20 = ctx.emitter().read_variable(fn_state.u_25869.clone());
        // b238_s21: bit-extract b238_s20 b238_s18 b238_s19
        let b238_s21 = ctx
            .emitter()
            .bit_extract(b238_s20.clone(), b238_s18.clone(), b238_s19.clone());
        // b238_s22: cast reint b238_s21 -> u5
        let b238_s22 = ctx
            .emitter()
            .cast(
                b238_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b238_s23: const #31s : i5
        let b238_s23 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b238_s24: const #1s : i1
        let b238_s24 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b238_s25: read-var u#25869:u32
        let b238_s25 = ctx.emitter().read_variable(fn_state.u_25869.clone());
        // b238_s26: bit-extract b238_s25 b238_s23 b238_s24
        let b238_s26 = ctx
            .emitter()
            .bit_extract(b238_s25.clone(), b238_s23.clone(), b238_s24.clone());
        // b238_s27: cast reint b238_s26 -> u1
        let b238_s27 = ctx
            .emitter()
            .cast(
                b238_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b238_s28: call decode_lslv_aarch64_instrs_integer_shift_variable(b238_s7, b238_s12, b238_s17, b238_s22, b238_s27)
        let b238_s28 = decode_lslv_aarch64_instrs_integer_shift_variable(
            ctx,
            b238_s7,
            b238_s12,
            b238_s17,
            b238_s22,
            b238_s27,
        );
        // b238_s29: return
        return BlockResult::None;
    }
    fn block_239(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b239_s0: const #10s : i4
        let b239_s0 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b239_s1: read-var u#25863:u32
        let b239_s1 = ctx.emitter().read_variable(fn_state.u_25863.clone());
        // b239_s2: const #6s : i3
        let b239_s2 = ctx
            .emitter()
            .constant(
                6isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b239_s3: bit-extract b239_s1 b239_s0 b239_s2
        let b239_s3 = ctx
            .emitter()
            .bit_extract(b239_s1.clone(), b239_s0.clone(), b239_s2.clone());
        // b239_s4: cast reint b239_s3 -> u6
        let b239_s4 = ctx
            .emitter()
            .cast(
                b239_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
                CastOperationKind::Reinterpret,
            );
        // b239_s5: const #10u : u6
        let b239_s5 = ctx
            .emitter()
            .constant(
                10,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
            );
        // b239_s6: cmp-eq b239_s4 b239_s5
        let b239_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b239_s4.clone(), b239_s5.clone()),
            );
        // b239_s7: branch b239_s6 block240 block22
        return ctx
            .emitter()
            .branch(
                b239_s6.clone(),
                fn_state.block_refs[240usize].clone(),
                fn_state.block_refs[22usize].clone(),
            );
    }
    fn block_240(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b240_s0: const #56s : i6
        let b240_s0 = ctx
            .emitter()
            .constant(
                56isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 6,
                },
            );
        // b240_s1: const #14656u : u32
        let b240_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b240_s2: read-reg b240_s1:i
        let b240_s2 = ctx
            .emitter()
            .read_register(
                b240_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b240_s3: cmp-lt b240_s2 b240_s0
        let b240_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b240_s2.clone(), b240_s0.clone()),
            );
        // b240_s4: not b240_s3
        let b240_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b240_s3.clone()));
        // b240_s5: branch b240_s4 block22 block241
        return ctx
            .emitter()
            .branch(
                b240_s4.clone(),
                fn_state.block_refs[22usize].clone(),
                fn_state.block_refs[241usize].clone(),
            );
    }
    fn block_241(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b241_s0: const #56s : i6
        let b241_s0 = ctx
            .emitter()
            .constant(
                56isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 6,
                },
            );
        // b241_s1: const #14656u : u32
        let b241_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b241_s2: write-reg b241_s1 <= b241_s0
        let b241_s2 = ctx.emitter().write_register(b241_s1.clone(), b241_s0.clone());
        // b241_s3: const #0s : i0
        let b241_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b241_s4: const #5s : i3
        let b241_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b241_s5: read-var u#25863:u32
        let b241_s5 = ctx.emitter().read_variable(fn_state.u_25863.clone());
        // b241_s6: bit-extract b241_s5 b241_s3 b241_s4
        let b241_s6 = ctx
            .emitter()
            .bit_extract(b241_s5.clone(), b241_s3.clone(), b241_s4.clone());
        // b241_s7: cast reint b241_s6 -> u5
        let b241_s7 = ctx
            .emitter()
            .cast(
                b241_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b241_s8: const #5s : i3
        let b241_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b241_s9: const #5s : i3
        let b241_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b241_s10: read-var u#25863:u32
        let b241_s10 = ctx.emitter().read_variable(fn_state.u_25863.clone());
        // b241_s11: bit-extract b241_s10 b241_s8 b241_s9
        let b241_s11 = ctx
            .emitter()
            .bit_extract(b241_s10.clone(), b241_s8.clone(), b241_s9.clone());
        // b241_s12: cast reint b241_s11 -> u5
        let b241_s12 = ctx
            .emitter()
            .cast(
                b241_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b241_s13: const #10s : i4
        let b241_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b241_s14: const #2s : i2
        let b241_s14 = ctx
            .emitter()
            .constant(
                2isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b241_s15: read-var u#25863:u32
        let b241_s15 = ctx.emitter().read_variable(fn_state.u_25863.clone());
        // b241_s16: bit-extract b241_s15 b241_s13 b241_s14
        let b241_s16 = ctx
            .emitter()
            .bit_extract(b241_s15.clone(), b241_s13.clone(), b241_s14.clone());
        // b241_s17: cast reint b241_s16 -> u2
        let b241_s17 = ctx
            .emitter()
            .cast(
                b241_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
                CastOperationKind::Reinterpret,
            );
        // b241_s18: const #16s : i5
        let b241_s18 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b241_s19: const #5s : i3
        let b241_s19 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b241_s20: read-var u#25863:u32
        let b241_s20 = ctx.emitter().read_variable(fn_state.u_25863.clone());
        // b241_s21: bit-extract b241_s20 b241_s18 b241_s19
        let b241_s21 = ctx
            .emitter()
            .bit_extract(b241_s20.clone(), b241_s18.clone(), b241_s19.clone());
        // b241_s22: cast reint b241_s21 -> u5
        let b241_s22 = ctx
            .emitter()
            .cast(
                b241_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b241_s23: const #31s : i5
        let b241_s23 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b241_s24: const #1s : i1
        let b241_s24 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b241_s25: read-var u#25863:u32
        let b241_s25 = ctx.emitter().read_variable(fn_state.u_25863.clone());
        // b241_s26: bit-extract b241_s25 b241_s23 b241_s24
        let b241_s26 = ctx
            .emitter()
            .bit_extract(b241_s25.clone(), b241_s23.clone(), b241_s24.clone());
        // b241_s27: cast reint b241_s26 -> u1
        let b241_s27 = ctx
            .emitter()
            .cast(
                b241_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b241_s28: call decode_asrv_aarch64_instrs_integer_shift_variable(b241_s7, b241_s12, b241_s17, b241_s22, b241_s27)
        let b241_s28 = decode_asrv_aarch64_instrs_integer_shift_variable(
            ctx,
            b241_s7,
            b241_s12,
            b241_s17,
            b241_s22,
            b241_s27,
        );
        // b241_s29: return
        return BlockResult::None;
    }
    fn block_242(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b242_s0: const #21s : i5
        let b242_s0 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b242_s1: read-var u#25853:u32
        let b242_s1 = ctx.emitter().read_variable(fn_state.u_25853.clone());
        // b242_s2: const #1s : i0
        let b242_s2 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b242_s3: bit-extract b242_s1 b242_s0 b242_s2
        let b242_s3 = ctx
            .emitter()
            .bit_extract(b242_s1.clone(), b242_s0.clone(), b242_s2.clone());
        // b242_s4: cast reint b242_s3 -> u1
        let b242_s4 = ctx
            .emitter()
            .cast(
                b242_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b242_s5: const #0u : u1
        let b242_s5 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b242_s6: cmp-eq b242_s4 b242_s5
        let b242_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b242_s4.clone(), b242_s5.clone()),
            );
        // b242_s7: branch b242_s6 block243 block21
        return ctx
            .emitter()
            .branch(
                b242_s6.clone(),
                fn_state.block_refs[243usize].clone(),
                fn_state.block_refs[21usize].clone(),
            );
    }
    fn block_243(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b243_s0: const #55s : i6
        let b243_s0 = ctx
            .emitter()
            .constant(
                55isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 6,
                },
            );
        // b243_s1: const #14656u : u32
        let b243_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b243_s2: read-reg b243_s1:i
        let b243_s2 = ctx
            .emitter()
            .read_register(
                b243_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b243_s3: cmp-lt b243_s2 b243_s0
        let b243_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b243_s2.clone(), b243_s0.clone()),
            );
        // b243_s4: not b243_s3
        let b243_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b243_s3.clone()));
        // b243_s5: branch b243_s4 block21 block244
        return ctx
            .emitter()
            .branch(
                b243_s4.clone(),
                fn_state.block_refs[21usize].clone(),
                fn_state.block_refs[244usize].clone(),
            );
    }
    fn block_244(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b244_s0: const #55s : i6
        let b244_s0 = ctx
            .emitter()
            .constant(
                55isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 6,
                },
            );
        // b244_s1: const #14656u : u32
        let b244_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b244_s2: write-reg b244_s1 <= b244_s0
        let b244_s2 = ctx.emitter().write_register(b244_s1.clone(), b244_s0.clone());
        // b244_s3: const #0s : i0
        let b244_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b244_s4: const #5s : i3
        let b244_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b244_s5: read-var u#25853:u32
        let b244_s5 = ctx.emitter().read_variable(fn_state.u_25853.clone());
        // b244_s6: bit-extract b244_s5 b244_s3 b244_s4
        let b244_s6 = ctx
            .emitter()
            .bit_extract(b244_s5.clone(), b244_s3.clone(), b244_s4.clone());
        // b244_s7: cast reint b244_s6 -> u5
        let b244_s7 = ctx
            .emitter()
            .cast(
                b244_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b244_s8: const #5s : i3
        let b244_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b244_s9: const #5s : i3
        let b244_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b244_s10: read-var u#25853:u32
        let b244_s10 = ctx.emitter().read_variable(fn_state.u_25853.clone());
        // b244_s11: bit-extract b244_s10 b244_s8 b244_s9
        let b244_s11 = ctx
            .emitter()
            .bit_extract(b244_s10.clone(), b244_s8.clone(), b244_s9.clone());
        // b244_s12: cast reint b244_s11 -> u5
        let b244_s12 = ctx
            .emitter()
            .cast(
                b244_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b244_s13: const #10s : i4
        let b244_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b244_s14: const #6s : i3
        let b244_s14 = ctx
            .emitter()
            .constant(
                6isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b244_s15: read-var u#25853:u32
        let b244_s15 = ctx.emitter().read_variable(fn_state.u_25853.clone());
        // b244_s16: bit-extract b244_s15 b244_s13 b244_s14
        let b244_s16 = ctx
            .emitter()
            .bit_extract(b244_s15.clone(), b244_s13.clone(), b244_s14.clone());
        // b244_s17: cast reint b244_s16 -> u6
        let b244_s17 = ctx
            .emitter()
            .cast(
                b244_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
                CastOperationKind::Reinterpret,
            );
        // b244_s18: const #16s : i5
        let b244_s18 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b244_s19: const #5s : i3
        let b244_s19 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b244_s20: read-var u#25853:u32
        let b244_s20 = ctx.emitter().read_variable(fn_state.u_25853.clone());
        // b244_s21: bit-extract b244_s20 b244_s18 b244_s19
        let b244_s21 = ctx
            .emitter()
            .bit_extract(b244_s20.clone(), b244_s18.clone(), b244_s19.clone());
        // b244_s22: cast reint b244_s21 -> u5
        let b244_s22 = ctx
            .emitter()
            .cast(
                b244_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b244_s23: const #21s : i5
        let b244_s23 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b244_s24: const #1s : i1
        let b244_s24 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b244_s25: read-var u#25853:u32
        let b244_s25 = ctx.emitter().read_variable(fn_state.u_25853.clone());
        // b244_s26: bit-extract b244_s25 b244_s23 b244_s24
        let b244_s26 = ctx
            .emitter()
            .bit_extract(b244_s25.clone(), b244_s23.clone(), b244_s24.clone());
        // b244_s27: cast reint b244_s26 -> u1
        let b244_s27 = ctx
            .emitter()
            .cast(
                b244_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b244_s28: const #22s : i5
        let b244_s28 = ctx
            .emitter()
            .constant(
                22isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b244_s29: const #2s : i2
        let b244_s29 = ctx
            .emitter()
            .constant(
                2isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b244_s30: read-var u#25853:u32
        let b244_s30 = ctx.emitter().read_variable(fn_state.u_25853.clone());
        // b244_s31: bit-extract b244_s30 b244_s28 b244_s29
        let b244_s31 = ctx
            .emitter()
            .bit_extract(b244_s30.clone(), b244_s28.clone(), b244_s29.clone());
        // b244_s32: cast reint b244_s31 -> u2
        let b244_s32 = ctx
            .emitter()
            .cast(
                b244_s31.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
                CastOperationKind::Reinterpret,
            );
        // b244_s33: const #29s : i5
        let b244_s33 = ctx
            .emitter()
            .constant(
                29isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b244_s34: const #2s : i2
        let b244_s34 = ctx
            .emitter()
            .constant(
                2isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b244_s35: read-var u#25853:u32
        let b244_s35 = ctx.emitter().read_variable(fn_state.u_25853.clone());
        // b244_s36: bit-extract b244_s35 b244_s33 b244_s34
        let b244_s36 = ctx
            .emitter()
            .bit_extract(b244_s35.clone(), b244_s33.clone(), b244_s34.clone());
        // b244_s37: cast reint b244_s36 -> u2
        let b244_s37 = ctx
            .emitter()
            .cast(
                b244_s36.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
                CastOperationKind::Reinterpret,
            );
        // b244_s38: const #31s : i5
        let b244_s38 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b244_s39: const #1s : i1
        let b244_s39 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b244_s40: read-var u#25853:u32
        let b244_s40 = ctx.emitter().read_variable(fn_state.u_25853.clone());
        // b244_s41: bit-extract b244_s40 b244_s38 b244_s39
        let b244_s41 = ctx
            .emitter()
            .bit_extract(b244_s40.clone(), b244_s38.clone(), b244_s39.clone());
        // b244_s42: cast reint b244_s41 -> u1
        let b244_s42 = ctx
            .emitter()
            .cast(
                b244_s41.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b244_s43: call decode_orr_log_shift_aarch64_instrs_integer_logical_shiftedreg(b244_s7, b244_s12, b244_s17, b244_s22, b244_s27, b244_s32, b244_s37, b244_s42)
        let b244_s43 = decode_orr_log_shift_aarch64_instrs_integer_logical_shiftedreg(
            ctx,
            b244_s7,
            b244_s12,
            b244_s17,
            b244_s22,
            b244_s27,
            b244_s32,
            b244_s37,
            b244_s42,
        );
        // b244_s44: const #15616u : u32
        let b244_s44 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b244_s45: read-reg b244_s44:u1
        let b244_s45 = ctx
            .emitter()
            .read_register(
                b244_s44.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b244_s46: branch b244_s45 block78 block77
        return ctx
            .emitter()
            .branch(
                b244_s45.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_245(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b245_s0: const #21s : i5
        let b245_s0 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b245_s1: read-var u#25843:u32
        let b245_s1 = ctx.emitter().read_variable(fn_state.u_25843.clone());
        // b245_s2: const #1s : i0
        let b245_s2 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b245_s3: bit-extract b245_s1 b245_s0 b245_s2
        let b245_s3 = ctx
            .emitter()
            .bit_extract(b245_s1.clone(), b245_s0.clone(), b245_s2.clone());
        // b245_s4: cast reint b245_s3 -> u1
        let b245_s4 = ctx
            .emitter()
            .cast(
                b245_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b245_s5: const #1u : u1
        let b245_s5 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b245_s6: cmp-eq b245_s4 b245_s5
        let b245_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b245_s4.clone(), b245_s5.clone()),
            );
        // b245_s7: branch b245_s6 block246 block20
        return ctx
            .emitter()
            .branch(
                b245_s6.clone(),
                fn_state.block_refs[246usize].clone(),
                fn_state.block_refs[20usize].clone(),
            );
    }
    fn block_246(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b246_s0: const #54s : i6
        let b246_s0 = ctx
            .emitter()
            .constant(
                54isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 6,
                },
            );
        // b246_s1: const #14656u : u32
        let b246_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b246_s2: read-reg b246_s1:i
        let b246_s2 = ctx
            .emitter()
            .read_register(
                b246_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b246_s3: cmp-lt b246_s2 b246_s0
        let b246_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b246_s2.clone(), b246_s0.clone()),
            );
        // b246_s4: not b246_s3
        let b246_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b246_s3.clone()));
        // b246_s5: branch b246_s4 block20 block247
        return ctx
            .emitter()
            .branch(
                b246_s4.clone(),
                fn_state.block_refs[20usize].clone(),
                fn_state.block_refs[247usize].clone(),
            );
    }
    fn block_247(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b247_s0: const #54s : i6
        let b247_s0 = ctx
            .emitter()
            .constant(
                54isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 6,
                },
            );
        // b247_s1: const #14656u : u32
        let b247_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b247_s2: write-reg b247_s1 <= b247_s0
        let b247_s2 = ctx.emitter().write_register(b247_s1.clone(), b247_s0.clone());
        // b247_s3: const #0s : i0
        let b247_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b247_s4: const #5s : i3
        let b247_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b247_s5: read-var u#25843:u32
        let b247_s5 = ctx.emitter().read_variable(fn_state.u_25843.clone());
        // b247_s6: bit-extract b247_s5 b247_s3 b247_s4
        let b247_s6 = ctx
            .emitter()
            .bit_extract(b247_s5.clone(), b247_s3.clone(), b247_s4.clone());
        // b247_s7: cast reint b247_s6 -> u5
        let b247_s7 = ctx
            .emitter()
            .cast(
                b247_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b247_s8: const #5s : i3
        let b247_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b247_s9: const #5s : i3
        let b247_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b247_s10: read-var u#25843:u32
        let b247_s10 = ctx.emitter().read_variable(fn_state.u_25843.clone());
        // b247_s11: bit-extract b247_s10 b247_s8 b247_s9
        let b247_s11 = ctx
            .emitter()
            .bit_extract(b247_s10.clone(), b247_s8.clone(), b247_s9.clone());
        // b247_s12: cast reint b247_s11 -> u5
        let b247_s12 = ctx
            .emitter()
            .cast(
                b247_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b247_s13: const #10s : i4
        let b247_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b247_s14: const #6s : i3
        let b247_s14 = ctx
            .emitter()
            .constant(
                6isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b247_s15: read-var u#25843:u32
        let b247_s15 = ctx.emitter().read_variable(fn_state.u_25843.clone());
        // b247_s16: bit-extract b247_s15 b247_s13 b247_s14
        let b247_s16 = ctx
            .emitter()
            .bit_extract(b247_s15.clone(), b247_s13.clone(), b247_s14.clone());
        // b247_s17: cast reint b247_s16 -> u6
        let b247_s17 = ctx
            .emitter()
            .cast(
                b247_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
                CastOperationKind::Reinterpret,
            );
        // b247_s18: const #16s : i5
        let b247_s18 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b247_s19: const #5s : i3
        let b247_s19 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b247_s20: read-var u#25843:u32
        let b247_s20 = ctx.emitter().read_variable(fn_state.u_25843.clone());
        // b247_s21: bit-extract b247_s20 b247_s18 b247_s19
        let b247_s21 = ctx
            .emitter()
            .bit_extract(b247_s20.clone(), b247_s18.clone(), b247_s19.clone());
        // b247_s22: cast reint b247_s21 -> u5
        let b247_s22 = ctx
            .emitter()
            .cast(
                b247_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b247_s23: const #21s : i5
        let b247_s23 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b247_s24: const #1s : i1
        let b247_s24 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b247_s25: read-var u#25843:u32
        let b247_s25 = ctx.emitter().read_variable(fn_state.u_25843.clone());
        // b247_s26: bit-extract b247_s25 b247_s23 b247_s24
        let b247_s26 = ctx
            .emitter()
            .bit_extract(b247_s25.clone(), b247_s23.clone(), b247_s24.clone());
        // b247_s27: cast reint b247_s26 -> u1
        let b247_s27 = ctx
            .emitter()
            .cast(
                b247_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b247_s28: const #22s : i5
        let b247_s28 = ctx
            .emitter()
            .constant(
                22isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b247_s29: const #2s : i2
        let b247_s29 = ctx
            .emitter()
            .constant(
                2isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b247_s30: read-var u#25843:u32
        let b247_s30 = ctx.emitter().read_variable(fn_state.u_25843.clone());
        // b247_s31: bit-extract b247_s30 b247_s28 b247_s29
        let b247_s31 = ctx
            .emitter()
            .bit_extract(b247_s30.clone(), b247_s28.clone(), b247_s29.clone());
        // b247_s32: cast reint b247_s31 -> u2
        let b247_s32 = ctx
            .emitter()
            .cast(
                b247_s31.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
                CastOperationKind::Reinterpret,
            );
        // b247_s33: const #29s : i5
        let b247_s33 = ctx
            .emitter()
            .constant(
                29isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b247_s34: const #2s : i2
        let b247_s34 = ctx
            .emitter()
            .constant(
                2isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b247_s35: read-var u#25843:u32
        let b247_s35 = ctx.emitter().read_variable(fn_state.u_25843.clone());
        // b247_s36: bit-extract b247_s35 b247_s33 b247_s34
        let b247_s36 = ctx
            .emitter()
            .bit_extract(b247_s35.clone(), b247_s33.clone(), b247_s34.clone());
        // b247_s37: cast reint b247_s36 -> u2
        let b247_s37 = ctx
            .emitter()
            .cast(
                b247_s36.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
                CastOperationKind::Reinterpret,
            );
        // b247_s38: const #31s : i5
        let b247_s38 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b247_s39: const #1s : i1
        let b247_s39 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b247_s40: read-var u#25843:u32
        let b247_s40 = ctx.emitter().read_variable(fn_state.u_25843.clone());
        // b247_s41: bit-extract b247_s40 b247_s38 b247_s39
        let b247_s41 = ctx
            .emitter()
            .bit_extract(b247_s40.clone(), b247_s38.clone(), b247_s39.clone());
        // b247_s42: cast reint b247_s41 -> u1
        let b247_s42 = ctx
            .emitter()
            .cast(
                b247_s41.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b247_s43: call decode_orn_log_shift_aarch64_instrs_integer_logical_shiftedreg(b247_s7, b247_s12, b247_s17, b247_s22, b247_s27, b247_s32, b247_s37, b247_s42)
        let b247_s43 = decode_orn_log_shift_aarch64_instrs_integer_logical_shiftedreg(
            ctx,
            b247_s7,
            b247_s12,
            b247_s17,
            b247_s22,
            b247_s27,
            b247_s32,
            b247_s37,
            b247_s42,
        );
        // b247_s44: const #15616u : u32
        let b247_s44 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b247_s45: read-reg b247_s44:u1
        let b247_s45 = ctx
            .emitter()
            .read_register(
                b247_s44.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b247_s46: branch b247_s45 block78 block77
        return ctx
            .emitter()
            .branch(
                b247_s45.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_248(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b248_s0: const #21s : i5
        let b248_s0 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b248_s1: read-var u#25833:u32
        let b248_s1 = ctx.emitter().read_variable(fn_state.u_25833.clone());
        // b248_s2: const #1s : i0
        let b248_s2 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b248_s3: bit-extract b248_s1 b248_s0 b248_s2
        let b248_s3 = ctx
            .emitter()
            .bit_extract(b248_s1.clone(), b248_s0.clone(), b248_s2.clone());
        // b248_s4: cast reint b248_s3 -> u1
        let b248_s4 = ctx
            .emitter()
            .cast(
                b248_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b248_s5: const #0u : u1
        let b248_s5 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b248_s6: cmp-eq b248_s4 b248_s5
        let b248_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b248_s4.clone(), b248_s5.clone()),
            );
        // b248_s7: branch b248_s6 block249 block19
        return ctx
            .emitter()
            .branch(
                b248_s6.clone(),
                fn_state.block_refs[249usize].clone(),
                fn_state.block_refs[19usize].clone(),
            );
    }
    fn block_249(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b249_s0: const #53s : i6
        let b249_s0 = ctx
            .emitter()
            .constant(
                53isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 6,
                },
            );
        // b249_s1: const #14656u : u32
        let b249_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b249_s2: read-reg b249_s1:i
        let b249_s2 = ctx
            .emitter()
            .read_register(
                b249_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b249_s3: cmp-lt b249_s2 b249_s0
        let b249_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b249_s2.clone(), b249_s0.clone()),
            );
        // b249_s4: not b249_s3
        let b249_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b249_s3.clone()));
        // b249_s5: branch b249_s4 block19 block250
        return ctx
            .emitter()
            .branch(
                b249_s4.clone(),
                fn_state.block_refs[19usize].clone(),
                fn_state.block_refs[250usize].clone(),
            );
    }
    fn block_250(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b250_s0: const #53s : i6
        let b250_s0 = ctx
            .emitter()
            .constant(
                53isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 6,
                },
            );
        // b250_s1: const #14656u : u32
        let b250_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b250_s2: write-reg b250_s1 <= b250_s0
        let b250_s2 = ctx.emitter().write_register(b250_s1.clone(), b250_s0.clone());
        // b250_s3: const #0s : i0
        let b250_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b250_s4: const #5s : i3
        let b250_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b250_s5: read-var u#25833:u32
        let b250_s5 = ctx.emitter().read_variable(fn_state.u_25833.clone());
        // b250_s6: bit-extract b250_s5 b250_s3 b250_s4
        let b250_s6 = ctx
            .emitter()
            .bit_extract(b250_s5.clone(), b250_s3.clone(), b250_s4.clone());
        // b250_s7: cast reint b250_s6 -> u5
        let b250_s7 = ctx
            .emitter()
            .cast(
                b250_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b250_s8: const #5s : i3
        let b250_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b250_s9: const #5s : i3
        let b250_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b250_s10: read-var u#25833:u32
        let b250_s10 = ctx.emitter().read_variable(fn_state.u_25833.clone());
        // b250_s11: bit-extract b250_s10 b250_s8 b250_s9
        let b250_s11 = ctx
            .emitter()
            .bit_extract(b250_s10.clone(), b250_s8.clone(), b250_s9.clone());
        // b250_s12: cast reint b250_s11 -> u5
        let b250_s12 = ctx
            .emitter()
            .cast(
                b250_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b250_s13: const #10s : i4
        let b250_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b250_s14: const #6s : i3
        let b250_s14 = ctx
            .emitter()
            .constant(
                6isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b250_s15: read-var u#25833:u32
        let b250_s15 = ctx.emitter().read_variable(fn_state.u_25833.clone());
        // b250_s16: bit-extract b250_s15 b250_s13 b250_s14
        let b250_s16 = ctx
            .emitter()
            .bit_extract(b250_s15.clone(), b250_s13.clone(), b250_s14.clone());
        // b250_s17: cast reint b250_s16 -> u6
        let b250_s17 = ctx
            .emitter()
            .cast(
                b250_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
                CastOperationKind::Reinterpret,
            );
        // b250_s18: const #16s : i5
        let b250_s18 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b250_s19: const #5s : i3
        let b250_s19 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b250_s20: read-var u#25833:u32
        let b250_s20 = ctx.emitter().read_variable(fn_state.u_25833.clone());
        // b250_s21: bit-extract b250_s20 b250_s18 b250_s19
        let b250_s21 = ctx
            .emitter()
            .bit_extract(b250_s20.clone(), b250_s18.clone(), b250_s19.clone());
        // b250_s22: cast reint b250_s21 -> u5
        let b250_s22 = ctx
            .emitter()
            .cast(
                b250_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b250_s23: const #21s : i5
        let b250_s23 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b250_s24: const #1s : i1
        let b250_s24 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b250_s25: read-var u#25833:u32
        let b250_s25 = ctx.emitter().read_variable(fn_state.u_25833.clone());
        // b250_s26: bit-extract b250_s25 b250_s23 b250_s24
        let b250_s26 = ctx
            .emitter()
            .bit_extract(b250_s25.clone(), b250_s23.clone(), b250_s24.clone());
        // b250_s27: cast reint b250_s26 -> u1
        let b250_s27 = ctx
            .emitter()
            .cast(
                b250_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b250_s28: const #22s : i5
        let b250_s28 = ctx
            .emitter()
            .constant(
                22isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b250_s29: const #2s : i2
        let b250_s29 = ctx
            .emitter()
            .constant(
                2isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b250_s30: read-var u#25833:u32
        let b250_s30 = ctx.emitter().read_variable(fn_state.u_25833.clone());
        // b250_s31: bit-extract b250_s30 b250_s28 b250_s29
        let b250_s31 = ctx
            .emitter()
            .bit_extract(b250_s30.clone(), b250_s28.clone(), b250_s29.clone());
        // b250_s32: cast reint b250_s31 -> u2
        let b250_s32 = ctx
            .emitter()
            .cast(
                b250_s31.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
                CastOperationKind::Reinterpret,
            );
        // b250_s33: const #29s : i5
        let b250_s33 = ctx
            .emitter()
            .constant(
                29isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b250_s34: const #2s : i2
        let b250_s34 = ctx
            .emitter()
            .constant(
                2isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b250_s35: read-var u#25833:u32
        let b250_s35 = ctx.emitter().read_variable(fn_state.u_25833.clone());
        // b250_s36: bit-extract b250_s35 b250_s33 b250_s34
        let b250_s36 = ctx
            .emitter()
            .bit_extract(b250_s35.clone(), b250_s33.clone(), b250_s34.clone());
        // b250_s37: cast reint b250_s36 -> u2
        let b250_s37 = ctx
            .emitter()
            .cast(
                b250_s36.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
                CastOperationKind::Reinterpret,
            );
        // b250_s38: const #31s : i5
        let b250_s38 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b250_s39: const #1s : i1
        let b250_s39 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b250_s40: read-var u#25833:u32
        let b250_s40 = ctx.emitter().read_variable(fn_state.u_25833.clone());
        // b250_s41: bit-extract b250_s40 b250_s38 b250_s39
        let b250_s41 = ctx
            .emitter()
            .bit_extract(b250_s40.clone(), b250_s38.clone(), b250_s39.clone());
        // b250_s42: cast reint b250_s41 -> u1
        let b250_s42 = ctx
            .emitter()
            .cast(
                b250_s41.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b250_s43: call decode_eor_log_shift_aarch64_instrs_integer_logical_shiftedreg(b250_s7, b250_s12, b250_s17, b250_s22, b250_s27, b250_s32, b250_s37, b250_s42)
        let b250_s43 = decode_eor_log_shift_aarch64_instrs_integer_logical_shiftedreg(
            ctx,
            b250_s7,
            b250_s12,
            b250_s17,
            b250_s22,
            b250_s27,
            b250_s32,
            b250_s37,
            b250_s42,
        );
        // b250_s44: const #15616u : u32
        let b250_s44 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b250_s45: read-reg b250_s44:u1
        let b250_s45 = ctx
            .emitter()
            .read_register(
                b250_s44.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b250_s46: branch b250_s45 block78 block77
        return ctx
            .emitter()
            .branch(
                b250_s45.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_251(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b251_s0: const #21s : i5
        let b251_s0 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b251_s1: read-var u#25823:u32
        let b251_s1 = ctx.emitter().read_variable(fn_state.u_25823.clone());
        // b251_s2: const #1s : i0
        let b251_s2 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b251_s3: bit-extract b251_s1 b251_s0 b251_s2
        let b251_s3 = ctx
            .emitter()
            .bit_extract(b251_s1.clone(), b251_s0.clone(), b251_s2.clone());
        // b251_s4: cast reint b251_s3 -> u1
        let b251_s4 = ctx
            .emitter()
            .cast(
                b251_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b251_s5: const #1u : u1
        let b251_s5 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b251_s6: cmp-eq b251_s4 b251_s5
        let b251_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b251_s4.clone(), b251_s5.clone()),
            );
        // b251_s7: branch b251_s6 block252 block18
        return ctx
            .emitter()
            .branch(
                b251_s6.clone(),
                fn_state.block_refs[252usize].clone(),
                fn_state.block_refs[18usize].clone(),
            );
    }
    fn block_252(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b252_s0: const #52s : i6
        let b252_s0 = ctx
            .emitter()
            .constant(
                52isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 6,
                },
            );
        // b252_s1: const #14656u : u32
        let b252_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b252_s2: read-reg b252_s1:i
        let b252_s2 = ctx
            .emitter()
            .read_register(
                b252_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b252_s3: cmp-lt b252_s2 b252_s0
        let b252_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b252_s2.clone(), b252_s0.clone()),
            );
        // b252_s4: not b252_s3
        let b252_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b252_s3.clone()));
        // b252_s5: branch b252_s4 block18 block253
        return ctx
            .emitter()
            .branch(
                b252_s4.clone(),
                fn_state.block_refs[18usize].clone(),
                fn_state.block_refs[253usize].clone(),
            );
    }
    fn block_253(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b253_s0: const #52s : i6
        let b253_s0 = ctx
            .emitter()
            .constant(
                52isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 6,
                },
            );
        // b253_s1: const #14656u : u32
        let b253_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b253_s2: write-reg b253_s1 <= b253_s0
        let b253_s2 = ctx.emitter().write_register(b253_s1.clone(), b253_s0.clone());
        // b253_s3: const #0s : i0
        let b253_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b253_s4: const #5s : i3
        let b253_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b253_s5: read-var u#25823:u32
        let b253_s5 = ctx.emitter().read_variable(fn_state.u_25823.clone());
        // b253_s6: bit-extract b253_s5 b253_s3 b253_s4
        let b253_s6 = ctx
            .emitter()
            .bit_extract(b253_s5.clone(), b253_s3.clone(), b253_s4.clone());
        // b253_s7: cast reint b253_s6 -> u5
        let b253_s7 = ctx
            .emitter()
            .cast(
                b253_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b253_s8: const #5s : i3
        let b253_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b253_s9: const #5s : i3
        let b253_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b253_s10: read-var u#25823:u32
        let b253_s10 = ctx.emitter().read_variable(fn_state.u_25823.clone());
        // b253_s11: bit-extract b253_s10 b253_s8 b253_s9
        let b253_s11 = ctx
            .emitter()
            .bit_extract(b253_s10.clone(), b253_s8.clone(), b253_s9.clone());
        // b253_s12: cast reint b253_s11 -> u5
        let b253_s12 = ctx
            .emitter()
            .cast(
                b253_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b253_s13: const #10s : i4
        let b253_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b253_s14: const #6s : i3
        let b253_s14 = ctx
            .emitter()
            .constant(
                6isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b253_s15: read-var u#25823:u32
        let b253_s15 = ctx.emitter().read_variable(fn_state.u_25823.clone());
        // b253_s16: bit-extract b253_s15 b253_s13 b253_s14
        let b253_s16 = ctx
            .emitter()
            .bit_extract(b253_s15.clone(), b253_s13.clone(), b253_s14.clone());
        // b253_s17: cast reint b253_s16 -> u6
        let b253_s17 = ctx
            .emitter()
            .cast(
                b253_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
                CastOperationKind::Reinterpret,
            );
        // b253_s18: const #16s : i5
        let b253_s18 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b253_s19: const #5s : i3
        let b253_s19 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b253_s20: read-var u#25823:u32
        let b253_s20 = ctx.emitter().read_variable(fn_state.u_25823.clone());
        // b253_s21: bit-extract b253_s20 b253_s18 b253_s19
        let b253_s21 = ctx
            .emitter()
            .bit_extract(b253_s20.clone(), b253_s18.clone(), b253_s19.clone());
        // b253_s22: cast reint b253_s21 -> u5
        let b253_s22 = ctx
            .emitter()
            .cast(
                b253_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b253_s23: const #21s : i5
        let b253_s23 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b253_s24: const #1s : i1
        let b253_s24 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b253_s25: read-var u#25823:u32
        let b253_s25 = ctx.emitter().read_variable(fn_state.u_25823.clone());
        // b253_s26: bit-extract b253_s25 b253_s23 b253_s24
        let b253_s26 = ctx
            .emitter()
            .bit_extract(b253_s25.clone(), b253_s23.clone(), b253_s24.clone());
        // b253_s27: cast reint b253_s26 -> u1
        let b253_s27 = ctx
            .emitter()
            .cast(
                b253_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b253_s28: const #22s : i5
        let b253_s28 = ctx
            .emitter()
            .constant(
                22isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b253_s29: const #2s : i2
        let b253_s29 = ctx
            .emitter()
            .constant(
                2isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b253_s30: read-var u#25823:u32
        let b253_s30 = ctx.emitter().read_variable(fn_state.u_25823.clone());
        // b253_s31: bit-extract b253_s30 b253_s28 b253_s29
        let b253_s31 = ctx
            .emitter()
            .bit_extract(b253_s30.clone(), b253_s28.clone(), b253_s29.clone());
        // b253_s32: cast reint b253_s31 -> u2
        let b253_s32 = ctx
            .emitter()
            .cast(
                b253_s31.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
                CastOperationKind::Reinterpret,
            );
        // b253_s33: const #29s : i5
        let b253_s33 = ctx
            .emitter()
            .constant(
                29isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b253_s34: const #2s : i2
        let b253_s34 = ctx
            .emitter()
            .constant(
                2isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b253_s35: read-var u#25823:u32
        let b253_s35 = ctx.emitter().read_variable(fn_state.u_25823.clone());
        // b253_s36: bit-extract b253_s35 b253_s33 b253_s34
        let b253_s36 = ctx
            .emitter()
            .bit_extract(b253_s35.clone(), b253_s33.clone(), b253_s34.clone());
        // b253_s37: cast reint b253_s36 -> u2
        let b253_s37 = ctx
            .emitter()
            .cast(
                b253_s36.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
                CastOperationKind::Reinterpret,
            );
        // b253_s38: const #31s : i5
        let b253_s38 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b253_s39: const #1s : i1
        let b253_s39 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b253_s40: read-var u#25823:u32
        let b253_s40 = ctx.emitter().read_variable(fn_state.u_25823.clone());
        // b253_s41: bit-extract b253_s40 b253_s38 b253_s39
        let b253_s41 = ctx
            .emitter()
            .bit_extract(b253_s40.clone(), b253_s38.clone(), b253_s39.clone());
        // b253_s42: cast reint b253_s41 -> u1
        let b253_s42 = ctx
            .emitter()
            .cast(
                b253_s41.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b253_s43: call decode_eon_aarch64_instrs_integer_logical_shiftedreg(b253_s7, b253_s12, b253_s17, b253_s22, b253_s27, b253_s32, b253_s37, b253_s42)
        let b253_s43 = decode_eon_aarch64_instrs_integer_logical_shiftedreg(
            ctx,
            b253_s7,
            b253_s12,
            b253_s17,
            b253_s22,
            b253_s27,
            b253_s32,
            b253_s37,
            b253_s42,
        );
        // b253_s44: const #15616u : u32
        let b253_s44 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b253_s45: read-reg b253_s44:u1
        let b253_s45 = ctx
            .emitter()
            .read_register(
                b253_s44.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b253_s46: branch b253_s45 block78 block77
        return ctx
            .emitter()
            .branch(
                b253_s45.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_254(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b254_s0: const #21s : i5
        let b254_s0 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b254_s1: read-var u#25813:u32
        let b254_s1 = ctx.emitter().read_variable(fn_state.u_25813.clone());
        // b254_s2: const #1s : i0
        let b254_s2 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b254_s3: bit-extract b254_s1 b254_s0 b254_s2
        let b254_s3 = ctx
            .emitter()
            .bit_extract(b254_s1.clone(), b254_s0.clone(), b254_s2.clone());
        // b254_s4: cast reint b254_s3 -> u1
        let b254_s4 = ctx
            .emitter()
            .cast(
                b254_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b254_s5: const #1u : u1
        let b254_s5 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b254_s6: cmp-eq b254_s4 b254_s5
        let b254_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b254_s4.clone(), b254_s5.clone()),
            );
        // b254_s7: branch b254_s6 block255 block17
        return ctx
            .emitter()
            .branch(
                b254_s6.clone(),
                fn_state.block_refs[255usize].clone(),
                fn_state.block_refs[17usize].clone(),
            );
    }
    fn block_255(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b255_s0: const #51s : i6
        let b255_s0 = ctx
            .emitter()
            .constant(
                51isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 6,
                },
            );
        // b255_s1: const #14656u : u32
        let b255_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b255_s2: read-reg b255_s1:i
        let b255_s2 = ctx
            .emitter()
            .read_register(
                b255_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b255_s3: cmp-lt b255_s2 b255_s0
        let b255_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b255_s2.clone(), b255_s0.clone()),
            );
        // b255_s4: not b255_s3
        let b255_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b255_s3.clone()));
        // b255_s5: branch b255_s4 block17 block256
        return ctx
            .emitter()
            .branch(
                b255_s4.clone(),
                fn_state.block_refs[17usize].clone(),
                fn_state.block_refs[256usize].clone(),
            );
    }
    fn block_256(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b256_s0: const #51s : i6
        let b256_s0 = ctx
            .emitter()
            .constant(
                51isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 6,
                },
            );
        // b256_s1: const #14656u : u32
        let b256_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b256_s2: write-reg b256_s1 <= b256_s0
        let b256_s2 = ctx.emitter().write_register(b256_s1.clone(), b256_s0.clone());
        // b256_s3: const #0s : i0
        let b256_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b256_s4: const #5s : i3
        let b256_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b256_s5: read-var u#25813:u32
        let b256_s5 = ctx.emitter().read_variable(fn_state.u_25813.clone());
        // b256_s6: bit-extract b256_s5 b256_s3 b256_s4
        let b256_s6 = ctx
            .emitter()
            .bit_extract(b256_s5.clone(), b256_s3.clone(), b256_s4.clone());
        // b256_s7: cast reint b256_s6 -> u5
        let b256_s7 = ctx
            .emitter()
            .cast(
                b256_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b256_s8: const #5s : i3
        let b256_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b256_s9: const #5s : i3
        let b256_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b256_s10: read-var u#25813:u32
        let b256_s10 = ctx.emitter().read_variable(fn_state.u_25813.clone());
        // b256_s11: bit-extract b256_s10 b256_s8 b256_s9
        let b256_s11 = ctx
            .emitter()
            .bit_extract(b256_s10.clone(), b256_s8.clone(), b256_s9.clone());
        // b256_s12: cast reint b256_s11 -> u5
        let b256_s12 = ctx
            .emitter()
            .cast(
                b256_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b256_s13: const #10s : i4
        let b256_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b256_s14: const #6s : i3
        let b256_s14 = ctx
            .emitter()
            .constant(
                6isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b256_s15: read-var u#25813:u32
        let b256_s15 = ctx.emitter().read_variable(fn_state.u_25813.clone());
        // b256_s16: bit-extract b256_s15 b256_s13 b256_s14
        let b256_s16 = ctx
            .emitter()
            .bit_extract(b256_s15.clone(), b256_s13.clone(), b256_s14.clone());
        // b256_s17: cast reint b256_s16 -> u6
        let b256_s17 = ctx
            .emitter()
            .cast(
                b256_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
                CastOperationKind::Reinterpret,
            );
        // b256_s18: const #16s : i5
        let b256_s18 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b256_s19: const #5s : i3
        let b256_s19 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b256_s20: read-var u#25813:u32
        let b256_s20 = ctx.emitter().read_variable(fn_state.u_25813.clone());
        // b256_s21: bit-extract b256_s20 b256_s18 b256_s19
        let b256_s21 = ctx
            .emitter()
            .bit_extract(b256_s20.clone(), b256_s18.clone(), b256_s19.clone());
        // b256_s22: cast reint b256_s21 -> u5
        let b256_s22 = ctx
            .emitter()
            .cast(
                b256_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b256_s23: const #21s : i5
        let b256_s23 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b256_s24: const #1s : i1
        let b256_s24 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b256_s25: read-var u#25813:u32
        let b256_s25 = ctx.emitter().read_variable(fn_state.u_25813.clone());
        // b256_s26: bit-extract b256_s25 b256_s23 b256_s24
        let b256_s26 = ctx
            .emitter()
            .bit_extract(b256_s25.clone(), b256_s23.clone(), b256_s24.clone());
        // b256_s27: cast reint b256_s26 -> u1
        let b256_s27 = ctx
            .emitter()
            .cast(
                b256_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b256_s28: const #22s : i5
        let b256_s28 = ctx
            .emitter()
            .constant(
                22isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b256_s29: const #2s : i2
        let b256_s29 = ctx
            .emitter()
            .constant(
                2isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b256_s30: read-var u#25813:u32
        let b256_s30 = ctx.emitter().read_variable(fn_state.u_25813.clone());
        // b256_s31: bit-extract b256_s30 b256_s28 b256_s29
        let b256_s31 = ctx
            .emitter()
            .bit_extract(b256_s30.clone(), b256_s28.clone(), b256_s29.clone());
        // b256_s32: cast reint b256_s31 -> u2
        let b256_s32 = ctx
            .emitter()
            .cast(
                b256_s31.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
                CastOperationKind::Reinterpret,
            );
        // b256_s33: const #29s : i5
        let b256_s33 = ctx
            .emitter()
            .constant(
                29isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b256_s34: const #2s : i2
        let b256_s34 = ctx
            .emitter()
            .constant(
                2isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b256_s35: read-var u#25813:u32
        let b256_s35 = ctx.emitter().read_variable(fn_state.u_25813.clone());
        // b256_s36: bit-extract b256_s35 b256_s33 b256_s34
        let b256_s36 = ctx
            .emitter()
            .bit_extract(b256_s35.clone(), b256_s33.clone(), b256_s34.clone());
        // b256_s37: cast reint b256_s36 -> u2
        let b256_s37 = ctx
            .emitter()
            .cast(
                b256_s36.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
                CastOperationKind::Reinterpret,
            );
        // b256_s38: const #31s : i5
        let b256_s38 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b256_s39: const #1s : i1
        let b256_s39 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b256_s40: read-var u#25813:u32
        let b256_s40 = ctx.emitter().read_variable(fn_state.u_25813.clone());
        // b256_s41: bit-extract b256_s40 b256_s38 b256_s39
        let b256_s41 = ctx
            .emitter()
            .bit_extract(b256_s40.clone(), b256_s38.clone(), b256_s39.clone());
        // b256_s42: cast reint b256_s41 -> u1
        let b256_s42 = ctx
            .emitter()
            .cast(
                b256_s41.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b256_s43: call decode_bics_aarch64_instrs_integer_logical_shiftedreg(b256_s7, b256_s12, b256_s17, b256_s22, b256_s27, b256_s32, b256_s37, b256_s42)
        let b256_s43 = decode_bics_aarch64_instrs_integer_logical_shiftedreg(
            ctx,
            b256_s7,
            b256_s12,
            b256_s17,
            b256_s22,
            b256_s27,
            b256_s32,
            b256_s37,
            b256_s42,
        );
        // b256_s44: const #15616u : u32
        let b256_s44 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b256_s45: read-reg b256_s44:u1
        let b256_s45 = ctx
            .emitter()
            .read_register(
                b256_s44.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b256_s46: branch b256_s45 block78 block77
        return ctx
            .emitter()
            .branch(
                b256_s45.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_257(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b257_s0: const #21s : i5
        let b257_s0 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b257_s1: read-var u#25803:u32
        let b257_s1 = ctx.emitter().read_variable(fn_state.u_25803.clone());
        // b257_s2: const #1s : i0
        let b257_s2 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b257_s3: bit-extract b257_s1 b257_s0 b257_s2
        let b257_s3 = ctx
            .emitter()
            .bit_extract(b257_s1.clone(), b257_s0.clone(), b257_s2.clone());
        // b257_s4: cast reint b257_s3 -> u1
        let b257_s4 = ctx
            .emitter()
            .cast(
                b257_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b257_s5: const #1u : u1
        let b257_s5 = ctx
            .emitter()
            .constant(
                1,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b257_s6: cmp-eq b257_s4 b257_s5
        let b257_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b257_s4.clone(), b257_s5.clone()),
            );
        // b257_s7: branch b257_s6 block258 block16
        return ctx
            .emitter()
            .branch(
                b257_s6.clone(),
                fn_state.block_refs[258usize].clone(),
                fn_state.block_refs[16usize].clone(),
            );
    }
    fn block_258(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b258_s0: const #50s : i6
        let b258_s0 = ctx
            .emitter()
            .constant(
                50isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 6,
                },
            );
        // b258_s1: const #14656u : u32
        let b258_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b258_s2: read-reg b258_s1:i
        let b258_s2 = ctx
            .emitter()
            .read_register(
                b258_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b258_s3: cmp-lt b258_s2 b258_s0
        let b258_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b258_s2.clone(), b258_s0.clone()),
            );
        // b258_s4: not b258_s3
        let b258_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b258_s3.clone()));
        // b258_s5: branch b258_s4 block16 block259
        return ctx
            .emitter()
            .branch(
                b258_s4.clone(),
                fn_state.block_refs[16usize].clone(),
                fn_state.block_refs[259usize].clone(),
            );
    }
    fn block_259(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b259_s0: const #50s : i6
        let b259_s0 = ctx
            .emitter()
            .constant(
                50isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 6,
                },
            );
        // b259_s1: const #14656u : u32
        let b259_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b259_s2: write-reg b259_s1 <= b259_s0
        let b259_s2 = ctx.emitter().write_register(b259_s1.clone(), b259_s0.clone());
        // b259_s3: const #0s : i0
        let b259_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b259_s4: const #5s : i3
        let b259_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b259_s5: read-var u#25803:u32
        let b259_s5 = ctx.emitter().read_variable(fn_state.u_25803.clone());
        // b259_s6: bit-extract b259_s5 b259_s3 b259_s4
        let b259_s6 = ctx
            .emitter()
            .bit_extract(b259_s5.clone(), b259_s3.clone(), b259_s4.clone());
        // b259_s7: cast reint b259_s6 -> u5
        let b259_s7 = ctx
            .emitter()
            .cast(
                b259_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b259_s8: const #5s : i3
        let b259_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b259_s9: const #5s : i3
        let b259_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b259_s10: read-var u#25803:u32
        let b259_s10 = ctx.emitter().read_variable(fn_state.u_25803.clone());
        // b259_s11: bit-extract b259_s10 b259_s8 b259_s9
        let b259_s11 = ctx
            .emitter()
            .bit_extract(b259_s10.clone(), b259_s8.clone(), b259_s9.clone());
        // b259_s12: cast reint b259_s11 -> u5
        let b259_s12 = ctx
            .emitter()
            .cast(
                b259_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b259_s13: const #10s : i4
        let b259_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b259_s14: const #6s : i3
        let b259_s14 = ctx
            .emitter()
            .constant(
                6isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b259_s15: read-var u#25803:u32
        let b259_s15 = ctx.emitter().read_variable(fn_state.u_25803.clone());
        // b259_s16: bit-extract b259_s15 b259_s13 b259_s14
        let b259_s16 = ctx
            .emitter()
            .bit_extract(b259_s15.clone(), b259_s13.clone(), b259_s14.clone());
        // b259_s17: cast reint b259_s16 -> u6
        let b259_s17 = ctx
            .emitter()
            .cast(
                b259_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
                CastOperationKind::Reinterpret,
            );
        // b259_s18: const #16s : i5
        let b259_s18 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b259_s19: const #5s : i3
        let b259_s19 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b259_s20: read-var u#25803:u32
        let b259_s20 = ctx.emitter().read_variable(fn_state.u_25803.clone());
        // b259_s21: bit-extract b259_s20 b259_s18 b259_s19
        let b259_s21 = ctx
            .emitter()
            .bit_extract(b259_s20.clone(), b259_s18.clone(), b259_s19.clone());
        // b259_s22: cast reint b259_s21 -> u5
        let b259_s22 = ctx
            .emitter()
            .cast(
                b259_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b259_s23: const #21s : i5
        let b259_s23 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b259_s24: const #1s : i1
        let b259_s24 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b259_s25: read-var u#25803:u32
        let b259_s25 = ctx.emitter().read_variable(fn_state.u_25803.clone());
        // b259_s26: bit-extract b259_s25 b259_s23 b259_s24
        let b259_s26 = ctx
            .emitter()
            .bit_extract(b259_s25.clone(), b259_s23.clone(), b259_s24.clone());
        // b259_s27: cast reint b259_s26 -> u1
        let b259_s27 = ctx
            .emitter()
            .cast(
                b259_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b259_s28: const #22s : i5
        let b259_s28 = ctx
            .emitter()
            .constant(
                22isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b259_s29: const #2s : i2
        let b259_s29 = ctx
            .emitter()
            .constant(
                2isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b259_s30: read-var u#25803:u32
        let b259_s30 = ctx.emitter().read_variable(fn_state.u_25803.clone());
        // b259_s31: bit-extract b259_s30 b259_s28 b259_s29
        let b259_s31 = ctx
            .emitter()
            .bit_extract(b259_s30.clone(), b259_s28.clone(), b259_s29.clone());
        // b259_s32: cast reint b259_s31 -> u2
        let b259_s32 = ctx
            .emitter()
            .cast(
                b259_s31.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
                CastOperationKind::Reinterpret,
            );
        // b259_s33: const #29s : i5
        let b259_s33 = ctx
            .emitter()
            .constant(
                29isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b259_s34: const #2s : i2
        let b259_s34 = ctx
            .emitter()
            .constant(
                2isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b259_s35: read-var u#25803:u32
        let b259_s35 = ctx.emitter().read_variable(fn_state.u_25803.clone());
        // b259_s36: bit-extract b259_s35 b259_s33 b259_s34
        let b259_s36 = ctx
            .emitter()
            .bit_extract(b259_s35.clone(), b259_s33.clone(), b259_s34.clone());
        // b259_s37: cast reint b259_s36 -> u2
        let b259_s37 = ctx
            .emitter()
            .cast(
                b259_s36.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
                CastOperationKind::Reinterpret,
            );
        // b259_s38: const #31s : i5
        let b259_s38 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b259_s39: const #1s : i1
        let b259_s39 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b259_s40: read-var u#25803:u32
        let b259_s40 = ctx.emitter().read_variable(fn_state.u_25803.clone());
        // b259_s41: bit-extract b259_s40 b259_s38 b259_s39
        let b259_s41 = ctx
            .emitter()
            .bit_extract(b259_s40.clone(), b259_s38.clone(), b259_s39.clone());
        // b259_s42: cast reint b259_s41 -> u1
        let b259_s42 = ctx
            .emitter()
            .cast(
                b259_s41.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b259_s43: call decode_bic_log_shift_aarch64_instrs_integer_logical_shiftedreg(b259_s7, b259_s12, b259_s17, b259_s22, b259_s27, b259_s32, b259_s37, b259_s42)
        let b259_s43 = decode_bic_log_shift_aarch64_instrs_integer_logical_shiftedreg(
            ctx,
            b259_s7,
            b259_s12,
            b259_s17,
            b259_s22,
            b259_s27,
            b259_s32,
            b259_s37,
            b259_s42,
        );
        // b259_s44: const #15616u : u32
        let b259_s44 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b259_s45: read-reg b259_s44:u1
        let b259_s45 = ctx
            .emitter()
            .read_register(
                b259_s44.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b259_s46: branch b259_s45 block78 block77
        return ctx
            .emitter()
            .branch(
                b259_s45.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_260(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b260_s0: const #21s : i5
        let b260_s0 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b260_s1: read-var u#25793:u32
        let b260_s1 = ctx.emitter().read_variable(fn_state.u_25793.clone());
        // b260_s2: const #1s : i0
        let b260_s2 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b260_s3: bit-extract b260_s1 b260_s0 b260_s2
        let b260_s3 = ctx
            .emitter()
            .bit_extract(b260_s1.clone(), b260_s0.clone(), b260_s2.clone());
        // b260_s4: cast reint b260_s3 -> u1
        let b260_s4 = ctx
            .emitter()
            .cast(
                b260_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b260_s5: const #0u : u1
        let b260_s5 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b260_s6: cmp-eq b260_s4 b260_s5
        let b260_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b260_s4.clone(), b260_s5.clone()),
            );
        // b260_s7: branch b260_s6 block261 block15
        return ctx
            .emitter()
            .branch(
                b260_s6.clone(),
                fn_state.block_refs[261usize].clone(),
                fn_state.block_refs[15usize].clone(),
            );
    }
    fn block_261(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b261_s0: const #49s : i6
        let b261_s0 = ctx
            .emitter()
            .constant(
                49isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 6,
                },
            );
        // b261_s1: const #14656u : u32
        let b261_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b261_s2: read-reg b261_s1:i
        let b261_s2 = ctx
            .emitter()
            .read_register(
                b261_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b261_s3: cmp-lt b261_s2 b261_s0
        let b261_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b261_s2.clone(), b261_s0.clone()),
            );
        // b261_s4: not b261_s3
        let b261_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b261_s3.clone()));
        // b261_s5: branch b261_s4 block15 block262
        return ctx
            .emitter()
            .branch(
                b261_s4.clone(),
                fn_state.block_refs[15usize].clone(),
                fn_state.block_refs[262usize].clone(),
            );
    }
    fn block_262(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b262_s0: const #49s : i6
        let b262_s0 = ctx
            .emitter()
            .constant(
                49isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 6,
                },
            );
        // b262_s1: const #14656u : u32
        let b262_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b262_s2: write-reg b262_s1 <= b262_s0
        let b262_s2 = ctx.emitter().write_register(b262_s1.clone(), b262_s0.clone());
        // b262_s3: const #0s : i0
        let b262_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b262_s4: const #5s : i3
        let b262_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b262_s5: read-var u#25793:u32
        let b262_s5 = ctx.emitter().read_variable(fn_state.u_25793.clone());
        // b262_s6: bit-extract b262_s5 b262_s3 b262_s4
        let b262_s6 = ctx
            .emitter()
            .bit_extract(b262_s5.clone(), b262_s3.clone(), b262_s4.clone());
        // b262_s7: cast reint b262_s6 -> u5
        let b262_s7 = ctx
            .emitter()
            .cast(
                b262_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b262_s8: const #5s : i3
        let b262_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b262_s9: const #5s : i3
        let b262_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b262_s10: read-var u#25793:u32
        let b262_s10 = ctx.emitter().read_variable(fn_state.u_25793.clone());
        // b262_s11: bit-extract b262_s10 b262_s8 b262_s9
        let b262_s11 = ctx
            .emitter()
            .bit_extract(b262_s10.clone(), b262_s8.clone(), b262_s9.clone());
        // b262_s12: cast reint b262_s11 -> u5
        let b262_s12 = ctx
            .emitter()
            .cast(
                b262_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b262_s13: const #10s : i4
        let b262_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b262_s14: const #6s : i3
        let b262_s14 = ctx
            .emitter()
            .constant(
                6isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b262_s15: read-var u#25793:u32
        let b262_s15 = ctx.emitter().read_variable(fn_state.u_25793.clone());
        // b262_s16: bit-extract b262_s15 b262_s13 b262_s14
        let b262_s16 = ctx
            .emitter()
            .bit_extract(b262_s15.clone(), b262_s13.clone(), b262_s14.clone());
        // b262_s17: cast reint b262_s16 -> u6
        let b262_s17 = ctx
            .emitter()
            .cast(
                b262_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
                CastOperationKind::Reinterpret,
            );
        // b262_s18: const #16s : i5
        let b262_s18 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b262_s19: const #5s : i3
        let b262_s19 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b262_s20: read-var u#25793:u32
        let b262_s20 = ctx.emitter().read_variable(fn_state.u_25793.clone());
        // b262_s21: bit-extract b262_s20 b262_s18 b262_s19
        let b262_s21 = ctx
            .emitter()
            .bit_extract(b262_s20.clone(), b262_s18.clone(), b262_s19.clone());
        // b262_s22: cast reint b262_s21 -> u5
        let b262_s22 = ctx
            .emitter()
            .cast(
                b262_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b262_s23: const #21s : i5
        let b262_s23 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b262_s24: const #1s : i1
        let b262_s24 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b262_s25: read-var u#25793:u32
        let b262_s25 = ctx.emitter().read_variable(fn_state.u_25793.clone());
        // b262_s26: bit-extract b262_s25 b262_s23 b262_s24
        let b262_s26 = ctx
            .emitter()
            .bit_extract(b262_s25.clone(), b262_s23.clone(), b262_s24.clone());
        // b262_s27: cast reint b262_s26 -> u1
        let b262_s27 = ctx
            .emitter()
            .cast(
                b262_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b262_s28: const #22s : i5
        let b262_s28 = ctx
            .emitter()
            .constant(
                22isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b262_s29: const #2s : i2
        let b262_s29 = ctx
            .emitter()
            .constant(
                2isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b262_s30: read-var u#25793:u32
        let b262_s30 = ctx.emitter().read_variable(fn_state.u_25793.clone());
        // b262_s31: bit-extract b262_s30 b262_s28 b262_s29
        let b262_s31 = ctx
            .emitter()
            .bit_extract(b262_s30.clone(), b262_s28.clone(), b262_s29.clone());
        // b262_s32: cast reint b262_s31 -> u2
        let b262_s32 = ctx
            .emitter()
            .cast(
                b262_s31.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
                CastOperationKind::Reinterpret,
            );
        // b262_s33: const #29s : i5
        let b262_s33 = ctx
            .emitter()
            .constant(
                29isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b262_s34: const #2s : i2
        let b262_s34 = ctx
            .emitter()
            .constant(
                2isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b262_s35: read-var u#25793:u32
        let b262_s35 = ctx.emitter().read_variable(fn_state.u_25793.clone());
        // b262_s36: bit-extract b262_s35 b262_s33 b262_s34
        let b262_s36 = ctx
            .emitter()
            .bit_extract(b262_s35.clone(), b262_s33.clone(), b262_s34.clone());
        // b262_s37: cast reint b262_s36 -> u2
        let b262_s37 = ctx
            .emitter()
            .cast(
                b262_s36.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
                CastOperationKind::Reinterpret,
            );
        // b262_s38: const #31s : i5
        let b262_s38 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b262_s39: const #1s : i1
        let b262_s39 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b262_s40: read-var u#25793:u32
        let b262_s40 = ctx.emitter().read_variable(fn_state.u_25793.clone());
        // b262_s41: bit-extract b262_s40 b262_s38 b262_s39
        let b262_s41 = ctx
            .emitter()
            .bit_extract(b262_s40.clone(), b262_s38.clone(), b262_s39.clone());
        // b262_s42: cast reint b262_s41 -> u1
        let b262_s42 = ctx
            .emitter()
            .cast(
                b262_s41.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b262_s43: call decode_ands_log_shift_aarch64_instrs_integer_logical_shiftedreg(b262_s7, b262_s12, b262_s17, b262_s22, b262_s27, b262_s32, b262_s37, b262_s42)
        let b262_s43 = decode_ands_log_shift_aarch64_instrs_integer_logical_shiftedreg(
            ctx,
            b262_s7,
            b262_s12,
            b262_s17,
            b262_s22,
            b262_s27,
            b262_s32,
            b262_s37,
            b262_s42,
        );
        // b262_s44: const #15616u : u32
        let b262_s44 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b262_s45: read-reg b262_s44:u1
        let b262_s45 = ctx
            .emitter()
            .read_register(
                b262_s44.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b262_s46: branch b262_s45 block78 block77
        return ctx
            .emitter()
            .branch(
                b262_s45.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_263(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b263_s0: const #21s : i5
        let b263_s0 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b263_s1: read-var u#25785:u32
        let b263_s1 = ctx.emitter().read_variable(fn_state.u_25785.clone());
        // b263_s2: const #1s : i0
        let b263_s2 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b263_s3: bit-extract b263_s1 b263_s0 b263_s2
        let b263_s3 = ctx
            .emitter()
            .bit_extract(b263_s1.clone(), b263_s0.clone(), b263_s2.clone());
        // b263_s4: cast reint b263_s3 -> u1
        let b263_s4 = ctx
            .emitter()
            .cast(
                b263_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b263_s5: const #0u : u1
        let b263_s5 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b263_s6: cmp-eq b263_s4 b263_s5
        let b263_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b263_s4.clone(), b263_s5.clone()),
            );
        // b263_s7: branch b263_s6 block264 block14
        return ctx
            .emitter()
            .branch(
                b263_s6.clone(),
                fn_state.block_refs[264usize].clone(),
                fn_state.block_refs[14usize].clone(),
            );
    }
    fn block_264(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b264_s0: const #48s : i6
        let b264_s0 = ctx
            .emitter()
            .constant(
                48isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 6,
                },
            );
        // b264_s1: const #14656u : u32
        let b264_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b264_s2: read-reg b264_s1:i
        let b264_s2 = ctx
            .emitter()
            .read_register(
                b264_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b264_s3: cmp-lt b264_s2 b264_s0
        let b264_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b264_s2.clone(), b264_s0.clone()),
            );
        // b264_s4: not b264_s3
        let b264_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b264_s3.clone()));
        // b264_s5: branch b264_s4 block14 block265
        return ctx
            .emitter()
            .branch(
                b264_s4.clone(),
                fn_state.block_refs[14usize].clone(),
                fn_state.block_refs[265usize].clone(),
            );
    }
    fn block_265(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b265_s0: const #48s : i6
        let b265_s0 = ctx
            .emitter()
            .constant(
                48isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 6,
                },
            );
        // b265_s1: const #14656u : u32
        let b265_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b265_s2: write-reg b265_s1 <= b265_s0
        let b265_s2 = ctx.emitter().write_register(b265_s1.clone(), b265_s0.clone());
        // b265_s3: const #0s : i0
        let b265_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b265_s4: const #5s : i3
        let b265_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b265_s5: read-var u#25785:u32
        let b265_s5 = ctx.emitter().read_variable(fn_state.u_25785.clone());
        // b265_s6: bit-extract b265_s5 b265_s3 b265_s4
        let b265_s6 = ctx
            .emitter()
            .bit_extract(b265_s5.clone(), b265_s3.clone(), b265_s4.clone());
        // b265_s7: cast reint b265_s6 -> u5
        let b265_s7 = ctx
            .emitter()
            .cast(
                b265_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b265_s8: const #5s : i3
        let b265_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b265_s9: const #5s : i3
        let b265_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b265_s10: read-var u#25785:u32
        let b265_s10 = ctx.emitter().read_variable(fn_state.u_25785.clone());
        // b265_s11: bit-extract b265_s10 b265_s8 b265_s9
        let b265_s11 = ctx
            .emitter()
            .bit_extract(b265_s10.clone(), b265_s8.clone(), b265_s9.clone());
        // b265_s12: cast reint b265_s11 -> u5
        let b265_s12 = ctx
            .emitter()
            .cast(
                b265_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b265_s13: const #10s : i4
        let b265_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b265_s14: const #6s : i3
        let b265_s14 = ctx
            .emitter()
            .constant(
                6isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b265_s15: read-var u#25785:u32
        let b265_s15 = ctx.emitter().read_variable(fn_state.u_25785.clone());
        // b265_s16: bit-extract b265_s15 b265_s13 b265_s14
        let b265_s16 = ctx
            .emitter()
            .bit_extract(b265_s15.clone(), b265_s13.clone(), b265_s14.clone());
        // b265_s17: cast reint b265_s16 -> u6
        let b265_s17 = ctx
            .emitter()
            .cast(
                b265_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
                CastOperationKind::Reinterpret,
            );
        // b265_s18: const #16s : i5
        let b265_s18 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b265_s19: const #5s : i3
        let b265_s19 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b265_s20: read-var u#25785:u32
        let b265_s20 = ctx.emitter().read_variable(fn_state.u_25785.clone());
        // b265_s21: bit-extract b265_s20 b265_s18 b265_s19
        let b265_s21 = ctx
            .emitter()
            .bit_extract(b265_s20.clone(), b265_s18.clone(), b265_s19.clone());
        // b265_s22: cast reint b265_s21 -> u5
        let b265_s22 = ctx
            .emitter()
            .cast(
                b265_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b265_s23: const #21s : i5
        let b265_s23 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b265_s24: const #1s : i1
        let b265_s24 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b265_s25: read-var u#25785:u32
        let b265_s25 = ctx.emitter().read_variable(fn_state.u_25785.clone());
        // b265_s26: bit-extract b265_s25 b265_s23 b265_s24
        let b265_s26 = ctx
            .emitter()
            .bit_extract(b265_s25.clone(), b265_s23.clone(), b265_s24.clone());
        // b265_s27: cast reint b265_s26 -> u1
        let b265_s27 = ctx
            .emitter()
            .cast(
                b265_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b265_s28: const #22s : i5
        let b265_s28 = ctx
            .emitter()
            .constant(
                22isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b265_s29: const #2s : i2
        let b265_s29 = ctx
            .emitter()
            .constant(
                2isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b265_s30: read-var u#25785:u32
        let b265_s30 = ctx.emitter().read_variable(fn_state.u_25785.clone());
        // b265_s31: bit-extract b265_s30 b265_s28 b265_s29
        let b265_s31 = ctx
            .emitter()
            .bit_extract(b265_s30.clone(), b265_s28.clone(), b265_s29.clone());
        // b265_s32: cast reint b265_s31 -> u2
        let b265_s32 = ctx
            .emitter()
            .cast(
                b265_s31.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
                CastOperationKind::Reinterpret,
            );
        // b265_s33: const #29s : i5
        let b265_s33 = ctx
            .emitter()
            .constant(
                29isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b265_s34: const #2s : i2
        let b265_s34 = ctx
            .emitter()
            .constant(
                2isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b265_s35: read-var u#25785:u32
        let b265_s35 = ctx.emitter().read_variable(fn_state.u_25785.clone());
        // b265_s36: bit-extract b265_s35 b265_s33 b265_s34
        let b265_s36 = ctx
            .emitter()
            .bit_extract(b265_s35.clone(), b265_s33.clone(), b265_s34.clone());
        // b265_s37: cast reint b265_s36 -> u2
        let b265_s37 = ctx
            .emitter()
            .cast(
                b265_s36.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
                CastOperationKind::Reinterpret,
            );
        // b265_s38: const #31s : i5
        let b265_s38 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b265_s39: const #1s : i1
        let b265_s39 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b265_s40: read-var u#25785:u32
        let b265_s40 = ctx.emitter().read_variable(fn_state.u_25785.clone());
        // b265_s41: bit-extract b265_s40 b265_s38 b265_s39
        let b265_s41 = ctx
            .emitter()
            .bit_extract(b265_s40.clone(), b265_s38.clone(), b265_s39.clone());
        // b265_s42: cast reint b265_s41 -> u1
        let b265_s42 = ctx
            .emitter()
            .cast(
                b265_s41.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b265_s43: call decode_and_log_shift_aarch64_instrs_integer_logical_shiftedreg(b265_s7, b265_s12, b265_s17, b265_s22, b265_s27, b265_s32, b265_s37, b265_s42)
        let b265_s43 = decode_and_log_shift_aarch64_instrs_integer_logical_shiftedreg(
            ctx,
            b265_s7,
            b265_s12,
            b265_s17,
            b265_s22,
            b265_s27,
            b265_s32,
            b265_s37,
            b265_s42,
        );
        // b265_s44: const #15616u : u32
        let b265_s44 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b265_s45: read-reg b265_s44:u1
        let b265_s45 = ctx
            .emitter()
            .read_register(
                b265_s44.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b265_s46: branch b265_s45 block78 block77
        return ctx
            .emitter()
            .branch(
                b265_s45.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_266(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b266_s0: const #25s : i5
        let b266_s0 = ctx
            .emitter()
            .constant(
                25isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b266_s1: const #14656u : u32
        let b266_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b266_s2: read-reg b266_s1:i
        let b266_s2 = ctx
            .emitter()
            .read_register(
                b266_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b266_s3: cmp-lt b266_s2 b266_s0
        let b266_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b266_s2.clone(), b266_s0.clone()),
            );
        // b266_s4: not b266_s3
        let b266_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b266_s3.clone()));
        // b266_s5: branch b266_s4 block13 block267
        return ctx
            .emitter()
            .branch(
                b266_s4.clone(),
                fn_state.block_refs[13usize].clone(),
                fn_state.block_refs[267usize].clone(),
            );
    }
    fn block_267(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b267_s0: const #25s : i5
        let b267_s0 = ctx
            .emitter()
            .constant(
                25isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b267_s1: const #14656u : u32
        let b267_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b267_s2: write-reg b267_s1 <= b267_s0
        let b267_s2 = ctx.emitter().write_register(b267_s1.clone(), b267_s0.clone());
        // b267_s3: const #0s : i0
        let b267_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b267_s4: const #5s : i3
        let b267_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b267_s5: read-var u#25775:u32
        let b267_s5 = ctx.emitter().read_variable(fn_state.u_25775.clone());
        // b267_s6: bit-extract b267_s5 b267_s3 b267_s4
        let b267_s6 = ctx
            .emitter()
            .bit_extract(b267_s5.clone(), b267_s3.clone(), b267_s4.clone());
        // b267_s7: cast reint b267_s6 -> u5
        let b267_s7 = ctx
            .emitter()
            .cast(
                b267_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b267_s8: const #5s : i3
        let b267_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b267_s9: const #5s : i3
        let b267_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b267_s10: read-var u#25775:u32
        let b267_s10 = ctx.emitter().read_variable(fn_state.u_25775.clone());
        // b267_s11: bit-extract b267_s10 b267_s8 b267_s9
        let b267_s11 = ctx
            .emitter()
            .bit_extract(b267_s10.clone(), b267_s8.clone(), b267_s9.clone());
        // b267_s12: cast reint b267_s11 -> u5
        let b267_s12 = ctx
            .emitter()
            .cast(
                b267_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b267_s13: const #10s : i4
        let b267_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b267_s14: const #3s : i2
        let b267_s14 = ctx
            .emitter()
            .constant(
                3isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b267_s15: read-var u#25775:u32
        let b267_s15 = ctx.emitter().read_variable(fn_state.u_25775.clone());
        // b267_s16: bit-extract b267_s15 b267_s13 b267_s14
        let b267_s16 = ctx
            .emitter()
            .bit_extract(b267_s15.clone(), b267_s13.clone(), b267_s14.clone());
        // b267_s17: cast reint b267_s16 -> u3
        let b267_s17 = ctx
            .emitter()
            .cast(
                b267_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 3,
                },
                CastOperationKind::Reinterpret,
            );
        // b267_s18: const #13s : i4
        let b267_s18 = ctx
            .emitter()
            .constant(
                13isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b267_s19: const #3s : i2
        let b267_s19 = ctx
            .emitter()
            .constant(
                3isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b267_s20: read-var u#25775:u32
        let b267_s20 = ctx.emitter().read_variable(fn_state.u_25775.clone());
        // b267_s21: bit-extract b267_s20 b267_s18 b267_s19
        let b267_s21 = ctx
            .emitter()
            .bit_extract(b267_s20.clone(), b267_s18.clone(), b267_s19.clone());
        // b267_s22: cast reint b267_s21 -> u3
        let b267_s22 = ctx
            .emitter()
            .cast(
                b267_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 3,
                },
                CastOperationKind::Reinterpret,
            );
        // b267_s23: const #16s : i5
        let b267_s23 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b267_s24: const #5s : i3
        let b267_s24 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b267_s25: read-var u#25775:u32
        let b267_s25 = ctx.emitter().read_variable(fn_state.u_25775.clone());
        // b267_s26: bit-extract b267_s25 b267_s23 b267_s24
        let b267_s26 = ctx
            .emitter()
            .bit_extract(b267_s25.clone(), b267_s23.clone(), b267_s24.clone());
        // b267_s27: cast reint b267_s26 -> u5
        let b267_s27 = ctx
            .emitter()
            .cast(
                b267_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b267_s28: const #29s : i5
        let b267_s28 = ctx
            .emitter()
            .constant(
                29isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b267_s29: const #1s : i1
        let b267_s29 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b267_s30: read-var u#25775:u32
        let b267_s30 = ctx.emitter().read_variable(fn_state.u_25775.clone());
        // b267_s31: bit-extract b267_s30 b267_s28 b267_s29
        let b267_s31 = ctx
            .emitter()
            .bit_extract(b267_s30.clone(), b267_s28.clone(), b267_s29.clone());
        // b267_s32: cast reint b267_s31 -> u1
        let b267_s32 = ctx
            .emitter()
            .cast(
                b267_s31.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b267_s33: const #30s : i5
        let b267_s33 = ctx
            .emitter()
            .constant(
                30isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b267_s34: const #1s : i1
        let b267_s34 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b267_s35: read-var u#25775:u32
        let b267_s35 = ctx.emitter().read_variable(fn_state.u_25775.clone());
        // b267_s36: bit-extract b267_s35 b267_s33 b267_s34
        let b267_s36 = ctx
            .emitter()
            .bit_extract(b267_s35.clone(), b267_s33.clone(), b267_s34.clone());
        // b267_s37: cast reint b267_s36 -> u1
        let b267_s37 = ctx
            .emitter()
            .cast(
                b267_s36.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b267_s38: const #31s : i5
        let b267_s38 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b267_s39: const #1s : i1
        let b267_s39 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b267_s40: read-var u#25775:u32
        let b267_s40 = ctx.emitter().read_variable(fn_state.u_25775.clone());
        // b267_s41: bit-extract b267_s40 b267_s38 b267_s39
        let b267_s41 = ctx
            .emitter()
            .bit_extract(b267_s40.clone(), b267_s38.clone(), b267_s39.clone());
        // b267_s42: cast reint b267_s41 -> u1
        let b267_s42 = ctx
            .emitter()
            .cast(
                b267_s41.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b267_s43: call decode_subs_addsub_ext_aarch64_instrs_integer_arithmetic_add_sub_extendedreg(b267_s7, b267_s12, b267_s17, b267_s22, b267_s27, b267_s32, b267_s37, b267_s42)
        let b267_s43 = decode_subs_addsub_ext_aarch64_instrs_integer_arithmetic_add_sub_extendedreg(
            ctx,
            b267_s7,
            b267_s12,
            b267_s17,
            b267_s22,
            b267_s27,
            b267_s32,
            b267_s37,
            b267_s42,
        );
        // b267_s44: const #15616u : u32
        let b267_s44 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b267_s45: read-reg b267_s44:u1
        let b267_s45 = ctx
            .emitter()
            .read_register(
                b267_s44.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b267_s46: branch b267_s45 block78 block77
        return ctx
            .emitter()
            .branch(
                b267_s45.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_268(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b268_s0: const #24s : i5
        let b268_s0 = ctx
            .emitter()
            .constant(
                24isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b268_s1: const #14656u : u32
        let b268_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b268_s2: read-reg b268_s1:i
        let b268_s2 = ctx
            .emitter()
            .read_register(
                b268_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b268_s3: cmp-lt b268_s2 b268_s0
        let b268_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b268_s2.clone(), b268_s0.clone()),
            );
        // b268_s4: not b268_s3
        let b268_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b268_s3.clone()));
        // b268_s5: branch b268_s4 block12 block269
        return ctx
            .emitter()
            .branch(
                b268_s4.clone(),
                fn_state.block_refs[12usize].clone(),
                fn_state.block_refs[269usize].clone(),
            );
    }
    fn block_269(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b269_s0: const #24s : i5
        let b269_s0 = ctx
            .emitter()
            .constant(
                24isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b269_s1: const #14656u : u32
        let b269_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b269_s2: write-reg b269_s1 <= b269_s0
        let b269_s2 = ctx.emitter().write_register(b269_s1.clone(), b269_s0.clone());
        // b269_s3: const #0s : i0
        let b269_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b269_s4: const #5s : i3
        let b269_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b269_s5: read-var u#25765:u32
        let b269_s5 = ctx.emitter().read_variable(fn_state.u_25765.clone());
        // b269_s6: bit-extract b269_s5 b269_s3 b269_s4
        let b269_s6 = ctx
            .emitter()
            .bit_extract(b269_s5.clone(), b269_s3.clone(), b269_s4.clone());
        // b269_s7: cast reint b269_s6 -> u5
        let b269_s7 = ctx
            .emitter()
            .cast(
                b269_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b269_s8: const #5s : i3
        let b269_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b269_s9: const #5s : i3
        let b269_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b269_s10: read-var u#25765:u32
        let b269_s10 = ctx.emitter().read_variable(fn_state.u_25765.clone());
        // b269_s11: bit-extract b269_s10 b269_s8 b269_s9
        let b269_s11 = ctx
            .emitter()
            .bit_extract(b269_s10.clone(), b269_s8.clone(), b269_s9.clone());
        // b269_s12: cast reint b269_s11 -> u5
        let b269_s12 = ctx
            .emitter()
            .cast(
                b269_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b269_s13: const #10s : i4
        let b269_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b269_s14: const #3s : i2
        let b269_s14 = ctx
            .emitter()
            .constant(
                3isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b269_s15: read-var u#25765:u32
        let b269_s15 = ctx.emitter().read_variable(fn_state.u_25765.clone());
        // b269_s16: bit-extract b269_s15 b269_s13 b269_s14
        let b269_s16 = ctx
            .emitter()
            .bit_extract(b269_s15.clone(), b269_s13.clone(), b269_s14.clone());
        // b269_s17: cast reint b269_s16 -> u3
        let b269_s17 = ctx
            .emitter()
            .cast(
                b269_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 3,
                },
                CastOperationKind::Reinterpret,
            );
        // b269_s18: const #13s : i4
        let b269_s18 = ctx
            .emitter()
            .constant(
                13isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b269_s19: const #3s : i2
        let b269_s19 = ctx
            .emitter()
            .constant(
                3isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b269_s20: read-var u#25765:u32
        let b269_s20 = ctx.emitter().read_variable(fn_state.u_25765.clone());
        // b269_s21: bit-extract b269_s20 b269_s18 b269_s19
        let b269_s21 = ctx
            .emitter()
            .bit_extract(b269_s20.clone(), b269_s18.clone(), b269_s19.clone());
        // b269_s22: cast reint b269_s21 -> u3
        let b269_s22 = ctx
            .emitter()
            .cast(
                b269_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 3,
                },
                CastOperationKind::Reinterpret,
            );
        // b269_s23: const #16s : i5
        let b269_s23 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b269_s24: const #5s : i3
        let b269_s24 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b269_s25: read-var u#25765:u32
        let b269_s25 = ctx.emitter().read_variable(fn_state.u_25765.clone());
        // b269_s26: bit-extract b269_s25 b269_s23 b269_s24
        let b269_s26 = ctx
            .emitter()
            .bit_extract(b269_s25.clone(), b269_s23.clone(), b269_s24.clone());
        // b269_s27: cast reint b269_s26 -> u5
        let b269_s27 = ctx
            .emitter()
            .cast(
                b269_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b269_s28: const #29s : i5
        let b269_s28 = ctx
            .emitter()
            .constant(
                29isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b269_s29: const #1s : i1
        let b269_s29 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b269_s30: read-var u#25765:u32
        let b269_s30 = ctx.emitter().read_variable(fn_state.u_25765.clone());
        // b269_s31: bit-extract b269_s30 b269_s28 b269_s29
        let b269_s31 = ctx
            .emitter()
            .bit_extract(b269_s30.clone(), b269_s28.clone(), b269_s29.clone());
        // b269_s32: cast reint b269_s31 -> u1
        let b269_s32 = ctx
            .emitter()
            .cast(
                b269_s31.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b269_s33: const #30s : i5
        let b269_s33 = ctx
            .emitter()
            .constant(
                30isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b269_s34: const #1s : i1
        let b269_s34 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b269_s35: read-var u#25765:u32
        let b269_s35 = ctx.emitter().read_variable(fn_state.u_25765.clone());
        // b269_s36: bit-extract b269_s35 b269_s33 b269_s34
        let b269_s36 = ctx
            .emitter()
            .bit_extract(b269_s35.clone(), b269_s33.clone(), b269_s34.clone());
        // b269_s37: cast reint b269_s36 -> u1
        let b269_s37 = ctx
            .emitter()
            .cast(
                b269_s36.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b269_s38: const #31s : i5
        let b269_s38 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b269_s39: const #1s : i1
        let b269_s39 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b269_s40: read-var u#25765:u32
        let b269_s40 = ctx.emitter().read_variable(fn_state.u_25765.clone());
        // b269_s41: bit-extract b269_s40 b269_s38 b269_s39
        let b269_s41 = ctx
            .emitter()
            .bit_extract(b269_s40.clone(), b269_s38.clone(), b269_s39.clone());
        // b269_s42: cast reint b269_s41 -> u1
        let b269_s42 = ctx
            .emitter()
            .cast(
                b269_s41.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b269_s43: call decode_sub_addsub_ext_aarch64_instrs_integer_arithmetic_add_sub_extendedreg(b269_s7, b269_s12, b269_s17, b269_s22, b269_s27, b269_s32, b269_s37, b269_s42)
        let b269_s43 = decode_sub_addsub_ext_aarch64_instrs_integer_arithmetic_add_sub_extendedreg(
            ctx,
            b269_s7,
            b269_s12,
            b269_s17,
            b269_s22,
            b269_s27,
            b269_s32,
            b269_s37,
            b269_s42,
        );
        // b269_s44: const #15616u : u32
        let b269_s44 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b269_s45: read-reg b269_s44:u1
        let b269_s45 = ctx
            .emitter()
            .read_register(
                b269_s44.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b269_s46: branch b269_s45 block78 block77
        return ctx
            .emitter()
            .branch(
                b269_s45.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_270(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b270_s0: const #23s : i5
        let b270_s0 = ctx
            .emitter()
            .constant(
                23isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b270_s1: const #14656u : u32
        let b270_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b270_s2: read-reg b270_s1:i
        let b270_s2 = ctx
            .emitter()
            .read_register(
                b270_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b270_s3: cmp-lt b270_s2 b270_s0
        let b270_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b270_s2.clone(), b270_s0.clone()),
            );
        // b270_s4: not b270_s3
        let b270_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b270_s3.clone()));
        // b270_s5: branch b270_s4 block11 block271
        return ctx
            .emitter()
            .branch(
                b270_s4.clone(),
                fn_state.block_refs[11usize].clone(),
                fn_state.block_refs[271usize].clone(),
            );
    }
    fn block_271(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b271_s0: const #23s : i5
        let b271_s0 = ctx
            .emitter()
            .constant(
                23isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b271_s1: const #14656u : u32
        let b271_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b271_s2: write-reg b271_s1 <= b271_s0
        let b271_s2 = ctx.emitter().write_register(b271_s1.clone(), b271_s0.clone());
        // b271_s3: const #0s : i0
        let b271_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b271_s4: const #5s : i3
        let b271_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b271_s5: read-var u#25755:u32
        let b271_s5 = ctx.emitter().read_variable(fn_state.u_25755.clone());
        // b271_s6: bit-extract b271_s5 b271_s3 b271_s4
        let b271_s6 = ctx
            .emitter()
            .bit_extract(b271_s5.clone(), b271_s3.clone(), b271_s4.clone());
        // b271_s7: cast reint b271_s6 -> u5
        let b271_s7 = ctx
            .emitter()
            .cast(
                b271_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b271_s8: const #5s : i3
        let b271_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b271_s9: const #5s : i3
        let b271_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b271_s10: read-var u#25755:u32
        let b271_s10 = ctx.emitter().read_variable(fn_state.u_25755.clone());
        // b271_s11: bit-extract b271_s10 b271_s8 b271_s9
        let b271_s11 = ctx
            .emitter()
            .bit_extract(b271_s10.clone(), b271_s8.clone(), b271_s9.clone());
        // b271_s12: cast reint b271_s11 -> u5
        let b271_s12 = ctx
            .emitter()
            .cast(
                b271_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b271_s13: const #10s : i4
        let b271_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b271_s14: const #3s : i2
        let b271_s14 = ctx
            .emitter()
            .constant(
                3isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b271_s15: read-var u#25755:u32
        let b271_s15 = ctx.emitter().read_variable(fn_state.u_25755.clone());
        // b271_s16: bit-extract b271_s15 b271_s13 b271_s14
        let b271_s16 = ctx
            .emitter()
            .bit_extract(b271_s15.clone(), b271_s13.clone(), b271_s14.clone());
        // b271_s17: cast reint b271_s16 -> u3
        let b271_s17 = ctx
            .emitter()
            .cast(
                b271_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 3,
                },
                CastOperationKind::Reinterpret,
            );
        // b271_s18: const #13s : i4
        let b271_s18 = ctx
            .emitter()
            .constant(
                13isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b271_s19: const #3s : i2
        let b271_s19 = ctx
            .emitter()
            .constant(
                3isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b271_s20: read-var u#25755:u32
        let b271_s20 = ctx.emitter().read_variable(fn_state.u_25755.clone());
        // b271_s21: bit-extract b271_s20 b271_s18 b271_s19
        let b271_s21 = ctx
            .emitter()
            .bit_extract(b271_s20.clone(), b271_s18.clone(), b271_s19.clone());
        // b271_s22: cast reint b271_s21 -> u3
        let b271_s22 = ctx
            .emitter()
            .cast(
                b271_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 3,
                },
                CastOperationKind::Reinterpret,
            );
        // b271_s23: const #16s : i5
        let b271_s23 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b271_s24: const #5s : i3
        let b271_s24 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b271_s25: read-var u#25755:u32
        let b271_s25 = ctx.emitter().read_variable(fn_state.u_25755.clone());
        // b271_s26: bit-extract b271_s25 b271_s23 b271_s24
        let b271_s26 = ctx
            .emitter()
            .bit_extract(b271_s25.clone(), b271_s23.clone(), b271_s24.clone());
        // b271_s27: cast reint b271_s26 -> u5
        let b271_s27 = ctx
            .emitter()
            .cast(
                b271_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b271_s28: const #29s : i5
        let b271_s28 = ctx
            .emitter()
            .constant(
                29isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b271_s29: const #1s : i1
        let b271_s29 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b271_s30: read-var u#25755:u32
        let b271_s30 = ctx.emitter().read_variable(fn_state.u_25755.clone());
        // b271_s31: bit-extract b271_s30 b271_s28 b271_s29
        let b271_s31 = ctx
            .emitter()
            .bit_extract(b271_s30.clone(), b271_s28.clone(), b271_s29.clone());
        // b271_s32: cast reint b271_s31 -> u1
        let b271_s32 = ctx
            .emitter()
            .cast(
                b271_s31.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b271_s33: const #30s : i5
        let b271_s33 = ctx
            .emitter()
            .constant(
                30isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b271_s34: const #1s : i1
        let b271_s34 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b271_s35: read-var u#25755:u32
        let b271_s35 = ctx.emitter().read_variable(fn_state.u_25755.clone());
        // b271_s36: bit-extract b271_s35 b271_s33 b271_s34
        let b271_s36 = ctx
            .emitter()
            .bit_extract(b271_s35.clone(), b271_s33.clone(), b271_s34.clone());
        // b271_s37: cast reint b271_s36 -> u1
        let b271_s37 = ctx
            .emitter()
            .cast(
                b271_s36.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b271_s38: const #31s : i5
        let b271_s38 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b271_s39: const #1s : i1
        let b271_s39 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b271_s40: read-var u#25755:u32
        let b271_s40 = ctx.emitter().read_variable(fn_state.u_25755.clone());
        // b271_s41: bit-extract b271_s40 b271_s38 b271_s39
        let b271_s41 = ctx
            .emitter()
            .bit_extract(b271_s40.clone(), b271_s38.clone(), b271_s39.clone());
        // b271_s42: cast reint b271_s41 -> u1
        let b271_s42 = ctx
            .emitter()
            .cast(
                b271_s41.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b271_s43: call decode_adds_addsub_ext_aarch64_instrs_integer_arithmetic_add_sub_extendedreg(b271_s7, b271_s12, b271_s17, b271_s22, b271_s27, b271_s32, b271_s37, b271_s42)
        let b271_s43 = decode_adds_addsub_ext_aarch64_instrs_integer_arithmetic_add_sub_extendedreg(
            ctx,
            b271_s7,
            b271_s12,
            b271_s17,
            b271_s22,
            b271_s27,
            b271_s32,
            b271_s37,
            b271_s42,
        );
        // b271_s44: const #15616u : u32
        let b271_s44 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b271_s45: read-reg b271_s44:u1
        let b271_s45 = ctx
            .emitter()
            .read_register(
                b271_s44.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b271_s46: branch b271_s45 block78 block77
        return ctx
            .emitter()
            .branch(
                b271_s45.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_272(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b272_s0: const #22s : i5
        let b272_s0 = ctx
            .emitter()
            .constant(
                22isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b272_s1: const #14656u : u32
        let b272_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b272_s2: read-reg b272_s1:i
        let b272_s2 = ctx
            .emitter()
            .read_register(
                b272_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b272_s3: cmp-lt b272_s2 b272_s0
        let b272_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b272_s2.clone(), b272_s0.clone()),
            );
        // b272_s4: not b272_s3
        let b272_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b272_s3.clone()));
        // b272_s5: branch b272_s4 block10 block273
        return ctx
            .emitter()
            .branch(
                b272_s4.clone(),
                fn_state.block_refs[10usize].clone(),
                fn_state.block_refs[273usize].clone(),
            );
    }
    fn block_273(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b273_s0: const #22s : i5
        let b273_s0 = ctx
            .emitter()
            .constant(
                22isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b273_s1: const #14656u : u32
        let b273_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b273_s2: write-reg b273_s1 <= b273_s0
        let b273_s2 = ctx.emitter().write_register(b273_s1.clone(), b273_s0.clone());
        // b273_s3: const #0s : i0
        let b273_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b273_s4: const #5s : i3
        let b273_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b273_s5: read-var u#25747:u32
        let b273_s5 = ctx.emitter().read_variable(fn_state.u_25747.clone());
        // b273_s6: bit-extract b273_s5 b273_s3 b273_s4
        let b273_s6 = ctx
            .emitter()
            .bit_extract(b273_s5.clone(), b273_s3.clone(), b273_s4.clone());
        // b273_s7: cast reint b273_s6 -> u5
        let b273_s7 = ctx
            .emitter()
            .cast(
                b273_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b273_s8: const #5s : i3
        let b273_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b273_s9: const #5s : i3
        let b273_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b273_s10: read-var u#25747:u32
        let b273_s10 = ctx.emitter().read_variable(fn_state.u_25747.clone());
        // b273_s11: bit-extract b273_s10 b273_s8 b273_s9
        let b273_s11 = ctx
            .emitter()
            .bit_extract(b273_s10.clone(), b273_s8.clone(), b273_s9.clone());
        // b273_s12: cast reint b273_s11 -> u5
        let b273_s12 = ctx
            .emitter()
            .cast(
                b273_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b273_s13: const #10s : i4
        let b273_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b273_s14: const #3s : i2
        let b273_s14 = ctx
            .emitter()
            .constant(
                3isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b273_s15: read-var u#25747:u32
        let b273_s15 = ctx.emitter().read_variable(fn_state.u_25747.clone());
        // b273_s16: bit-extract b273_s15 b273_s13 b273_s14
        let b273_s16 = ctx
            .emitter()
            .bit_extract(b273_s15.clone(), b273_s13.clone(), b273_s14.clone());
        // b273_s17: cast reint b273_s16 -> u3
        let b273_s17 = ctx
            .emitter()
            .cast(
                b273_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 3,
                },
                CastOperationKind::Reinterpret,
            );
        // b273_s18: const #13s : i4
        let b273_s18 = ctx
            .emitter()
            .constant(
                13isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b273_s19: const #3s : i2
        let b273_s19 = ctx
            .emitter()
            .constant(
                3isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b273_s20: read-var u#25747:u32
        let b273_s20 = ctx.emitter().read_variable(fn_state.u_25747.clone());
        // b273_s21: bit-extract b273_s20 b273_s18 b273_s19
        let b273_s21 = ctx
            .emitter()
            .bit_extract(b273_s20.clone(), b273_s18.clone(), b273_s19.clone());
        // b273_s22: cast reint b273_s21 -> u3
        let b273_s22 = ctx
            .emitter()
            .cast(
                b273_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 3,
                },
                CastOperationKind::Reinterpret,
            );
        // b273_s23: const #16s : i5
        let b273_s23 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b273_s24: const #5s : i3
        let b273_s24 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b273_s25: read-var u#25747:u32
        let b273_s25 = ctx.emitter().read_variable(fn_state.u_25747.clone());
        // b273_s26: bit-extract b273_s25 b273_s23 b273_s24
        let b273_s26 = ctx
            .emitter()
            .bit_extract(b273_s25.clone(), b273_s23.clone(), b273_s24.clone());
        // b273_s27: cast reint b273_s26 -> u5
        let b273_s27 = ctx
            .emitter()
            .cast(
                b273_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b273_s28: const #29s : i5
        let b273_s28 = ctx
            .emitter()
            .constant(
                29isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b273_s29: const #1s : i1
        let b273_s29 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b273_s30: read-var u#25747:u32
        let b273_s30 = ctx.emitter().read_variable(fn_state.u_25747.clone());
        // b273_s31: bit-extract b273_s30 b273_s28 b273_s29
        let b273_s31 = ctx
            .emitter()
            .bit_extract(b273_s30.clone(), b273_s28.clone(), b273_s29.clone());
        // b273_s32: cast reint b273_s31 -> u1
        let b273_s32 = ctx
            .emitter()
            .cast(
                b273_s31.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b273_s33: const #30s : i5
        let b273_s33 = ctx
            .emitter()
            .constant(
                30isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b273_s34: const #1s : i1
        let b273_s34 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b273_s35: read-var u#25747:u32
        let b273_s35 = ctx.emitter().read_variable(fn_state.u_25747.clone());
        // b273_s36: bit-extract b273_s35 b273_s33 b273_s34
        let b273_s36 = ctx
            .emitter()
            .bit_extract(b273_s35.clone(), b273_s33.clone(), b273_s34.clone());
        // b273_s37: cast reint b273_s36 -> u1
        let b273_s37 = ctx
            .emitter()
            .cast(
                b273_s36.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b273_s38: const #31s : i5
        let b273_s38 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b273_s39: const #1s : i1
        let b273_s39 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b273_s40: read-var u#25747:u32
        let b273_s40 = ctx.emitter().read_variable(fn_state.u_25747.clone());
        // b273_s41: bit-extract b273_s40 b273_s38 b273_s39
        let b273_s41 = ctx
            .emitter()
            .bit_extract(b273_s40.clone(), b273_s38.clone(), b273_s39.clone());
        // b273_s42: cast reint b273_s41 -> u1
        let b273_s42 = ctx
            .emitter()
            .cast(
                b273_s41.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b273_s43: call decode_add_addsub_ext_aarch64_instrs_integer_arithmetic_add_sub_extendedreg(b273_s7, b273_s12, b273_s17, b273_s22, b273_s27, b273_s32, b273_s37, b273_s42)
        let b273_s43 = decode_add_addsub_ext_aarch64_instrs_integer_arithmetic_add_sub_extendedreg(
            ctx,
            b273_s7,
            b273_s12,
            b273_s17,
            b273_s22,
            b273_s27,
            b273_s32,
            b273_s37,
            b273_s42,
        );
        // b273_s44: const #15616u : u32
        let b273_s44 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b273_s45: read-reg b273_s44:u1
        let b273_s45 = ctx
            .emitter()
            .read_register(
                b273_s44.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b273_s46: branch b273_s45 block78 block77
        return ctx
            .emitter()
            .branch(
                b273_s45.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_274(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b274_s0: const #21s : i5
        let b274_s0 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b274_s1: read-var u#25737:u32
        let b274_s1 = ctx.emitter().read_variable(fn_state.u_25737.clone());
        // b274_s2: const #1s : i0
        let b274_s2 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b274_s3: bit-extract b274_s1 b274_s0 b274_s2
        let b274_s3 = ctx
            .emitter()
            .bit_extract(b274_s1.clone(), b274_s0.clone(), b274_s2.clone());
        // b274_s4: cast reint b274_s3 -> u1
        let b274_s4 = ctx
            .emitter()
            .cast(
                b274_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b274_s5: const #0u : u1
        let b274_s5 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b274_s6: cmp-eq b274_s4 b274_s5
        let b274_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b274_s4.clone(), b274_s5.clone()),
            );
        // b274_s7: branch b274_s6 block275 block9
        return ctx
            .emitter()
            .branch(
                b274_s6.clone(),
                fn_state.block_refs[275usize].clone(),
                fn_state.block_refs[9usize].clone(),
            );
    }
    fn block_275(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b275_s0: const #17s : i5
        let b275_s0 = ctx
            .emitter()
            .constant(
                17isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b275_s1: const #14656u : u32
        let b275_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b275_s2: read-reg b275_s1:i
        let b275_s2 = ctx
            .emitter()
            .read_register(
                b275_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b275_s3: cmp-lt b275_s2 b275_s0
        let b275_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b275_s2.clone(), b275_s0.clone()),
            );
        // b275_s4: not b275_s3
        let b275_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b275_s3.clone()));
        // b275_s5: branch b275_s4 block9 block276
        return ctx
            .emitter()
            .branch(
                b275_s4.clone(),
                fn_state.block_refs[9usize].clone(),
                fn_state.block_refs[276usize].clone(),
            );
    }
    fn block_276(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b276_s0: const #17s : i5
        let b276_s0 = ctx
            .emitter()
            .constant(
                17isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b276_s1: const #14656u : u32
        let b276_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b276_s2: write-reg b276_s1 <= b276_s0
        let b276_s2 = ctx.emitter().write_register(b276_s1.clone(), b276_s0.clone());
        // b276_s3: const #0s : i0
        let b276_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b276_s4: const #5s : i3
        let b276_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b276_s5: read-var u#25737:u32
        let b276_s5 = ctx.emitter().read_variable(fn_state.u_25737.clone());
        // b276_s6: bit-extract b276_s5 b276_s3 b276_s4
        let b276_s6 = ctx
            .emitter()
            .bit_extract(b276_s5.clone(), b276_s3.clone(), b276_s4.clone());
        // b276_s7: cast reint b276_s6 -> u5
        let b276_s7 = ctx
            .emitter()
            .cast(
                b276_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b276_s8: const #5s : i3
        let b276_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b276_s9: const #5s : i3
        let b276_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b276_s10: read-var u#25737:u32
        let b276_s10 = ctx.emitter().read_variable(fn_state.u_25737.clone());
        // b276_s11: bit-extract b276_s10 b276_s8 b276_s9
        let b276_s11 = ctx
            .emitter()
            .bit_extract(b276_s10.clone(), b276_s8.clone(), b276_s9.clone());
        // b276_s12: cast reint b276_s11 -> u5
        let b276_s12 = ctx
            .emitter()
            .cast(
                b276_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b276_s13: const #10s : i4
        let b276_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b276_s14: const #6s : i3
        let b276_s14 = ctx
            .emitter()
            .constant(
                6isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b276_s15: read-var u#25737:u32
        let b276_s15 = ctx.emitter().read_variable(fn_state.u_25737.clone());
        // b276_s16: bit-extract b276_s15 b276_s13 b276_s14
        let b276_s16 = ctx
            .emitter()
            .bit_extract(b276_s15.clone(), b276_s13.clone(), b276_s14.clone());
        // b276_s17: cast reint b276_s16 -> u6
        let b276_s17 = ctx
            .emitter()
            .cast(
                b276_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
                CastOperationKind::Reinterpret,
            );
        // b276_s18: const #16s : i5
        let b276_s18 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b276_s19: const #5s : i3
        let b276_s19 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b276_s20: read-var u#25737:u32
        let b276_s20 = ctx.emitter().read_variable(fn_state.u_25737.clone());
        // b276_s21: bit-extract b276_s20 b276_s18 b276_s19
        let b276_s21 = ctx
            .emitter()
            .bit_extract(b276_s20.clone(), b276_s18.clone(), b276_s19.clone());
        // b276_s22: cast reint b276_s21 -> u5
        let b276_s22 = ctx
            .emitter()
            .cast(
                b276_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b276_s23: const #22s : i5
        let b276_s23 = ctx
            .emitter()
            .constant(
                22isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b276_s24: const #2s : i2
        let b276_s24 = ctx
            .emitter()
            .constant(
                2isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b276_s25: read-var u#25737:u32
        let b276_s25 = ctx.emitter().read_variable(fn_state.u_25737.clone());
        // b276_s26: bit-extract b276_s25 b276_s23 b276_s24
        let b276_s26 = ctx
            .emitter()
            .bit_extract(b276_s25.clone(), b276_s23.clone(), b276_s24.clone());
        // b276_s27: cast reint b276_s26 -> u2
        let b276_s27 = ctx
            .emitter()
            .cast(
                b276_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
                CastOperationKind::Reinterpret,
            );
        // b276_s28: const #29s : i5
        let b276_s28 = ctx
            .emitter()
            .constant(
                29isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b276_s29: const #1s : i1
        let b276_s29 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b276_s30: read-var u#25737:u32
        let b276_s30 = ctx.emitter().read_variable(fn_state.u_25737.clone());
        // b276_s31: bit-extract b276_s30 b276_s28 b276_s29
        let b276_s31 = ctx
            .emitter()
            .bit_extract(b276_s30.clone(), b276_s28.clone(), b276_s29.clone());
        // b276_s32: cast reint b276_s31 -> u1
        let b276_s32 = ctx
            .emitter()
            .cast(
                b276_s31.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b276_s33: const #30s : i5
        let b276_s33 = ctx
            .emitter()
            .constant(
                30isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b276_s34: const #1s : i1
        let b276_s34 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b276_s35: read-var u#25737:u32
        let b276_s35 = ctx.emitter().read_variable(fn_state.u_25737.clone());
        // b276_s36: bit-extract b276_s35 b276_s33 b276_s34
        let b276_s36 = ctx
            .emitter()
            .bit_extract(b276_s35.clone(), b276_s33.clone(), b276_s34.clone());
        // b276_s37: cast reint b276_s36 -> u1
        let b276_s37 = ctx
            .emitter()
            .cast(
                b276_s36.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b276_s38: const #31s : i5
        let b276_s38 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b276_s39: const #1s : i1
        let b276_s39 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b276_s40: read-var u#25737:u32
        let b276_s40 = ctx.emitter().read_variable(fn_state.u_25737.clone());
        // b276_s41: bit-extract b276_s40 b276_s38 b276_s39
        let b276_s41 = ctx
            .emitter()
            .bit_extract(b276_s40.clone(), b276_s38.clone(), b276_s39.clone());
        // b276_s42: cast reint b276_s41 -> u1
        let b276_s42 = ctx
            .emitter()
            .cast(
                b276_s41.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b276_s43: call decode_subs_addsub_shift_aarch64_instrs_integer_arithmetic_add_sub_shiftedreg(b276_s7, b276_s12, b276_s17, b276_s22, b276_s27, b276_s32, b276_s37, b276_s42)
        let b276_s43 = decode_subs_addsub_shift_aarch64_instrs_integer_arithmetic_add_sub_shiftedreg(
            ctx,
            b276_s7,
            b276_s12,
            b276_s17,
            b276_s22,
            b276_s27,
            b276_s32,
            b276_s37,
            b276_s42,
        );
        // b276_s44: const #15616u : u32
        let b276_s44 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b276_s45: read-reg b276_s44:u1
        let b276_s45 = ctx
            .emitter()
            .read_register(
                b276_s44.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b276_s46: branch b276_s45 block78 block77
        return ctx
            .emitter()
            .branch(
                b276_s45.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_277(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b277_s0: const #21s : i5
        let b277_s0 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b277_s1: read-var u#25727:u32
        let b277_s1 = ctx.emitter().read_variable(fn_state.u_25727.clone());
        // b277_s2: const #1s : i0
        let b277_s2 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b277_s3: bit-extract b277_s1 b277_s0 b277_s2
        let b277_s3 = ctx
            .emitter()
            .bit_extract(b277_s1.clone(), b277_s0.clone(), b277_s2.clone());
        // b277_s4: cast reint b277_s3 -> u1
        let b277_s4 = ctx
            .emitter()
            .cast(
                b277_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b277_s5: const #0u : u1
        let b277_s5 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b277_s6: cmp-eq b277_s4 b277_s5
        let b277_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b277_s4.clone(), b277_s5.clone()),
            );
        // b277_s7: branch b277_s6 block278 block8
        return ctx
            .emitter()
            .branch(
                b277_s6.clone(),
                fn_state.block_refs[278usize].clone(),
                fn_state.block_refs[8usize].clone(),
            );
    }
    fn block_278(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b278_s0: const #16s : i5
        let b278_s0 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b278_s1: const #14656u : u32
        let b278_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b278_s2: read-reg b278_s1:i
        let b278_s2 = ctx
            .emitter()
            .read_register(
                b278_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b278_s3: cmp-lt b278_s2 b278_s0
        let b278_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b278_s2.clone(), b278_s0.clone()),
            );
        // b278_s4: not b278_s3
        let b278_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b278_s3.clone()));
        // b278_s5: branch b278_s4 block8 block279
        return ctx
            .emitter()
            .branch(
                b278_s4.clone(),
                fn_state.block_refs[8usize].clone(),
                fn_state.block_refs[279usize].clone(),
            );
    }
    fn block_279(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b279_s0: const #16s : i5
        let b279_s0 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b279_s1: const #14656u : u32
        let b279_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b279_s2: write-reg b279_s1 <= b279_s0
        let b279_s2 = ctx.emitter().write_register(b279_s1.clone(), b279_s0.clone());
        // b279_s3: const #0s : i0
        let b279_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b279_s4: const #5s : i3
        let b279_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b279_s5: read-var u#25727:u32
        let b279_s5 = ctx.emitter().read_variable(fn_state.u_25727.clone());
        // b279_s6: bit-extract b279_s5 b279_s3 b279_s4
        let b279_s6 = ctx
            .emitter()
            .bit_extract(b279_s5.clone(), b279_s3.clone(), b279_s4.clone());
        // b279_s7: cast reint b279_s6 -> u5
        let b279_s7 = ctx
            .emitter()
            .cast(
                b279_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b279_s8: const #5s : i3
        let b279_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b279_s9: const #5s : i3
        let b279_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b279_s10: read-var u#25727:u32
        let b279_s10 = ctx.emitter().read_variable(fn_state.u_25727.clone());
        // b279_s11: bit-extract b279_s10 b279_s8 b279_s9
        let b279_s11 = ctx
            .emitter()
            .bit_extract(b279_s10.clone(), b279_s8.clone(), b279_s9.clone());
        // b279_s12: cast reint b279_s11 -> u5
        let b279_s12 = ctx
            .emitter()
            .cast(
                b279_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b279_s13: const #10s : i4
        let b279_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b279_s14: const #6s : i3
        let b279_s14 = ctx
            .emitter()
            .constant(
                6isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b279_s15: read-var u#25727:u32
        let b279_s15 = ctx.emitter().read_variable(fn_state.u_25727.clone());
        // b279_s16: bit-extract b279_s15 b279_s13 b279_s14
        let b279_s16 = ctx
            .emitter()
            .bit_extract(b279_s15.clone(), b279_s13.clone(), b279_s14.clone());
        // b279_s17: cast reint b279_s16 -> u6
        let b279_s17 = ctx
            .emitter()
            .cast(
                b279_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
                CastOperationKind::Reinterpret,
            );
        // b279_s18: const #16s : i5
        let b279_s18 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b279_s19: const #5s : i3
        let b279_s19 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b279_s20: read-var u#25727:u32
        let b279_s20 = ctx.emitter().read_variable(fn_state.u_25727.clone());
        // b279_s21: bit-extract b279_s20 b279_s18 b279_s19
        let b279_s21 = ctx
            .emitter()
            .bit_extract(b279_s20.clone(), b279_s18.clone(), b279_s19.clone());
        // b279_s22: cast reint b279_s21 -> u5
        let b279_s22 = ctx
            .emitter()
            .cast(
                b279_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b279_s23: const #22s : i5
        let b279_s23 = ctx
            .emitter()
            .constant(
                22isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b279_s24: const #2s : i2
        let b279_s24 = ctx
            .emitter()
            .constant(
                2isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b279_s25: read-var u#25727:u32
        let b279_s25 = ctx.emitter().read_variable(fn_state.u_25727.clone());
        // b279_s26: bit-extract b279_s25 b279_s23 b279_s24
        let b279_s26 = ctx
            .emitter()
            .bit_extract(b279_s25.clone(), b279_s23.clone(), b279_s24.clone());
        // b279_s27: cast reint b279_s26 -> u2
        let b279_s27 = ctx
            .emitter()
            .cast(
                b279_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
                CastOperationKind::Reinterpret,
            );
        // b279_s28: const #29s : i5
        let b279_s28 = ctx
            .emitter()
            .constant(
                29isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b279_s29: const #1s : i1
        let b279_s29 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b279_s30: read-var u#25727:u32
        let b279_s30 = ctx.emitter().read_variable(fn_state.u_25727.clone());
        // b279_s31: bit-extract b279_s30 b279_s28 b279_s29
        let b279_s31 = ctx
            .emitter()
            .bit_extract(b279_s30.clone(), b279_s28.clone(), b279_s29.clone());
        // b279_s32: cast reint b279_s31 -> u1
        let b279_s32 = ctx
            .emitter()
            .cast(
                b279_s31.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b279_s33: const #30s : i5
        let b279_s33 = ctx
            .emitter()
            .constant(
                30isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b279_s34: const #1s : i1
        let b279_s34 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b279_s35: read-var u#25727:u32
        let b279_s35 = ctx.emitter().read_variable(fn_state.u_25727.clone());
        // b279_s36: bit-extract b279_s35 b279_s33 b279_s34
        let b279_s36 = ctx
            .emitter()
            .bit_extract(b279_s35.clone(), b279_s33.clone(), b279_s34.clone());
        // b279_s37: cast reint b279_s36 -> u1
        let b279_s37 = ctx
            .emitter()
            .cast(
                b279_s36.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b279_s38: const #31s : i5
        let b279_s38 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b279_s39: const #1s : i1
        let b279_s39 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b279_s40: read-var u#25727:u32
        let b279_s40 = ctx.emitter().read_variable(fn_state.u_25727.clone());
        // b279_s41: bit-extract b279_s40 b279_s38 b279_s39
        let b279_s41 = ctx
            .emitter()
            .bit_extract(b279_s40.clone(), b279_s38.clone(), b279_s39.clone());
        // b279_s42: cast reint b279_s41 -> u1
        let b279_s42 = ctx
            .emitter()
            .cast(
                b279_s41.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b279_s43: call decode_sub_addsub_shift_aarch64_instrs_integer_arithmetic_add_sub_shiftedreg(b279_s7, b279_s12, b279_s17, b279_s22, b279_s27, b279_s32, b279_s37, b279_s42)
        let b279_s43 = decode_sub_addsub_shift_aarch64_instrs_integer_arithmetic_add_sub_shiftedreg(
            ctx,
            b279_s7,
            b279_s12,
            b279_s17,
            b279_s22,
            b279_s27,
            b279_s32,
            b279_s37,
            b279_s42,
        );
        // b279_s44: const #15616u : u32
        let b279_s44 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b279_s45: read-reg b279_s44:u1
        let b279_s45 = ctx
            .emitter()
            .read_register(
                b279_s44.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b279_s46: branch b279_s45 block78 block77
        return ctx
            .emitter()
            .branch(
                b279_s45.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_280(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b280_s0: const #21s : i5
        let b280_s0 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b280_s1: read-var u#25717:u32
        let b280_s1 = ctx.emitter().read_variable(fn_state.u_25717.clone());
        // b280_s2: const #1s : i0
        let b280_s2 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b280_s3: bit-extract b280_s1 b280_s0 b280_s2
        let b280_s3 = ctx
            .emitter()
            .bit_extract(b280_s1.clone(), b280_s0.clone(), b280_s2.clone());
        // b280_s4: cast reint b280_s3 -> u1
        let b280_s4 = ctx
            .emitter()
            .cast(
                b280_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b280_s5: const #0u : u1
        let b280_s5 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b280_s6: cmp-eq b280_s4 b280_s5
        let b280_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b280_s4.clone(), b280_s5.clone()),
            );
        // b280_s7: branch b280_s6 block281 block7
        return ctx
            .emitter()
            .branch(
                b280_s6.clone(),
                fn_state.block_refs[281usize].clone(),
                fn_state.block_refs[7usize].clone(),
            );
    }
    fn block_281(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b281_s0: const #15s : i4
        let b281_s0 = ctx
            .emitter()
            .constant(
                15isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b281_s1: const #14656u : u32
        let b281_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b281_s2: read-reg b281_s1:i
        let b281_s2 = ctx
            .emitter()
            .read_register(
                b281_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b281_s3: cmp-lt b281_s2 b281_s0
        let b281_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b281_s2.clone(), b281_s0.clone()),
            );
        // b281_s4: not b281_s3
        let b281_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b281_s3.clone()));
        // b281_s5: branch b281_s4 block7 block282
        return ctx
            .emitter()
            .branch(
                b281_s4.clone(),
                fn_state.block_refs[7usize].clone(),
                fn_state.block_refs[282usize].clone(),
            );
    }
    fn block_282(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b282_s0: const #15s : i4
        let b282_s0 = ctx
            .emitter()
            .constant(
                15isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b282_s1: const #14656u : u32
        let b282_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b282_s2: write-reg b282_s1 <= b282_s0
        let b282_s2 = ctx.emitter().write_register(b282_s1.clone(), b282_s0.clone());
        // b282_s3: const #0s : i0
        let b282_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b282_s4: const #5s : i3
        let b282_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b282_s5: read-var u#25717:u32
        let b282_s5 = ctx.emitter().read_variable(fn_state.u_25717.clone());
        // b282_s6: bit-extract b282_s5 b282_s3 b282_s4
        let b282_s6 = ctx
            .emitter()
            .bit_extract(b282_s5.clone(), b282_s3.clone(), b282_s4.clone());
        // b282_s7: cast reint b282_s6 -> u5
        let b282_s7 = ctx
            .emitter()
            .cast(
                b282_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b282_s8: const #5s : i3
        let b282_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b282_s9: const #5s : i3
        let b282_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b282_s10: read-var u#25717:u32
        let b282_s10 = ctx.emitter().read_variable(fn_state.u_25717.clone());
        // b282_s11: bit-extract b282_s10 b282_s8 b282_s9
        let b282_s11 = ctx
            .emitter()
            .bit_extract(b282_s10.clone(), b282_s8.clone(), b282_s9.clone());
        // b282_s12: cast reint b282_s11 -> u5
        let b282_s12 = ctx
            .emitter()
            .cast(
                b282_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b282_s13: const #10s : i4
        let b282_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b282_s14: const #6s : i3
        let b282_s14 = ctx
            .emitter()
            .constant(
                6isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b282_s15: read-var u#25717:u32
        let b282_s15 = ctx.emitter().read_variable(fn_state.u_25717.clone());
        // b282_s16: bit-extract b282_s15 b282_s13 b282_s14
        let b282_s16 = ctx
            .emitter()
            .bit_extract(b282_s15.clone(), b282_s13.clone(), b282_s14.clone());
        // b282_s17: cast reint b282_s16 -> u6
        let b282_s17 = ctx
            .emitter()
            .cast(
                b282_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
                CastOperationKind::Reinterpret,
            );
        // b282_s18: const #16s : i5
        let b282_s18 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b282_s19: const #5s : i3
        let b282_s19 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b282_s20: read-var u#25717:u32
        let b282_s20 = ctx.emitter().read_variable(fn_state.u_25717.clone());
        // b282_s21: bit-extract b282_s20 b282_s18 b282_s19
        let b282_s21 = ctx
            .emitter()
            .bit_extract(b282_s20.clone(), b282_s18.clone(), b282_s19.clone());
        // b282_s22: cast reint b282_s21 -> u5
        let b282_s22 = ctx
            .emitter()
            .cast(
                b282_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b282_s23: const #22s : i5
        let b282_s23 = ctx
            .emitter()
            .constant(
                22isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b282_s24: const #2s : i2
        let b282_s24 = ctx
            .emitter()
            .constant(
                2isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b282_s25: read-var u#25717:u32
        let b282_s25 = ctx.emitter().read_variable(fn_state.u_25717.clone());
        // b282_s26: bit-extract b282_s25 b282_s23 b282_s24
        let b282_s26 = ctx
            .emitter()
            .bit_extract(b282_s25.clone(), b282_s23.clone(), b282_s24.clone());
        // b282_s27: cast reint b282_s26 -> u2
        let b282_s27 = ctx
            .emitter()
            .cast(
                b282_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
                CastOperationKind::Reinterpret,
            );
        // b282_s28: const #29s : i5
        let b282_s28 = ctx
            .emitter()
            .constant(
                29isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b282_s29: const #1s : i1
        let b282_s29 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b282_s30: read-var u#25717:u32
        let b282_s30 = ctx.emitter().read_variable(fn_state.u_25717.clone());
        // b282_s31: bit-extract b282_s30 b282_s28 b282_s29
        let b282_s31 = ctx
            .emitter()
            .bit_extract(b282_s30.clone(), b282_s28.clone(), b282_s29.clone());
        // b282_s32: cast reint b282_s31 -> u1
        let b282_s32 = ctx
            .emitter()
            .cast(
                b282_s31.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b282_s33: const #30s : i5
        let b282_s33 = ctx
            .emitter()
            .constant(
                30isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b282_s34: const #1s : i1
        let b282_s34 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b282_s35: read-var u#25717:u32
        let b282_s35 = ctx.emitter().read_variable(fn_state.u_25717.clone());
        // b282_s36: bit-extract b282_s35 b282_s33 b282_s34
        let b282_s36 = ctx
            .emitter()
            .bit_extract(b282_s35.clone(), b282_s33.clone(), b282_s34.clone());
        // b282_s37: cast reint b282_s36 -> u1
        let b282_s37 = ctx
            .emitter()
            .cast(
                b282_s36.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b282_s38: const #31s : i5
        let b282_s38 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b282_s39: const #1s : i1
        let b282_s39 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b282_s40: read-var u#25717:u32
        let b282_s40 = ctx.emitter().read_variable(fn_state.u_25717.clone());
        // b282_s41: bit-extract b282_s40 b282_s38 b282_s39
        let b282_s41 = ctx
            .emitter()
            .bit_extract(b282_s40.clone(), b282_s38.clone(), b282_s39.clone());
        // b282_s42: cast reint b282_s41 -> u1
        let b282_s42 = ctx
            .emitter()
            .cast(
                b282_s41.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b282_s43: call decode_adds_addsub_shift_aarch64_instrs_integer_arithmetic_add_sub_shiftedreg(b282_s7, b282_s12, b282_s17, b282_s22, b282_s27, b282_s32, b282_s37, b282_s42)
        let b282_s43 = decode_adds_addsub_shift_aarch64_instrs_integer_arithmetic_add_sub_shiftedreg(
            ctx,
            b282_s7,
            b282_s12,
            b282_s17,
            b282_s22,
            b282_s27,
            b282_s32,
            b282_s37,
            b282_s42,
        );
        // b282_s44: const #15616u : u32
        let b282_s44 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b282_s45: read-reg b282_s44:u1
        let b282_s45 = ctx
            .emitter()
            .read_register(
                b282_s44.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b282_s46: branch b282_s45 block78 block77
        return ctx
            .emitter()
            .branch(
                b282_s45.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_283(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b283_s0: const #21s : i5
        let b283_s0 = ctx
            .emitter()
            .constant(
                21isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b283_s1: read-var u#25709:u32
        let b283_s1 = ctx.emitter().read_variable(fn_state.u_25709.clone());
        // b283_s2: const #1s : i0
        let b283_s2 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b283_s3: bit-extract b283_s1 b283_s0 b283_s2
        let b283_s3 = ctx
            .emitter()
            .bit_extract(b283_s1.clone(), b283_s0.clone(), b283_s2.clone());
        // b283_s4: cast reint b283_s3 -> u1
        let b283_s4 = ctx
            .emitter()
            .cast(
                b283_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b283_s5: const #0u : u1
        let b283_s5 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b283_s6: cmp-eq b283_s4 b283_s5
        let b283_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b283_s4.clone(), b283_s5.clone()),
            );
        // b283_s7: branch b283_s6 block284 block6
        return ctx
            .emitter()
            .branch(
                b283_s6.clone(),
                fn_state.block_refs[284usize].clone(),
                fn_state.block_refs[6usize].clone(),
            );
    }
    fn block_284(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b284_s0: const #14s : i4
        let b284_s0 = ctx
            .emitter()
            .constant(
                14isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b284_s1: const #14656u : u32
        let b284_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b284_s2: read-reg b284_s1:i
        let b284_s2 = ctx
            .emitter()
            .read_register(
                b284_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b284_s3: cmp-lt b284_s2 b284_s0
        let b284_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b284_s2.clone(), b284_s0.clone()),
            );
        // b284_s4: not b284_s3
        let b284_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b284_s3.clone()));
        // b284_s5: branch b284_s4 block6 block285
        return ctx
            .emitter()
            .branch(
                b284_s4.clone(),
                fn_state.block_refs[6usize].clone(),
                fn_state.block_refs[285usize].clone(),
            );
    }
    fn block_285(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b285_s0: const #14s : i4
        let b285_s0 = ctx
            .emitter()
            .constant(
                14isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b285_s1: const #14656u : u32
        let b285_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b285_s2: write-reg b285_s1 <= b285_s0
        let b285_s2 = ctx.emitter().write_register(b285_s1.clone(), b285_s0.clone());
        // b285_s3: const #0s : i0
        let b285_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b285_s4: const #5s : i3
        let b285_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b285_s5: read-var u#25709:u32
        let b285_s5 = ctx.emitter().read_variable(fn_state.u_25709.clone());
        // b285_s6: bit-extract b285_s5 b285_s3 b285_s4
        let b285_s6 = ctx
            .emitter()
            .bit_extract(b285_s5.clone(), b285_s3.clone(), b285_s4.clone());
        // b285_s7: cast reint b285_s6 -> u5
        let b285_s7 = ctx
            .emitter()
            .cast(
                b285_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b285_s8: const #5s : i3
        let b285_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b285_s9: const #5s : i3
        let b285_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b285_s10: read-var u#25709:u32
        let b285_s10 = ctx.emitter().read_variable(fn_state.u_25709.clone());
        // b285_s11: bit-extract b285_s10 b285_s8 b285_s9
        let b285_s11 = ctx
            .emitter()
            .bit_extract(b285_s10.clone(), b285_s8.clone(), b285_s9.clone());
        // b285_s12: cast reint b285_s11 -> u5
        let b285_s12 = ctx
            .emitter()
            .cast(
                b285_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b285_s13: const #10s : i4
        let b285_s13 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b285_s14: const #6s : i3
        let b285_s14 = ctx
            .emitter()
            .constant(
                6isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b285_s15: read-var u#25709:u32
        let b285_s15 = ctx.emitter().read_variable(fn_state.u_25709.clone());
        // b285_s16: bit-extract b285_s15 b285_s13 b285_s14
        let b285_s16 = ctx
            .emitter()
            .bit_extract(b285_s15.clone(), b285_s13.clone(), b285_s14.clone());
        // b285_s17: cast reint b285_s16 -> u6
        let b285_s17 = ctx
            .emitter()
            .cast(
                b285_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
                CastOperationKind::Reinterpret,
            );
        // b285_s18: const #16s : i5
        let b285_s18 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b285_s19: const #5s : i3
        let b285_s19 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b285_s20: read-var u#25709:u32
        let b285_s20 = ctx.emitter().read_variable(fn_state.u_25709.clone());
        // b285_s21: bit-extract b285_s20 b285_s18 b285_s19
        let b285_s21 = ctx
            .emitter()
            .bit_extract(b285_s20.clone(), b285_s18.clone(), b285_s19.clone());
        // b285_s22: cast reint b285_s21 -> u5
        let b285_s22 = ctx
            .emitter()
            .cast(
                b285_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b285_s23: const #22s : i5
        let b285_s23 = ctx
            .emitter()
            .constant(
                22isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b285_s24: const #2s : i2
        let b285_s24 = ctx
            .emitter()
            .constant(
                2isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 2,
                },
            );
        // b285_s25: read-var u#25709:u32
        let b285_s25 = ctx.emitter().read_variable(fn_state.u_25709.clone());
        // b285_s26: bit-extract b285_s25 b285_s23 b285_s24
        let b285_s26 = ctx
            .emitter()
            .bit_extract(b285_s25.clone(), b285_s23.clone(), b285_s24.clone());
        // b285_s27: cast reint b285_s26 -> u2
        let b285_s27 = ctx
            .emitter()
            .cast(
                b285_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 2,
                },
                CastOperationKind::Reinterpret,
            );
        // b285_s28: const #29s : i5
        let b285_s28 = ctx
            .emitter()
            .constant(
                29isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b285_s29: const #1s : i1
        let b285_s29 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b285_s30: read-var u#25709:u32
        let b285_s30 = ctx.emitter().read_variable(fn_state.u_25709.clone());
        // b285_s31: bit-extract b285_s30 b285_s28 b285_s29
        let b285_s31 = ctx
            .emitter()
            .bit_extract(b285_s30.clone(), b285_s28.clone(), b285_s29.clone());
        // b285_s32: cast reint b285_s31 -> u1
        let b285_s32 = ctx
            .emitter()
            .cast(
                b285_s31.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b285_s33: const #30s : i5
        let b285_s33 = ctx
            .emitter()
            .constant(
                30isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b285_s34: const #1s : i1
        let b285_s34 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b285_s35: read-var u#25709:u32
        let b285_s35 = ctx.emitter().read_variable(fn_state.u_25709.clone());
        // b285_s36: bit-extract b285_s35 b285_s33 b285_s34
        let b285_s36 = ctx
            .emitter()
            .bit_extract(b285_s35.clone(), b285_s33.clone(), b285_s34.clone());
        // b285_s37: cast reint b285_s36 -> u1
        let b285_s37 = ctx
            .emitter()
            .cast(
                b285_s36.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b285_s38: const #31s : i5
        let b285_s38 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b285_s39: const #1s : i1
        let b285_s39 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b285_s40: read-var u#25709:u32
        let b285_s40 = ctx.emitter().read_variable(fn_state.u_25709.clone());
        // b285_s41: bit-extract b285_s40 b285_s38 b285_s39
        let b285_s41 = ctx
            .emitter()
            .bit_extract(b285_s40.clone(), b285_s38.clone(), b285_s39.clone());
        // b285_s42: cast reint b285_s41 -> u1
        let b285_s42 = ctx
            .emitter()
            .cast(
                b285_s41.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b285_s43: call decode_add_addsub_shift_aarch64_instrs_integer_arithmetic_add_sub_shiftedreg(b285_s7, b285_s12, b285_s17, b285_s22, b285_s27, b285_s32, b285_s37, b285_s42)
        let b285_s43 = decode_add_addsub_shift_aarch64_instrs_integer_arithmetic_add_sub_shiftedreg(
            ctx,
            b285_s7,
            b285_s12,
            b285_s17,
            b285_s22,
            b285_s27,
            b285_s32,
            b285_s37,
            b285_s42,
        );
        // b285_s44: const #15616u : u32
        let b285_s44 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b285_s45: read-reg b285_s44:u1
        let b285_s45 = ctx
            .emitter()
            .read_register(
                b285_s44.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b285_s46: branch b285_s45 block78 block77
        return ctx
            .emitter()
            .branch(
                b285_s45.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
    fn block_286(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b286_s0: const #10s : i4
        let b286_s0 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b286_s1: read-var u#25701:u32
        let b286_s1 = ctx.emitter().read_variable(fn_state.u_25701.clone());
        // b286_s2: const #6s : i3
        let b286_s2 = ctx
            .emitter()
            .constant(
                6isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b286_s3: bit-extract b286_s1 b286_s0 b286_s2
        let b286_s3 = ctx
            .emitter()
            .bit_extract(b286_s1.clone(), b286_s0.clone(), b286_s2.clone());
        // b286_s4: cast reint b286_s3 -> u6
        let b286_s4 = ctx
            .emitter()
            .cast(
                b286_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
                CastOperationKind::Reinterpret,
            );
        // b286_s5: const #0u : u6
        let b286_s5 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
            );
        // b286_s6: cmp-eq b286_s4 b286_s5
        let b286_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b286_s4.clone(), b286_s5.clone()),
            );
        // b286_s7: branch b286_s6 block287 block5
        return ctx
            .emitter()
            .branch(
                b286_s6.clone(),
                fn_state.block_refs[287usize].clone(),
                fn_state.block_refs[5usize].clone(),
            );
    }
    fn block_287(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b287_s0: const #9s : i4
        let b287_s0 = ctx
            .emitter()
            .constant(
                9isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b287_s1: const #14656u : u32
        let b287_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b287_s2: read-reg b287_s1:i
        let b287_s2 = ctx
            .emitter()
            .read_register(
                b287_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b287_s3: cmp-lt b287_s2 b287_s0
        let b287_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b287_s2.clone(), b287_s0.clone()),
            );
        // b287_s4: not b287_s3
        let b287_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b287_s3.clone()));
        // b287_s5: branch b287_s4 block5 block288
        return ctx
            .emitter()
            .branch(
                b287_s4.clone(),
                fn_state.block_refs[5usize].clone(),
                fn_state.block_refs[288usize].clone(),
            );
    }
    fn block_288(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b288_s0: const #9s : i4
        let b288_s0 = ctx
            .emitter()
            .constant(
                9isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b288_s1: const #14656u : u32
        let b288_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b288_s2: write-reg b288_s1 <= b288_s0
        let b288_s2 = ctx.emitter().write_register(b288_s1.clone(), b288_s0.clone());
        // b288_s3: const #0s : i0
        let b288_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b288_s4: const #5s : i3
        let b288_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b288_s5: read-var u#25701:u32
        let b288_s5 = ctx.emitter().read_variable(fn_state.u_25701.clone());
        // b288_s6: bit-extract b288_s5 b288_s3 b288_s4
        let b288_s6 = ctx
            .emitter()
            .bit_extract(b288_s5.clone(), b288_s3.clone(), b288_s4.clone());
        // b288_s7: cast reint b288_s6 -> u5
        let b288_s7 = ctx
            .emitter()
            .cast(
                b288_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b288_s8: const #5s : i3
        let b288_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b288_s9: const #5s : i3
        let b288_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b288_s10: read-var u#25701:u32
        let b288_s10 = ctx.emitter().read_variable(fn_state.u_25701.clone());
        // b288_s11: bit-extract b288_s10 b288_s8 b288_s9
        let b288_s11 = ctx
            .emitter()
            .bit_extract(b288_s10.clone(), b288_s8.clone(), b288_s9.clone());
        // b288_s12: cast reint b288_s11 -> u5
        let b288_s12 = ctx
            .emitter()
            .cast(
                b288_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b288_s13: const #16s : i5
        let b288_s13 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b288_s14: const #5s : i3
        let b288_s14 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b288_s15: read-var u#25701:u32
        let b288_s15 = ctx.emitter().read_variable(fn_state.u_25701.clone());
        // b288_s16: bit-extract b288_s15 b288_s13 b288_s14
        let b288_s16 = ctx
            .emitter()
            .bit_extract(b288_s15.clone(), b288_s13.clone(), b288_s14.clone());
        // b288_s17: cast reint b288_s16 -> u5
        let b288_s17 = ctx
            .emitter()
            .cast(
                b288_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b288_s18: const #29s : i5
        let b288_s18 = ctx
            .emitter()
            .constant(
                29isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b288_s19: const #1s : i1
        let b288_s19 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b288_s20: read-var u#25701:u32
        let b288_s20 = ctx.emitter().read_variable(fn_state.u_25701.clone());
        // b288_s21: bit-extract b288_s20 b288_s18 b288_s19
        let b288_s21 = ctx
            .emitter()
            .bit_extract(b288_s20.clone(), b288_s18.clone(), b288_s19.clone());
        // b288_s22: cast reint b288_s21 -> u1
        let b288_s22 = ctx
            .emitter()
            .cast(
                b288_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b288_s23: const #30s : i5
        let b288_s23 = ctx
            .emitter()
            .constant(
                30isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b288_s24: const #1s : i1
        let b288_s24 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b288_s25: read-var u#25701:u32
        let b288_s25 = ctx.emitter().read_variable(fn_state.u_25701.clone());
        // b288_s26: bit-extract b288_s25 b288_s23 b288_s24
        let b288_s26 = ctx
            .emitter()
            .bit_extract(b288_s25.clone(), b288_s23.clone(), b288_s24.clone());
        // b288_s27: cast reint b288_s26 -> u1
        let b288_s27 = ctx
            .emitter()
            .cast(
                b288_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b288_s28: const #31s : i5
        let b288_s28 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b288_s29: const #1s : i1
        let b288_s29 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b288_s30: read-var u#25701:u32
        let b288_s30 = ctx.emitter().read_variable(fn_state.u_25701.clone());
        // b288_s31: bit-extract b288_s30 b288_s28 b288_s29
        let b288_s31 = ctx
            .emitter()
            .bit_extract(b288_s30.clone(), b288_s28.clone(), b288_s29.clone());
        // b288_s32: cast reint b288_s31 -> u1
        let b288_s32 = ctx
            .emitter()
            .cast(
                b288_s31.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b288_s33: call decode_sbcs_aarch64_instrs_integer_arithmetic_add_sub_carry(b288_s7, b288_s12, b288_s17, b288_s22, b288_s27, b288_s32)
        let b288_s33 = decode_sbcs_aarch64_instrs_integer_arithmetic_add_sub_carry(
            ctx,
            b288_s7,
            b288_s12,
            b288_s17,
            b288_s22,
            b288_s27,
            b288_s32,
        );
        // b288_s34: return
        return BlockResult::None;
    }
    fn block_289(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b289_s0: const #10s : i4
        let b289_s0 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b289_s1: read-var u#25693:u32
        let b289_s1 = ctx.emitter().read_variable(fn_state.u_25693.clone());
        // b289_s2: const #6s : i3
        let b289_s2 = ctx
            .emitter()
            .constant(
                6isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b289_s3: bit-extract b289_s1 b289_s0 b289_s2
        let b289_s3 = ctx
            .emitter()
            .bit_extract(b289_s1.clone(), b289_s0.clone(), b289_s2.clone());
        // b289_s4: cast reint b289_s3 -> u6
        let b289_s4 = ctx
            .emitter()
            .cast(
                b289_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
                CastOperationKind::Reinterpret,
            );
        // b289_s5: const #0u : u6
        let b289_s5 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
            );
        // b289_s6: cmp-eq b289_s4 b289_s5
        let b289_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b289_s4.clone(), b289_s5.clone()),
            );
        // b289_s7: branch b289_s6 block290 block4
        return ctx
            .emitter()
            .branch(
                b289_s6.clone(),
                fn_state.block_refs[290usize].clone(),
                fn_state.block_refs[4usize].clone(),
            );
    }
    fn block_290(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b290_s0: const #8s : i4
        let b290_s0 = ctx
            .emitter()
            .constant(
                8isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b290_s1: const #14656u : u32
        let b290_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b290_s2: read-reg b290_s1:i
        let b290_s2 = ctx
            .emitter()
            .read_register(
                b290_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b290_s3: cmp-lt b290_s2 b290_s0
        let b290_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b290_s2.clone(), b290_s0.clone()),
            );
        // b290_s4: not b290_s3
        let b290_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b290_s3.clone()));
        // b290_s5: branch b290_s4 block4 block291
        return ctx
            .emitter()
            .branch(
                b290_s4.clone(),
                fn_state.block_refs[4usize].clone(),
                fn_state.block_refs[291usize].clone(),
            );
    }
    fn block_291(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b291_s0: const #8s : i4
        let b291_s0 = ctx
            .emitter()
            .constant(
                8isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b291_s1: const #14656u : u32
        let b291_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b291_s2: write-reg b291_s1 <= b291_s0
        let b291_s2 = ctx.emitter().write_register(b291_s1.clone(), b291_s0.clone());
        // b291_s3: const #0s : i0
        let b291_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b291_s4: const #5s : i3
        let b291_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b291_s5: read-var u#25693:u32
        let b291_s5 = ctx.emitter().read_variable(fn_state.u_25693.clone());
        // b291_s6: bit-extract b291_s5 b291_s3 b291_s4
        let b291_s6 = ctx
            .emitter()
            .bit_extract(b291_s5.clone(), b291_s3.clone(), b291_s4.clone());
        // b291_s7: cast reint b291_s6 -> u5
        let b291_s7 = ctx
            .emitter()
            .cast(
                b291_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b291_s8: const #5s : i3
        let b291_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b291_s9: const #5s : i3
        let b291_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b291_s10: read-var u#25693:u32
        let b291_s10 = ctx.emitter().read_variable(fn_state.u_25693.clone());
        // b291_s11: bit-extract b291_s10 b291_s8 b291_s9
        let b291_s11 = ctx
            .emitter()
            .bit_extract(b291_s10.clone(), b291_s8.clone(), b291_s9.clone());
        // b291_s12: cast reint b291_s11 -> u5
        let b291_s12 = ctx
            .emitter()
            .cast(
                b291_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b291_s13: const #16s : i5
        let b291_s13 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b291_s14: const #5s : i3
        let b291_s14 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b291_s15: read-var u#25693:u32
        let b291_s15 = ctx.emitter().read_variable(fn_state.u_25693.clone());
        // b291_s16: bit-extract b291_s15 b291_s13 b291_s14
        let b291_s16 = ctx
            .emitter()
            .bit_extract(b291_s15.clone(), b291_s13.clone(), b291_s14.clone());
        // b291_s17: cast reint b291_s16 -> u5
        let b291_s17 = ctx
            .emitter()
            .cast(
                b291_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b291_s18: const #29s : i5
        let b291_s18 = ctx
            .emitter()
            .constant(
                29isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b291_s19: const #1s : i1
        let b291_s19 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b291_s20: read-var u#25693:u32
        let b291_s20 = ctx.emitter().read_variable(fn_state.u_25693.clone());
        // b291_s21: bit-extract b291_s20 b291_s18 b291_s19
        let b291_s21 = ctx
            .emitter()
            .bit_extract(b291_s20.clone(), b291_s18.clone(), b291_s19.clone());
        // b291_s22: cast reint b291_s21 -> u1
        let b291_s22 = ctx
            .emitter()
            .cast(
                b291_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b291_s23: const #30s : i5
        let b291_s23 = ctx
            .emitter()
            .constant(
                30isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b291_s24: const #1s : i1
        let b291_s24 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b291_s25: read-var u#25693:u32
        let b291_s25 = ctx.emitter().read_variable(fn_state.u_25693.clone());
        // b291_s26: bit-extract b291_s25 b291_s23 b291_s24
        let b291_s26 = ctx
            .emitter()
            .bit_extract(b291_s25.clone(), b291_s23.clone(), b291_s24.clone());
        // b291_s27: cast reint b291_s26 -> u1
        let b291_s27 = ctx
            .emitter()
            .cast(
                b291_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b291_s28: const #31s : i5
        let b291_s28 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b291_s29: const #1s : i1
        let b291_s29 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b291_s30: read-var u#25693:u32
        let b291_s30 = ctx.emitter().read_variable(fn_state.u_25693.clone());
        // b291_s31: bit-extract b291_s30 b291_s28 b291_s29
        let b291_s31 = ctx
            .emitter()
            .bit_extract(b291_s30.clone(), b291_s28.clone(), b291_s29.clone());
        // b291_s32: cast reint b291_s31 -> u1
        let b291_s32 = ctx
            .emitter()
            .cast(
                b291_s31.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b291_s33: call decode_sbc_aarch64_instrs_integer_arithmetic_add_sub_carry(b291_s7, b291_s12, b291_s17, b291_s22, b291_s27, b291_s32)
        let b291_s33 = decode_sbc_aarch64_instrs_integer_arithmetic_add_sub_carry(
            ctx,
            b291_s7,
            b291_s12,
            b291_s17,
            b291_s22,
            b291_s27,
            b291_s32,
        );
        // b291_s34: return
        return BlockResult::None;
    }
    fn block_292(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b292_s0: const #10s : i4
        let b292_s0 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b292_s1: read-var u#25685:u32
        let b292_s1 = ctx.emitter().read_variable(fn_state.u_25685.clone());
        // b292_s2: const #6s : i3
        let b292_s2 = ctx
            .emitter()
            .constant(
                6isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b292_s3: bit-extract b292_s1 b292_s0 b292_s2
        let b292_s3 = ctx
            .emitter()
            .bit_extract(b292_s1.clone(), b292_s0.clone(), b292_s2.clone());
        // b292_s4: cast reint b292_s3 -> u6
        let b292_s4 = ctx
            .emitter()
            .cast(
                b292_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
                CastOperationKind::Reinterpret,
            );
        // b292_s5: const #0u : u6
        let b292_s5 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
            );
        // b292_s6: cmp-eq b292_s4 b292_s5
        let b292_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b292_s4.clone(), b292_s5.clone()),
            );
        // b292_s7: branch b292_s6 block293 block3
        return ctx
            .emitter()
            .branch(
                b292_s6.clone(),
                fn_state.block_refs[293usize].clone(),
                fn_state.block_refs[3usize].clone(),
            );
    }
    fn block_293(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b293_s0: const #7s : i3
        let b293_s0 = ctx
            .emitter()
            .constant(
                7isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b293_s1: const #14656u : u32
        let b293_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b293_s2: read-reg b293_s1:i
        let b293_s2 = ctx
            .emitter()
            .read_register(
                b293_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b293_s3: cmp-lt b293_s2 b293_s0
        let b293_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b293_s2.clone(), b293_s0.clone()),
            );
        // b293_s4: not b293_s3
        let b293_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b293_s3.clone()));
        // b293_s5: branch b293_s4 block3 block294
        return ctx
            .emitter()
            .branch(
                b293_s4.clone(),
                fn_state.block_refs[3usize].clone(),
                fn_state.block_refs[294usize].clone(),
            );
    }
    fn block_294(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b294_s0: const #7s : i3
        let b294_s0 = ctx
            .emitter()
            .constant(
                7isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b294_s1: const #14656u : u32
        let b294_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b294_s2: write-reg b294_s1 <= b294_s0
        let b294_s2 = ctx.emitter().write_register(b294_s1.clone(), b294_s0.clone());
        // b294_s3: const #0s : i0
        let b294_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b294_s4: const #5s : i3
        let b294_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b294_s5: read-var u#25685:u32
        let b294_s5 = ctx.emitter().read_variable(fn_state.u_25685.clone());
        // b294_s6: bit-extract b294_s5 b294_s3 b294_s4
        let b294_s6 = ctx
            .emitter()
            .bit_extract(b294_s5.clone(), b294_s3.clone(), b294_s4.clone());
        // b294_s7: cast reint b294_s6 -> u5
        let b294_s7 = ctx
            .emitter()
            .cast(
                b294_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b294_s8: const #5s : i3
        let b294_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b294_s9: const #5s : i3
        let b294_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b294_s10: read-var u#25685:u32
        let b294_s10 = ctx.emitter().read_variable(fn_state.u_25685.clone());
        // b294_s11: bit-extract b294_s10 b294_s8 b294_s9
        let b294_s11 = ctx
            .emitter()
            .bit_extract(b294_s10.clone(), b294_s8.clone(), b294_s9.clone());
        // b294_s12: cast reint b294_s11 -> u5
        let b294_s12 = ctx
            .emitter()
            .cast(
                b294_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b294_s13: const #16s : i5
        let b294_s13 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b294_s14: const #5s : i3
        let b294_s14 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b294_s15: read-var u#25685:u32
        let b294_s15 = ctx.emitter().read_variable(fn_state.u_25685.clone());
        // b294_s16: bit-extract b294_s15 b294_s13 b294_s14
        let b294_s16 = ctx
            .emitter()
            .bit_extract(b294_s15.clone(), b294_s13.clone(), b294_s14.clone());
        // b294_s17: cast reint b294_s16 -> u5
        let b294_s17 = ctx
            .emitter()
            .cast(
                b294_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b294_s18: const #29s : i5
        let b294_s18 = ctx
            .emitter()
            .constant(
                29isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b294_s19: const #1s : i1
        let b294_s19 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b294_s20: read-var u#25685:u32
        let b294_s20 = ctx.emitter().read_variable(fn_state.u_25685.clone());
        // b294_s21: bit-extract b294_s20 b294_s18 b294_s19
        let b294_s21 = ctx
            .emitter()
            .bit_extract(b294_s20.clone(), b294_s18.clone(), b294_s19.clone());
        // b294_s22: cast reint b294_s21 -> u1
        let b294_s22 = ctx
            .emitter()
            .cast(
                b294_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b294_s23: const #30s : i5
        let b294_s23 = ctx
            .emitter()
            .constant(
                30isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b294_s24: const #1s : i1
        let b294_s24 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b294_s25: read-var u#25685:u32
        let b294_s25 = ctx.emitter().read_variable(fn_state.u_25685.clone());
        // b294_s26: bit-extract b294_s25 b294_s23 b294_s24
        let b294_s26 = ctx
            .emitter()
            .bit_extract(b294_s25.clone(), b294_s23.clone(), b294_s24.clone());
        // b294_s27: cast reint b294_s26 -> u1
        let b294_s27 = ctx
            .emitter()
            .cast(
                b294_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b294_s28: const #31s : i5
        let b294_s28 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b294_s29: const #1s : i1
        let b294_s29 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b294_s30: read-var u#25685:u32
        let b294_s30 = ctx.emitter().read_variable(fn_state.u_25685.clone());
        // b294_s31: bit-extract b294_s30 b294_s28 b294_s29
        let b294_s31 = ctx
            .emitter()
            .bit_extract(b294_s30.clone(), b294_s28.clone(), b294_s29.clone());
        // b294_s32: cast reint b294_s31 -> u1
        let b294_s32 = ctx
            .emitter()
            .cast(
                b294_s31.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b294_s33: call decode_adcs_aarch64_instrs_integer_arithmetic_add_sub_carry(b294_s7, b294_s12, b294_s17, b294_s22, b294_s27, b294_s32)
        let b294_s33 = decode_adcs_aarch64_instrs_integer_arithmetic_add_sub_carry(
            ctx,
            b294_s7,
            b294_s12,
            b294_s17,
            b294_s22,
            b294_s27,
            b294_s32,
        );
        // b294_s34: return
        return BlockResult::None;
    }
    fn block_295(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b295_s0: const #10s : i4
        let b295_s0 = ctx
            .emitter()
            .constant(
                10isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 4,
                },
            );
        // b295_s1: read-var u#25680:u32
        let b295_s1 = ctx.emitter().read_variable(fn_state.u_25680.clone());
        // b295_s2: const #6s : i3
        let b295_s2 = ctx
            .emitter()
            .constant(
                6isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b295_s3: bit-extract b295_s1 b295_s0 b295_s2
        let b295_s3 = ctx
            .emitter()
            .bit_extract(b295_s1.clone(), b295_s0.clone(), b295_s2.clone());
        // b295_s4: cast reint b295_s3 -> u6
        let b295_s4 = ctx
            .emitter()
            .cast(
                b295_s3.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
                CastOperationKind::Reinterpret,
            );
        // b295_s5: const #0u : u6
        let b295_s5 = ctx
            .emitter()
            .constant(
                0,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 6,
                },
            );
        // b295_s6: cmp-eq b295_s4 b295_s5
        let b295_s6 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareEqual(b295_s4.clone(), b295_s5.clone()),
            );
        // b295_s7: branch b295_s6 block296 block2
        return ctx
            .emitter()
            .branch(
                b295_s6.clone(),
                fn_state.block_refs[296usize].clone(),
                fn_state.block_refs[2usize].clone(),
            );
    }
    fn block_296(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b296_s0: const #6s : i3
        let b296_s0 = ctx
            .emitter()
            .constant(
                6isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b296_s1: const #14656u : u32
        let b296_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b296_s2: read-reg b296_s1:i
        let b296_s2 = ctx
            .emitter()
            .read_register(
                b296_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b296_s3: cmp-lt b296_s2 b296_s0
        let b296_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b296_s2.clone(), b296_s0.clone()),
            );
        // b296_s4: not b296_s3
        let b296_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b296_s3.clone()));
        // b296_s5: branch b296_s4 block2 block297
        return ctx
            .emitter()
            .branch(
                b296_s4.clone(),
                fn_state.block_refs[2usize].clone(),
                fn_state.block_refs[297usize].clone(),
            );
    }
    fn block_297(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b297_s0: const #6s : i3
        let b297_s0 = ctx
            .emitter()
            .constant(
                6isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b297_s1: const #14656u : u32
        let b297_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b297_s2: write-reg b297_s1 <= b297_s0
        let b297_s2 = ctx.emitter().write_register(b297_s1.clone(), b297_s0.clone());
        // b297_s3: const #0s : i0
        let b297_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b297_s4: const #5s : i3
        let b297_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b297_s5: read-var u#25680:u32
        let b297_s5 = ctx.emitter().read_variable(fn_state.u_25680.clone());
        // b297_s6: bit-extract b297_s5 b297_s3 b297_s4
        let b297_s6 = ctx
            .emitter()
            .bit_extract(b297_s5.clone(), b297_s3.clone(), b297_s4.clone());
        // b297_s7: cast reint b297_s6 -> u5
        let b297_s7 = ctx
            .emitter()
            .cast(
                b297_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b297_s8: const #5s : i3
        let b297_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b297_s9: const #5s : i3
        let b297_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b297_s10: read-var u#25680:u32
        let b297_s10 = ctx.emitter().read_variable(fn_state.u_25680.clone());
        // b297_s11: bit-extract b297_s10 b297_s8 b297_s9
        let b297_s11 = ctx
            .emitter()
            .bit_extract(b297_s10.clone(), b297_s8.clone(), b297_s9.clone());
        // b297_s12: cast reint b297_s11 -> u5
        let b297_s12 = ctx
            .emitter()
            .cast(
                b297_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b297_s13: const #16s : i5
        let b297_s13 = ctx
            .emitter()
            .constant(
                16isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b297_s14: const #5s : i3
        let b297_s14 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b297_s15: read-var u#25680:u32
        let b297_s15 = ctx.emitter().read_variable(fn_state.u_25680.clone());
        // b297_s16: bit-extract b297_s15 b297_s13 b297_s14
        let b297_s16 = ctx
            .emitter()
            .bit_extract(b297_s15.clone(), b297_s13.clone(), b297_s14.clone());
        // b297_s17: cast reint b297_s16 -> u5
        let b297_s17 = ctx
            .emitter()
            .cast(
                b297_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b297_s18: const #29s : i5
        let b297_s18 = ctx
            .emitter()
            .constant(
                29isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b297_s19: const #1s : i1
        let b297_s19 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b297_s20: read-var u#25680:u32
        let b297_s20 = ctx.emitter().read_variable(fn_state.u_25680.clone());
        // b297_s21: bit-extract b297_s20 b297_s18 b297_s19
        let b297_s21 = ctx
            .emitter()
            .bit_extract(b297_s20.clone(), b297_s18.clone(), b297_s19.clone());
        // b297_s22: cast reint b297_s21 -> u1
        let b297_s22 = ctx
            .emitter()
            .cast(
                b297_s21.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b297_s23: const #30s : i5
        let b297_s23 = ctx
            .emitter()
            .constant(
                30isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b297_s24: const #1s : i1
        let b297_s24 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b297_s25: read-var u#25680:u32
        let b297_s25 = ctx.emitter().read_variable(fn_state.u_25680.clone());
        // b297_s26: bit-extract b297_s25 b297_s23 b297_s24
        let b297_s26 = ctx
            .emitter()
            .bit_extract(b297_s25.clone(), b297_s23.clone(), b297_s24.clone());
        // b297_s27: cast reint b297_s26 -> u1
        let b297_s27 = ctx
            .emitter()
            .cast(
                b297_s26.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b297_s28: const #31s : i5
        let b297_s28 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b297_s29: const #1s : i1
        let b297_s29 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b297_s30: read-var u#25680:u32
        let b297_s30 = ctx.emitter().read_variable(fn_state.u_25680.clone());
        // b297_s31: bit-extract b297_s30 b297_s28 b297_s29
        let b297_s31 = ctx
            .emitter()
            .bit_extract(b297_s30.clone(), b297_s28.clone(), b297_s29.clone());
        // b297_s32: cast reint b297_s31 -> u1
        let b297_s32 = ctx
            .emitter()
            .cast(
                b297_s31.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b297_s33: call decode_adc_aarch64_instrs_integer_arithmetic_add_sub_carry(b297_s7, b297_s12, b297_s17, b297_s22, b297_s27, b297_s32)
        let b297_s33 = decode_adc_aarch64_instrs_integer_arithmetic_add_sub_carry(
            ctx,
            b297_s7,
            b297_s12,
            b297_s17,
            b297_s22,
            b297_s27,
            b297_s32,
        );
        // b297_s34: return
        return BlockResult::None;
    }
    fn block_298(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b298_s0: const #1s : i1
        let b298_s0 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b298_s1: const #14656u : u32
        let b298_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b298_s2: read-reg b298_s1:i
        let b298_s2 = ctx
            .emitter()
            .read_register(
                b298_s1.clone(),
                Type {
                    kind: TypeKind::Signed,
                    width: todo!(),
                },
            );
        // b298_s3: cmp-lt b298_s2 b298_s0
        let b298_s3 = ctx
            .emitter()
            .binary_operation(
                BinaryOperationKind::CompareLessThan(b298_s2.clone(), b298_s0.clone()),
            );
        // b298_s4: not b298_s3
        let b298_s4 = ctx
            .emitter()
            .unary_operation(UnaryOperationKind::Not(b298_s3.clone()));
        // b298_s5: branch b298_s4 block1 block299
        return ctx
            .emitter()
            .branch(
                b298_s4.clone(),
                fn_state.block_refs[1usize].clone(),
                fn_state.block_refs[299usize].clone(),
            );
    }
    fn block_299(
        ctx: &mut X86TranslationContext,
        fn_state: &FunctionState,
    ) -> BlockResult {
        // b299_s0: const #1s : i1
        let b299_s0 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b299_s1: const #14656u : u32
        let b299_s1 = ctx
            .emitter()
            .constant(
                14656,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b299_s2: write-reg b299_s1 <= b299_s0
        let b299_s2 = ctx.emitter().write_register(b299_s1.clone(), b299_s0.clone());
        // b299_s3: const #0s : i0
        let b299_s3 = ctx
            .emitter()
            .constant(
                0isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 0,
                },
            );
        // b299_s4: const #5s : i3
        let b299_s4 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b299_s5: read-var __opcode:u32
        let b299_s5 = ctx.emitter().read_variable(fn_state.u__opcode.clone());
        // b299_s6: bit-extract b299_s5 b299_s3 b299_s4
        let b299_s6 = ctx
            .emitter()
            .bit_extract(b299_s5.clone(), b299_s3.clone(), b299_s4.clone());
        // b299_s7: cast reint b299_s6 -> u5
        let b299_s7 = ctx
            .emitter()
            .cast(
                b299_s6.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b299_s8: const #5s : i3
        let b299_s8 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b299_s9: const #5s : i3
        let b299_s9 = ctx
            .emitter()
            .constant(
                5isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 3,
                },
            );
        // b299_s10: read-var __opcode:u32
        let b299_s10 = ctx.emitter().read_variable(fn_state.u__opcode.clone());
        // b299_s11: bit-extract b299_s10 b299_s8 b299_s9
        let b299_s11 = ctx
            .emitter()
            .bit_extract(b299_s10.clone(), b299_s8.clone(), b299_s9.clone());
        // b299_s12: cast reint b299_s11 -> u5
        let b299_s12 = ctx
            .emitter()
            .cast(
                b299_s11.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 5,
                },
                CastOperationKind::Reinterpret,
            );
        // b299_s13: const #31s : i5
        let b299_s13 = ctx
            .emitter()
            .constant(
                31isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 5,
                },
            );
        // b299_s14: const #1s : i1
        let b299_s14 = ctx
            .emitter()
            .constant(
                1isize as u64,
                Type {
                    kind: TypeKind::Signed,
                    width: 1,
                },
            );
        // b299_s15: read-var __opcode:u32
        let b299_s15 = ctx.emitter().read_variable(fn_state.u__opcode.clone());
        // b299_s16: bit-extract b299_s15 b299_s13 b299_s14
        let b299_s16 = ctx
            .emitter()
            .bit_extract(b299_s15.clone(), b299_s13.clone(), b299_s14.clone());
        // b299_s17: cast reint b299_s16 -> u1
        let b299_s17 = ctx
            .emitter()
            .cast(
                b299_s16.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
                CastOperationKind::Reinterpret,
            );
        // b299_s18: call decode_abs_aarch64_instrs_integer_arithmetic_unary_abs(b299_s7, b299_s12, b299_s17)
        let b299_s18 = decode_abs_aarch64_instrs_integer_arithmetic_unary_abs(
            ctx,
            b299_s7,
            b299_s12,
            b299_s17,
        );
        // b299_s19: const #15616u : u32
        let b299_s19 = ctx
            .emitter()
            .constant(
                15616,
                Type {
                    kind: TypeKind::Unsigned,
                    width: 32,
                },
            );
        // b299_s20: read-reg b299_s19:u1
        let b299_s20 = ctx
            .emitter()
            .read_register(
                b299_s19.clone(),
                Type {
                    kind: TypeKind::Unsigned,
                    width: 1,
                },
            );
        // b299_s21: branch b299_s20 block78 block77
        return ctx
            .emitter()
            .branch(
                b299_s20.clone(),
                fn_state.block_refs[78usize].clone(),
                fn_state.block_refs[77usize].clone(),
            );
    }
}
const REGISTER_NAME_MAP: &[(usize, &str)] = &[
    (0usize, "CYCLE_COUNTER_ID"),
    (8usize, "INSTRUCTION_COUNTER_ID"),
    (16usize, "PMU_EVENT_SW_INCR"),
    (24usize, "PMU_EVENT_L1D_CACHE_REFILL"),
    (32usize, "PMU_EVENT_L1D_CACHE"),
    (40usize, "PMU_EVENT_INST_RETIRED"),
    (48usize, "PMU_EVENT_EXC_TAKEN"),
    (56usize, "PMU_EVENT_BR_MIS_PRED"),
    (64usize, "PMU_EVENT_CPU_CYCLES"),
    (72usize, "PMU_EVENT_INST_SPEC"),
    (80usize, "PMU_EVENT_CHAIN"),
    (88usize, "PMU_EVENT_BR_MIS_PRED_RETIRED"),
    (96usize, "PMU_EVENT_L1D_TLB"),
    (104usize, "PMU_EVENT_REMOTE_ACCESS"),
    (112usize, "PMU_EVENT_LL_CACHE"),
    (120usize, "PMU_EVENT_LL_CACHE_MISS"),
    (128usize, "PMU_EVENT_DTLB_WALK"),
    (136usize, "PMU_EVENT_L1D_CACHE_LMISS_RD"),
    (144usize, "PMU_EVENT_L2D_CACHE_RD"),
    (152usize, "PMU_EVENT_SAMPLE_POP"),
    (160usize, "PMU_EVENT_SAMPLE_FEED"),
    (168usize, "PMU_EVENT_SAMPLE_FILTRATE"),
    (176usize, "PMU_EVENT_SAMPLE_COLLISION"),
    (184usize, "PMU_EVENT_L2D_CACHE_LMISS_RD"),
    (192usize, "PMU_EVENT_LDST_ALIGN_LAT"),
    (200usize, "PMU_EVENT_SVE_PRED_EMPTY_SPEC"),
    (208usize, "PMU_EVENT_SVE_PRED_PARTIAL_SPEC"),
    (216usize, "PMU_EVENT_BRB_FILTRATE"),
    (224usize, "PMU_EVENT_SAMPLE_WRAP"),
    (232usize, "PMU_EVENT_SAMPLE_FEED_BR"),
    (240usize, "PMU_EVENT_SAMPLE_FEED_LD"),
    (248usize, "PMU_EVENT_SAMPLE_FEED_ST"),
    (256usize, "PMU_EVENT_SAMPLE_FEED_OP"),
    (264usize, "PMU_EVENT_SAMPLE_FEED_EVENT"),
    (272usize, "PMU_EVENT_SAMPLE_FEED_LAT"),
    (280usize, "PMU_EVENT_DSNP_HIT_RD"),
    (288usize, "PMU_EVENT_L1D_CACHE_HITM_RD"),
    (296usize, "PMU_EVENT_L2D_CACHE_HITM_RD"),
    (304usize, "PMU_EVENT_L3D_CACHE_HITM_RD"),
    (312usize, "PMU_EVENT_LL_CACHE_HITM_RD"),
    (320usize, "PMU_EVENT_L1D_LFB_HIT_RD"),
    (328usize, "PMU_EVENT_L2D_LFB_HIT_RD"),
    (336usize, "PMU_EVENT_L3D_LFB_HIT_RD"),
    (344usize, "PMU_EVENT_LL_LFB_HIT_RD"),
    (352usize, "M32_User"),
    (360usize, "M32_FIQ"),
    (368usize, "M32_IRQ"),
    (376usize, "M32_Svc"),
    (384usize, "M32_Monitor"),
    (392usize, "M32_Abort"),
    (400usize, "M32_Hyp"),
    (408usize, "M32_Undef"),
    (416usize, "M32_System"),
    (424usize, "EL3"),
    (432usize, "EL2"),
    (440usize, "EL1"),
    (448usize, "EL0"),
    (456usize, "LOG2_TAG_GRANULE"),
    (464usize, "MemAttr_NC"),
    (472usize, "MemAttr_WT"),
    (480usize, "MemAttr_WB"),
    (488usize, "MemHint_No"),
    (496usize, "MemHint_WA"),
    (504usize, "MemHint_RA"),
    (512usize, "MemHint_RWA"),
    (520usize, "GPRs"),
    (768usize, "DefaultPARTID"),
    (776usize, "DefaultPMG"),
    (784usize, "Domain_NoAccess"),
    (792usize, "Domain_Client"),
    (800usize, "FINAL_LEVEL"),
    (808usize, "MAX_VL"),
    (816usize, "MAX_PL"),
    (824usize, "ZT0_LEN"),
    (832usize, "DEFAULT_MECID"),
    (840usize, "GPT_NoAccess"),
    (848usize, "GPT_Table"),
    (856usize, "GPT_Block"),
    (864usize, "GPT_Contig"),
    (872usize, "GPT_Secure"),
    (880usize, "GPT_NonSecure"),
    (888usize, "GPT_Root"),
    (896usize, "GPT_Realm"),
    (904usize, "GPT_Any"),
    (912usize, "GPTRange_4KB"),
    (920usize, "GPTRange_16KB"),
    (928usize, "GPTRange_64KB"),
    (936usize, "GPTRange_2MB"),
    (944usize, "GPTRange_32MB"),
    (952usize, "GPTRange_512MB"),
    (960usize, "GPTRange_1GB"),
    (968usize, "GPTRange_16GB"),
    (976usize, "GPTRange_64GB"),
    (984usize, "GPTRange_512GB"),
    (992usize, "SPEMaxAddrs"),
    (1000usize, "SPEMaxCounters"),
    (1008usize, "SPEMaxRecordSize"),
    (1016usize, "SPEAddrPosPCVirtual"),
    (1024usize, "SPEAddrPosBranchTarget"),
    (1032usize, "SPEAddrPosDataVirtual"),
    (1040usize, "SPEAddrPosDataPhysical"),
    (1048usize, "SPEAddrPosPrevBranchTarget"),
    (1056usize, "SPECounterPosTotalLatency"),
    (1064usize, "SPECounterPosIssueLatency"),
    (1072usize, "SPECounterPosTranslationLatency"),
    (1080usize, "VMID_NONE"),
    (1088usize, "MAX_ZERO_BLOCK_SIZE"),
    (1096usize, "DebugHalt_Breakpoint"),
    (1104usize, "DebugHalt_EDBGRQ"),
    (1112usize, "DebugHalt_Step_Normal"),
    (1120usize, "DebugHalt_Step_Exclusive"),
    (1128usize, "DebugHalt_OSUnlockCatch"),
    (1136usize, "DebugHalt_ResetCatch"),
    (1144usize, "DebugHalt_Watchpoint"),
    (1152usize, "DebugHalt_HaltInstruction"),
    (1160usize, "DebugHalt_SoftwareAccess"),
    (1168usize, "DebugHalt_ExceptionCatch"),
    (1176usize, "DebugHalt_Step_NoSyndrome"),
    (1184usize, "RCW64_PROTECTED_BIT"),
    (1192usize, "RCW128_PROTECTED_BIT"),
    (1200usize, "lst_64bv"),
    (1208usize, "lst_64b"),
    (1216usize, "lst_64bv0"),
    (1224usize, "CFG_ID_AA64PFR0_EL1_EL0"),
    (1232usize, "CFG_ID_AA64PFR0_EL1_EL1"),
    (1240usize, "CFG_ID_AA64PFR0_EL1_EL2"),
    (1248usize, "CFG_ID_AA64PFR0_EL1_EL3"),
    (1256usize, "CFG_PMCR_IDCODE"),
    (1264usize, "CFG_MPAM_none"),
    (1272usize, "CFG_MPAM_v0p1"),
    (1280usize, "CFG_MPAM_v1p1"),
    (1288usize, "CFG_MPAM_frac_none"),
    (1296usize, "CFG_MPAM_frac_v0p1"),
    (1304usize, "CFG_MPAM_frac_v1p1"),
    (1312usize, "DebugException_Breakpoint"),
    (1320usize, "DebugException_BKPT"),
    (1328usize, "DebugException_VectorCatch"),
    (1336usize, "DebugException_Watchpoint"),
    (1344usize, "TAG_GRANULE"),
    (1352usize, "UART_BASE"),
    (1360usize, "GIC_BASE"),
    (1368usize, "__GICD_TYPER"),
    (1376usize, "__GICC_IIDR"),
    (1384usize, "GIC_PENDING_NONE"),
    (1392usize, "COLD_RESET"),
    (1400usize, "ERXMISC1_EL1"),
    (1408usize, "FEAT_VMID16_IMPLEMENTED"),
    (1416usize, "v9Ap0_IMPLEMENTED"),
    (1424usize, "FEAT_SVE_PMULL128_IMPLEMENTED"),
    (1432usize, "__DBG_ROM_ADDR"),
    (1440usize, "_ERXMISC7"),
    (1448usize, "GICH_EISR"),
    (1456usize, "_VTCR"),
    (1464usize, "SCTLR2_EL3"),
    (1472usize, "ICC_CTLR_EL1_NS"),
    (1480usize, "ID_ISAR5_EL1"),
    (1488usize, "FEAT_EVT_IMPLEMENTED"),
    (1496usize, "_PMINTENSET"),
    (1504usize, "AMPIDR2"),
    (1512usize, "FEAT_EL3_IMPLEMENTED"),
    (1520usize, "PMSDSFR_EL1"),
    (1528usize, "_ICV_CTLR"),
    (1536usize, "PMVCIDSR"),
    (1544usize, "FEAT_FGT2_IMPLEMENTED"),
    (1552usize, "RLPIDEN"),
    (1560usize, "FEAT_ETEv1p2_IMPLEMENTED"),
    (1568usize, "FEAT_AES_IMPLEMENTED"),
    (1576usize, "__max_implemented_smeveclen"),
    (1592usize, "MECID_A0_EL2"),
    (1600usize, "ICC_AP1R_EL1_S"),
    (1632usize, "FEAT_SHA256_IMPLEMENTED"),
    (1640usize, "EDCIDR2"),
    (1648usize, "LORC_EL1"),
    (1656usize, "_PMEVCNTR"),
    (1784usize, "__exclusive_granule_size"),
    (1792usize, "FEAT_FGT_IMPLEMENTED"),
    (1800usize, "_Z"),
    (9992usize, "FEAT_GICv4_IMPLEMENTED"),
    (10000usize, "FEAT_SEL2_IMPLEMENTED"),
    (10008usize, "_ICH_AP1R"),
    (10024usize, "FEAT_SME2p1_IMPLEMENTED"),
    (10032usize, "__ETEBase"),
    (10040usize, "GICC_BPR"),
    (10048usize, "CONTEXTIDR_EL1"),
    (10056usize, "GICR_STATUSR"),
    (10064usize, "CNTHVS_CVAL_EL2"),
    (10072usize, "STACK_LIMIT"),
    (10080usize, "GICC_ABPR"),
    (10088usize, "_CTR"),
    (10096usize, "GICC_AIAR"),
    (10104usize, "FEAT_RASSAv1p1_IMPLEMENTED"),
    (10112usize, "ERXADDR_EL1"),
    (10120usize, "FEAT_PACQARMA5_IMPLEMENTED"),
    (10128usize, "OSLSR_EL1"),
    (10136usize, "GICR_SETLPIR"),
    (10144usize, "PMSLATFR_EL1"),
    (10152usize, "_DBGDTRRXext"),
    (10160usize, "_HDCR"),
    (10168usize, "BRBINFINJ_EL1"),
    (10176usize, "PMCEID1_EL0"),
    (10184usize, "SP_EL1"),
    (10192usize, "CP15SDISABLE"),
    (10200usize, "ICC_SRE_EL3"),
    (10208usize, "FEAT_HPMN0_IMPLEMENTED"),
    (10216usize, "GCSPR_EL2"),
    (10224usize, "_ERXMISC1"),
    (10232usize, "GICV_RPR"),
    (10240usize, "ICH_LR_EL2"),
    (10368usize, "__highest_el_aarch32"),
    (10376usize, "SMCR_EL2"),
    (10384usize, "SPERecordSize"),
    (10400usize, "FEAT_RNG_TRAP_IMPLEMENTED"),
    (10408usize, "FEAT_DoPD_IMPLEMENTED"),
    (10416usize, "ERXCTLR_EL1"),
    (10424usize, "__cycle_count"),
    (10440usize, "PMUACR_EL1"),
    (10448usize, "_CNTV_CTL"),
    (10456usize, "_ICC_CTLR_S"),
    (10464usize, "FEAT_HAFT_IMPLEMENTED"),
    (10472usize, "FEAT_PMUv3_EXT32_IMPLEMENTED"),
    (10480usize, "ACTLR2_S"),
    (10488usize, "_ID_MMFR1"),
    (10496usize, "GICD_CTLR"),
    (10504usize, "CNTHPS_CTL_EL2"),
    (10512usize, "AMCFGR_EL0"),
    (10520usize, "PMCIDR2"),
    (10528usize, "SPESampleInstIsNV2"),
    (10536usize, "VBAR_S"),
    (10544usize, "MAIR_EL2"),
    (10552usize, "FEAT_PACIMP_IMPLEMENTED"),
    (10560usize, "PMULastThresholdValue"),
    (10568usize, "R25"),
    (10576usize, "ICV_IGRPEN1_EL1"),
    (10584usize, "ID_AA64AFR0_EL1"),
    (10592usize, "ACTLR_EL2"),
    (10600usize, "FEAT_DGH_IMPLEMENTED"),
    (10608usize, "GITS_TYPER"),
    (10616usize, "__monomorphize_reads"),
    (10624usize, "MPAMVPM1_EL2"),
    (10632usize, "RNDRRS"),
    (10640usize, "SPERecordData"),
    (10704usize, "GICR_VSGIR"),
    (10712usize, "TCR_EL3"),
    (10720usize, "PMEVCNTR_EL0"),
    (10976usize, "_MAIR0_NS"),
    (10984usize, "EDRCR"),
    (10992usize, "IFSR_S"),
    (11000usize, "FEAT_FlagM2_IMPLEMENTED"),
    (11008usize, "MPAMIDR_EL1"),
    (11016usize, "ICH_MISR_EL2"),
    (11024usize, "_AIFSR_NS"),
    (11032usize, "GICC_AHPPIR"),
    (11040usize, "ZCR_EL3"),
    (11048usize, "_ERXFR"),
    (11056usize, "_ID_DFR0"),
    (11064usize, "CPTR_EL2"),
    (11072usize, "APIBKeyLo_EL1"),
    (11080usize, "NUM_PMU_COUNTERS"),
    (11096usize, "PMPCSCTL"),
    (11104usize, "__RD_base"),
    (11112usize, "SPESampleAddressValid"),
    (11120usize, "VSTCR_EL2"),
    (11128usize, "__max_implemented_sveveclen"),
    (11144usize, "_CNTHCTL"),
    (11152usize, "FEAT_ETMv4p1_IMPLEMENTED"),
    (11160usize, "PMEVTYPER_EL0"),
    (11416usize, "TRFCR_EL1"),
    (11424usize, "GICC_HPPIR"),
    (11432usize, "GCR_EL1"),
    (11440usize, "R23"),
    (11448usize, "FEAT_TIDCP1_IMPLEMENTED"),
    (11456usize, "DACR_S"),
    (11464usize, "EDPIDR1"),
    (11472usize, "_SDER32_EL3"),
    (11480usize, "SPESampleSubclassValid"),
    (11488usize, "ICC_AP1R_EL1_NS"),
    (11520usize, "_DBGDTR_EL0"),
    (11528usize, "FEAT_LSE128_IMPLEMENTED"),
    (11536usize, "__rme_l0gptsz"),
    (11544usize, "AMAIR_EL3"),
    (11552usize, "FEAT_AMUv1_IMPLEMENTED"),
    (11560usize, "FEAT_PMUv3_EDGE_IMPLEMENTED"),
    (11568usize, "TTBR0_NS"),
    (11576usize, "FEAT_AIE_IMPLEMENTED"),
    (11584usize, "ICC_CTLR_EL3"),
    (11592usize, "PMMIR"),
    (11600usize, "TRFCR_EL2"),
    (11608usize, "R28"),
    (11616usize, "FEAT_PCSRv8p2_IMPLEMENTED"),
    (11624usize, "TPIDRPRW_S"),
    (11632usize, "v8Ap0_IMPLEMENTED"),
    (11640usize, "FEAT_AA64EL2_IMPLEMENTED"),
    (11648usize, "LR_mon"),
    (11656usize, "GCSCR_EL3"),
    (11664usize, "_IFSR_NS"),
    (11672usize, "SCTLR2_EL1"),
    (11680usize, "ICC_NMIAR1_EL1"),
    (11688usize, "PMCNTENSET_EL0"),
    (11696usize, "ID_PFR2_EL1"),
    (11704usize, "_AMEVTYPER0"),
    (11720usize, "_ICH_LRC"),
    (11784usize, "EDDEVTYPE"),
    (11792usize, "FEAT_IDST_IMPLEMENTED"),
    (11800usize, "IsWFEsleep"),
    (11808usize, "_ICC_IAR1"),
    (11816usize, "FEAT_AA64EL3_IMPLEMENTED"),
    (11824usize, "_ICH_MISR"),
    (11832usize, "FEAT_PMUv3_ICNTR_IMPLEMENTED"),
    (11840usize, "HPFAR_EL2"),
    (11848usize, "APGAKeyLo_EL1"),
    (11856usize, "ICC_SRE_EL1_S"),
    (11864usize, "_ERXSTATUS"),
    (11872usize, "GICR_WAKER"),
    (11880usize, "FEAT_SVE_IMPLEMENTED"),
    (11888usize, "S2PIR_EL2"),
    (11896usize, "SPMACCESSR_EL1"),
    (11904usize, "_ICC_AP0R"),
    (11920usize, "CNTFID0"),
    (11928usize, "TPIDR_EL2"),
    (11936usize, "ICC_IGRPEN1_EL3"),
    (11944usize, "ESR_EL3"),
    (11952usize, "GICR_VSGIPENDR"),
    (11960usize, "FEAT_CSSC_IMPLEMENTED"),
    (11968usize, "R6"),
    (11976usize, "FEAT_SPEv1p1_IMPLEMENTED"),
    (11984usize, "FEAT_SCTLR2_IMPLEMENTED"),
    (11992usize, "FEAT_MTE_TAGGED_FAR_IMPLEMENTED"),
    (12000usize, "ICV_IGRPEN0_EL1"),
    (12008usize, "GICD_TYPER2"),
    (12016usize, "_CCSIDR"),
    (12024usize, "DBGCLAIMSET_EL1"),
    (12032usize, "SP_EL3"),
    (12040usize, "CPACR_EL1"),
    (12048usize, "_HVBAR"),
    (12056usize, "PMVIDSR"),
    (12064usize, "FEAT_TRBE_MPAM_IMPLEMENTED"),
    (12072usize, "ICV_IAR0_EL1"),
    (12080usize, "FEAT_BRBEv1p1_IMPLEMENTED"),
    (12088usize, "SPIDEN"),
    (12096usize, "FEAT_PMUv3p1_IMPLEMENTED"),
    (12104usize, "FEAT_SME_FA64_IMPLEMENTED"),
    (12112usize, "_HAMAIR0"),
    (12120usize, "FEAT_TWED_IMPLEMENTED"),
    (12128usize, "PIR_EL3"),
    (12136usize, "DBGBCR_EL1"),
    (12648usize, "STACK_BASE"),
    (12656usize, "_ICC_RPR"),
    (12664usize, "AMAIR0_S"),
    (12672usize, "GICV_STATUSR"),
    (12680usize, "PMITCTRL"),
    (12688usize, "PMSIRR_EL1"),
    (12696usize, "_PC"),
    (12704usize, "_ICC_ASGI1R"),
    (12712usize, "NUM_AMU_COUNTER_GROUPS"),
    (12728usize, "ICC_PMR_EL1"),
    (12736usize, "FEAT_RASSAv2_IMPLEMENTED"),
    (12744usize, "_MPAM3_EL3"),
    (12752usize, "FEAT_PAN3_IMPLEMENTED"),
    (12760usize, "CNTHCTL_EL2"),
    (12768usize, "TCR_EL2"),
    (12776usize, "ICV_CTLR_EL1"),
    (12784usize, "AMAIR_EL2"),
    (12792usize, "_MVFR1"),
    (12800usize, "_ICC_AP1R_NS"),
    (12816usize, "_CCSIDR2"),
    (12824usize, "_AMCGCR"),
    (12832usize, "TFSR_EL1"),
    (12840usize, "_HSR"),
    (12848usize, "FEAT_RASv2_IMPLEMENTED"),
    (12856usize, "PMSNEVFR_EL1"),
    (12864usize, "FEAT_CSV2_1p2_IMPLEMENTED"),
    (12872usize, "FPCR"),
    (12880usize, "_PMCCNTR"),
    (12888usize, "ERXMISC3_EL1"),
    (12896usize, "PMICNTR_EL0"),
    (12904usize, "__dczid_log2_block_size"),
    (12920usize, "EDPIDR2"),
    (12928usize, "_Dclone"),
    (13184usize, "CTIAUTHSTATUS"),
    (13192usize, "__syncAbortOnTTWNonCache"),
    (13200usize, "__syncAbortOnReadNormNonCache"),
    (13208usize, "_ICV_DIR"),
    (13216usize, "_AIDR"),
    (13224usize, "PMSSCR_EL1"),
    (13232usize, "_CNTP_CTL_NS"),
    (13240usize, "FEAT_AA32EL3_IMPLEMENTED"),
    (13248usize, "_AMEVTYPER1"),
    (13312usize, "DLR_EL0"),
    (13320usize, "AFSR0_EL2"),
    (13328usize, "_TTBCR2_NS"),
    (13336usize, "_ICV_BPR1"),
    (13344usize, "__mpam_pmg_max"),
    (13352usize, "FEAT_HPDS2_IMPLEMENTED"),
    (13360usize, "FEAT_PMUv3p9_IMPLEMENTED"),
    (13368usize, "_HADFSR"),
    (13376usize, "_ICH_ELRSR"),
    (13384usize, "APGAKeyHi_EL1"),
    (13392usize, "AMCNTENSET1_EL0"),
    (13400usize, "APDAKeyHi_EL1"),
    (13408usize, "PhysicalCount"),
    (13424usize, "__GICITSControlBase"),
    (13432usize, "ID_AA64PFR2_EL1"),
    (13440usize, "_AMCFGR"),
    (13448usize, "BRBIDR0_EL1"),
    (13456usize, "SPESampleTimestamp"),
    (13464usize, "GICR_SYNCR"),
    (13472usize, "_NMRR_NS"),
    (13480usize, "SPESampleSubclass"),
    (13488usize, "_MPAM1_EL1"),
    (13496usize, "_ID_MMFR5"),
    (13504usize, "ICV_EOIR0_EL1"),
    (13512usize, "FEAT_ExS_IMPLEMENTED"),
    (13520usize, "ICV_HPPIR0_EL1"),
    (13528usize, "FEAT_BBM_IMPLEMENTED"),
    (13536usize, "__sme_only"),
    (13544usize, "POR_EL1"),
    (13552usize, "__ThisInstrEnc"),
    (13560usize, "HFGITR_EL2"),
    (13568usize, "PMECR_EL1"),
    (13576usize, "EDAA32PFR"),
    (13584usize, "DISR_EL1"),
    (13592usize, "_ID_ISAR6"),
    (13600usize, "VNCR_EL2"),
    (13608usize, "FEAT_PFAR_IMPLEMENTED"),
    (13616usize, "ICC_EOIR0_EL1"),
    (13624usize, "GICR_IIDR"),
    (13632usize, "CTICIDR0"),
    (13640usize, "SPMACCESSR_EL3"),
    (13648usize, "CNTEL0ACR"),
    (13656usize, "PMBSR_EL1"),
    (13664usize, "_AMCR"),
    (13672usize, "_ICV_RPR"),
    (13680usize, "__impdef_TG1"),
    (13688usize, "CTIDEVTYPE"),
    (13696usize, "EDCIDR1"),
    (13704usize, "CTIDEVCTL"),
    (13712usize, "_HTRFCR"),
    (13720usize, "FEAT_RASv1p1_IMPLEMENTED"),
    (13728usize, "SPESampleAddress"),
    (13984usize, "__last_branch_valid"),
    (13992usize, "EDPRSR"),
    (14000usize, "CFG_MPIDR"),
    (14008usize, "FEAT_Debugv8p2_IMPLEMENTED"),
    (14016usize, "FEAT_LRCPC_IMPLEMENTED"),
    (14024usize, "PMPIDR2"),
    (14032usize, "_IFAR_NS"),
    (14040usize, "_HAIFSR"),
    (14048usize, "_DBGWCR"),
    (14112usize, "CNTPS_CVAL_EL1"),
    (14120usize, "_TTBR1_EL1"),
    (14136usize, "SPESampleDataSourceValid"),
    (14144usize, "AMDEVTYPE"),
    (14152usize, "POR_EL3"),
    (14160usize, "_EDSCR2"),
    (14168usize, "__supported_va_size"),
    (14184usize, "FEAT_HCX_IMPLEMENTED"),
    (14192usize, "__CNTbase_frequency"),
    (14200usize, "GITS_CBASER"),
    (14208usize, "__mpam_frac"),
    (14216usize, "FEAT_ADERR_IMPLEMENTED"),
    (14224usize, "_PMCNTEN"),
    (14232usize, "TPIDR_EL1"),
    (14240usize, "_TPIDRURW_NS"),
    (14248usize, "FEAT_AMUv1p1_IMPLEMENTED"),
    (14256usize, "FEAT_CSV2_1p1_IMPLEMENTED"),
    (14264usize, "FEAT_ANERR_IMPLEMENTED"),
    (14272usize, "APDBKeyHi_EL1"),
    (14280usize, "NUM_GIC_PREEMPTION_BITS"),
    (14296usize, "__set_mops_option_a_supported"),
    (14304usize, "FEAT_LS64_V_IMPLEMENTED"),
    (14312usize, "HEAP_LIMIT"),
    (14320usize, "_PMCEID0"),
    (14328usize, "sp_rel_access_pc"),
    (14336usize, "ID_ISAR1_EL1"),
    (14344usize, "_ERRIDR"),
    (14352usize, "__has_sme_priority_control"),
    (14360usize, "GICR_CLRLPIR"),
    (14368usize, "ERXGSR_EL1"),
    (14376usize, "FEAT_TRC_SR_IMPLEMENTED"),
    (14384usize, "FEAT_RNG_IMPLEMENTED"),
    (14392usize, "GITS_MPIDR"),
    (14400usize, "FEAT_PMUv3p5_IMPLEMENTED"),
    (14408usize, "FEAT_LVA3_IMPLEMENTED"),
    (14416usize, "FEAT_MTE_STORE_ONLY_IMPLEMENTED"),
    (14424usize, "FEAT_PCSRv8p9_IMPLEMENTED"),
    (14432usize, "FEAT_SPE_FDS_IMPLEMENTED"),
    (14440usize, "_AMAIR1_NS"),
    (14448usize, "ICC_IGRPEN0_EL1"),
    (14456usize, "_PMINTEN"),
    (14464usize, "GICR_CTLR"),
    (14472usize, "DBGDEVID"),
    (14480usize, "throw"),
    (14488usize, "_TTBR0_EL1"),
    (14504usize, "__CNTBaseN"),
    (14512usize, "_FFR"),
    (14544usize, "CNTPOFF_EL2"),
    (14552usize, "APDAKeyLo_EL1"),
    (14560usize, "ID_AA64ISAR1_EL1"),
    (14568usize, "AFSR1_EL3"),
    (14576usize, "FEAT_SHA512_IMPLEMENTED"),
    (14584usize, "AMEVCNTR0"),
    (14616usize, "AMCGCR_EL0"),
    (14624usize, "FEAT_EL1_IMPLEMENTED"),
    (14632usize, "_ID_ISAR3"),
    (14640usize, "_PMSWINC"),
    (14648usize, "FEAT_IVIPT_IMPLEMENTED"),
    (14656usize, "SEE"),
    (14672usize, "EDESR"),
    (14680usize, "_IFAR_S"),
    (14688usize, "_ID_PFR0"),
    (14696usize, "PMSIDR_EL1"),
    (14704usize, "FEAT_SB_IMPLEMENTED"),
    (14712usize, "_CNTHP_CVAL"),
    (14720usize, "FEAT_PCSRv8_IMPLEMENTED"),
    (14728usize, "R29"),
    (14736usize, "TCR2_EL1"),
    (14744usize, "FEAT_LSE_IMPLEMENTED"),
    (14752usize, "APIAKeyHi_EL1"),
    (14760usize, "ZCR_EL3_LEN_VALUE"),
    (14776usize, "FEAT_SVE_BitPerm_IMPLEMENTED"),
    (14784usize, "HTTBR"),
    (14792usize, "ICH_AP0R_EL2"),
    (14824usize, "ID_AA64ISAR2_EL1"),
    (14832usize, "CNTHVS_CTL_EL2"),
    (14840usize, "SPESampleContextEL2Valid"),
    (14848usize, "ICC_ASGI1R_EL1"),
    (14856usize, "ID_AA64MMFR0_EL1"),
    (14864usize, "HACR_EL2"),
    (14872usize, "FEAT_CONSTPACFIELD_IMPLEMENTED"),
    (14880usize, "FEAT_GICv3_IMPLEMENTED"),
    (14888usize, "FEAT_CHK_IMPLEMENTED"),
    (14896usize, "FEAT_ETEv1p1_IMPLEMENTED"),
    (14904usize, "__BranchTaken"),
    (14912usize, "TFSRE0_EL1"),
    (14920usize, "MDRAR_EL1"),
    (14928usize, "PMCEID0_EL0"),
    (14936usize, "GITS_CREADR"),
    (14944usize, "PMIIDR"),
    (14952usize, "_ID_ISAR4"),
    (14960usize, "__CNTCTLBase"),
    (14968usize, "_ERXMISC4"),
    (14976usize, "GITS_CTLR"),
    (14984usize, "GICM_CLRSPI_NSR"),
    (14992usize, "RVBAR"),
    (15000usize, "_EDSCR"),
    (15008usize, "SDCR"),
    (15016usize, "IFSR32_EL2"),
    (15024usize, "ICV_PMR_EL1"),
    (15032usize, "ZCR_EL2"),
    (15040usize, "_AMEVCNTR1"),
    (15168usize, "FEAT_FRINTTS_IMPLEMENTED"),
    (15176usize, "_SPSR_svc"),
    (15184usize, "__empam_tidr_implemented"),
    (15192usize, "DBGDEVID1"),
    (15200usize, "FEAT_TRC_EXT_IMPLEMENTED"),
    (15208usize, "_ERXMISC0"),
    (15216usize, "FEAT_F32MM_IMPLEMENTED"),
    (15224usize, "v8Ap3_IMPLEMENTED"),
    (15232usize, "ERRIDR_EL1"),
    (15240usize, "GICC_AEOIR"),
    (15248usize, "GICC_DIR"),
    (15256usize, "FEAT_ECV_IMPLEMENTED"),
    (15264usize, "_CPACR"),
    (15272usize, "FEAT_SPEv1p2_IMPLEMENTED"),
    (15280usize, "__syncAbortOnPrefetch"),
    (15288usize, "VTCR_EL2"),
    (15296usize, "POR_EL2"),
    (15304usize, "PMCCNTSVR_EL1"),
    (15312usize, "PMXEVCNTR_EL0"),
    (15320usize, "SP_mon"),
    (15328usize, "TTBCR_S"),
    (15336usize, "ICH_VMCR_EL2"),
    (15344usize, "_FPSCR"),
    (15352usize, "ICV_RPR_EL1"),
    (15360usize, "AFSR1_EL2"),
    (15368usize, "ACTLR_S"),
    (15376usize, "FEAT_LPA_IMPLEMENTED"),
    (15384usize, "EDPFR"),
    (15392usize, "FEAT_ETMv4p4_IMPLEMENTED"),
    (15400usize, "SPESamplePreviousBranchAddress"),
    (15408usize, "PMINTENCLR_EL1"),
    (15416usize, "EDLSR"),
    (15424usize, "MPAMVPM2_EL2"),
    (15432usize, "AMPIDR1"),
    (15440usize, "RTPIDEN"),
    (15448usize, "FEAT_DotProd_IMPLEMENTED"),
    (15456usize, "GICR_PENDBASER"),
    (15464usize, "_ID_ISAR2"),
    (15472usize, "GICC_IAR"),
    (15480usize, "_MAIR1_S"),
    (15488usize, "_ICC_BPR0"),
    (15496usize, "SPSR_fiq"),
    (15504usize, "AMCR_EL0"),
    (15512usize, "FEAT_DPB_IMPLEMENTED"),
    (15520usize, "_SCTLR_NS"),
    (15528usize, "ICC_IAR0_EL1"),
    (15536usize, "FPSID"),
    (15544usize, "FEAT_CSV3_IMPLEMENTED"),
    (15552usize, "FEAT_S1POE_IMPLEMENTED"),
    (15560usize, "FEAT_LSMAOC_IMPLEMENTED"),
    (15568usize, "GCSCRE0_EL1"),
    (15576usize, "AMIIDR"),
    (15584usize, "__block_bbm_implemented"),
    (15600usize, "_ERXCTLR"),
    (15608usize, "GICC_CTLR"),
    (15616usize, "have_exception"),
    (15624usize, "CPTR_EL3_EZ_VALUE"),
    (15640usize, "R2"),
    (15648usize, "ACTLR_EL3"),
    (15656usize, "FEAT_VPIPT_IMPLEMENTED"),
    (15664usize, "_ICC_HPPIR0"),
    (15672usize, "PMBIDR_EL1"),
    (15680usize, "CTIITCTRL"),
    (15688usize, "VMECID_A_EL2"),
    (15696usize, "_HAMAIR1"),
    (15704usize, "SPSR_EL2"),
    (15712usize, "current_exception"),
    (15720usize, "LORSA_EL1"),
    (15728usize, "TCR2_EL2"),
    (15736usize, "APDBKeyLo_EL1"),
    (15744usize, "RVBAR_EL3"),
    (15752usize, "PMPIDR0"),
    (15760usize, "_ICH_LR"),
    (15824usize, "__clock_divider"),
    (15840usize, "PMCCFILTR_EL0"),
    (15848usize, "OSDTRRX_EL1"),
    (15856usize, "DBGDSAR"),
    (15864usize, "_VPIDR"),
    (15872usize, "CNTID"),
    (15880usize, "FEAT_SVE2_IMPLEMENTED"),
    (15888usize, "FEAT_SME2_IMPLEMENTED"),
    (15896usize, "HEAP_BASE"),
    (15904usize, "FEAT_ETMv4p2_IMPLEMENTED"),
    (15912usize, "__mecid_width"),
    (15920usize, "BRBTGT_EL1"),
    (16176usize, "GICV_HPPIR"),
    (16184usize, "FEAT_PMUv3_IMPLEMENTED"),
    (16192usize, "FEAT_SSBS_IMPLEMENTED"),
    (16200usize, "_HDFAR"),
    (16208usize, "_ICV_IAR1"),
    (16216usize, "ISR_EL1"),
    (16224usize, "FEAT_nTLBPA_IMPLEMENTED"),
    (16232usize, "FAR_EL1"),
    (16240usize, "RVBAR_EL1"),
    (16248usize, "_CNTKCTL"),
    (16256usize, "TPIDR_EL3"),
    (16264usize, "ID_PFR0_EL1"),
    (16272usize, "FEAT_RPRES_IMPLEMENTED"),
    (16280usize, "_PRRR_NS"),
    (16288usize, "FEAT_TCR2_IMPLEMENTED"),
    (16296usize, "_ICC_IAR0"),
    (16304usize, "FEAT_SHA1_IMPLEMENTED"),
    (16312usize, "FEAT_AA32HPD_IMPLEMENTED"),
    (16320usize, "FEAT_LSE2_IMPLEMENTED"),
    (16328usize, "CFG_RMR_AA64"),
    (16336usize, "_PMCNTENSET"),
    (16344usize, "ICC_SRE_EL2"),
    (16352usize, "HFGWTR2_EL2"),
    (16360usize, "PMPIDR3"),
    (16368usize, "_DBGBVR"),
    (16432usize, "SCTLR_S"),
    (16440usize, "FEAT_FHM_IMPLEMENTED"),
    (16448usize, "EDWAR"),
    (16456usize, "R1"),
    (16464usize, "_CONTEXTIDR_NS"),
    (16472usize, "AFSR0_EL1"),
    (16480usize, "RCWSMASK_EL1"),
    (16496usize, "SCXTNUM_EL2"),
    (16504usize, "ERXPFGCDN_EL1"),
    (16512usize, "BRBFCR_EL1"),
    (16520usize, "__impdef_TG0"),
    (16528usize, "SPMSELR_EL0"),
    (16536usize, "_PMUSERENR"),
    (16544usize, "FCSEIDR"),
    (16552usize, "GICD_SETSPI_SR"),
    (16560usize, "DACR32_EL2"),
    (16568usize, "HFGRTR_EL2"),
    (16576usize, "TPIDRURO_S"),
    (16584usize, "FEAT_Debugv8p9_IMPLEMENTED"),
    (16592usize, "FEAT_MEC_IMPLEMENTED"),
    (16600usize, "MPAM0_EL1"),
    (16608usize, "FEAT_TLBIOS_IMPLEMENTED"),
    (16616usize, "CNTHP_CVAL_EL2"),
    (16624usize, "GPCCR_EL3"),
    (16632usize, "AFSR0_EL3"),
    (16640usize, "AMEVCNTVOFF1_EL2"),
    (16768usize, "_AMUSERENR"),
    (16776usize, "_ICC_EOIR1"),
    (16784usize, "EDCIDR3"),
    (16792usize, "DBGDIDR"),
    (16800usize, "FEAT_LVA_IMPLEMENTED"),
    (16808usize, "MDCCSR_EL0"),
    (16816usize, "CPTR_EL3"),
    (16824usize, "CNTP_CVAL_S"),
    (16832usize, "AIDR_EL1"),
    (16840usize, "_AMCNTENSET0"),
    (16848usize, "_DACR_NS"),
    (16856usize, "EDLAR"),
    (16864usize, "FEAT_AA64EL1_IMPLEMENTED"),
    (16872usize, "_ICH_AP0R"),
    (16888usize, "ERRnFR"),
    (16920usize, "R15"),
    (16928usize, "_PMCCFILTR"),
    (16936usize, "PMCFGR"),
    (16944usize, "PSTATE"),
    (16952usize, "EDDEVARCH"),
    (16960usize, "_ID_ISAR1"),
    (16968usize, "TCMTR"),
    (16976usize, "EDHSR"),
    (16984usize, "__CNTReadBase"),
    (16992usize, "ICC_IGRPEN1_EL1_NS"),
    (17000usize, "GICH_VTR"),
    (17008usize, "GICD_SGIR"),
    (17016usize, "FEAT_AdvSIMD_IMPLEMENTED"),
    (17024usize, "SCTLR_EL3"),
    (17032usize, "_ERXMISC3"),
    (17040usize, "_ELR_hyp"),
    (17048usize, "_PMSELR"),
    (17056usize, "R19"),
    (17064usize, "CNTHVS_TVAL_EL2"),
    (17072usize, "AIFSR_S"),
    (17080usize, "_PMCEID2"),
    (17088usize, "SPESampleClass"),
    (17096usize, "NIDEN"),
    (17104usize, "VBAR_EL1"),
    (17112usize, "FEAT_ECBHB_IMPLEMENTED"),
    (17120usize, "ICC_HPPIR1_EL1"),
    (17128usize, "ICH_ELRSR_EL2"),
    (17136usize, "FEAT_MOPS_IMPLEMENTED"),
    (17144usize, "CLIDR_EL1"),
    (17152usize, "CNTV_CTL_EL0"),
    (17160usize, "_MAIR1_NS"),
    (17168usize, "FEAT_SPE_IMPLEMENTED"),
    (17176usize, "ELR_EL2"),
    (17184usize, "DBGDTRTX_EL0"),
    (17192usize, "TPIDRRO_EL0"),
    (17200usize, "ICC_EOIR1_EL1"),
    (17208usize, "PMCIDR0"),
    (17216usize, "FEAT_SME_I16I64_IMPLEMENTED"),
    (17224usize, "FEAT_FP_IMPLEMENTED"),
    (17232usize, "FEAT_MTE_ASYM_FAULT_IMPLEMENTED"),
    (17240usize, "FEAT_SPE_CRR_IMPLEMENTED"),
    (17248usize, "FEAT_TRBE_IMPLEMENTED"),
    (17256usize, "SMCR_EL1"),
    (17264usize, "MPAMVPMV_EL2"),
    (17272usize, "_VDISR"),
    (17280usize, "ICC_BPR0_EL1"),
    (17288usize, "ID_ISAR0_EL1"),
    (17296usize, "ICC_BPR1_EL1_NS"),
    (17304usize, "ICH_VTR_EL2"),
    (17312usize, "HDFGWTR_EL2"),
    (17320usize, "FEAT_MTE_PERM_IMPLEMENTED"),
    (17328usize, "MPIDR_EL1"),
    (17336usize, "PMPCSR"),
    (17344usize, "_ICC_SGI0R"),
    (17352usize, "AMEVCNTVOFF0_EL2"),
    (17480usize, "ERXFR_EL1"),
    (17488usize, "GICR_VPENDBASER"),
    (17496usize, "_ICC_BPR1_NS"),
    (17504usize, "SPESampleDataSource"),
    (17512usize, "GICM_SETSPI_NSR"),
    (17520usize, "NUM_GIC_LIST_REGS"),
    (17536usize, "_PMINTENCLR"),
    (17544usize, "GICM_TYPER"),
    (17552usize, "FEAT_Debugv8p8_IMPLEMENTED"),
    (17560usize, "MPAMHCR_EL2"),
    (17568usize, "SPESampleTimestampValid"),
    (17576usize, "FEAT_CMOW_IMPLEMENTED"),
    (17584usize, "FEAT_ETEv1p3_IMPLEMENTED"),
    (17592usize, "v8Ap1_IMPLEMENTED"),
    (17600usize, "_DBGDSCRext"),
    (17608usize, "MAIR_EL3"),
    (17616usize, "HDFGWTR2_EL2"),
    (17624usize, "FEAT_ABLE_IMPLEMENTED"),
    (17632usize, "GICV_IAR"),
    (17640usize, "_PMOVS"),
    (17648usize, "CTIPIDR2"),
    (17656usize, "v8Ap8_IMPLEMENTED"),
    (17664usize, "FEAT_RME_IMPLEMENTED"),
    (17672usize, "_DBGDRAR"),
    (17680usize, "GITS_PARTIDR"),
    (17688usize, "_P"),
    (18200usize, "GCSPR_EL3"),
    (18208usize, "FEAT_ASMv8p2_IMPLEMENTED"),
    (18216usize, "__VLPI_base"),
    (18224usize, "BRBCR_EL2"),
    (18232usize, "__unpred_tsize_aborts"),
    (18240usize, "CNTCR"),
    (18248usize, "CNTHP_TVAL_EL2"),
    (18256usize, "_ICV_HPPIR1"),
    (18264usize, "ELR_EL1"),
    (18272usize, "R4"),
    (18280usize, "__ICACHE_CCSIDR_RESET"),
    (18336usize, "_HSCTLR"),
    (18344usize, "ICC_CTLR_EL1_S"),
    (18352usize, "_TPIDRURO_NS"),
    (18360usize, "_ERXADDR2"),
    (18368usize, "MDSELR_EL1"),
    (18376usize, "SPSR_und"),
    (18384usize, "TTBR1_EL2"),
    (18400usize, "_VTTBR_EL2"),
    (18416usize, "SPESampleCounter"),
    (18928usize, "GICH_VMCR"),
    (18936usize, "CTILAR"),
    (18944usize, "PMDEVTYPE"),
    (18952usize, "GICC_EOIR"),
    (18960usize, "ID_ISAR4_EL1"),
    (18968usize, "FEAT_CSV2_2_IMPLEMENTED"),
    (18976usize, "FEAT_SYSREG128_IMPLEMENTED"),
    (18984usize, "R9"),
    (18992usize, "SPESampleOpType"),
    (19000usize, "CTIPIDR0"),
    (19008usize, "CTR_EL0"),
    (19016usize, "SPMACCESSR_EL2"),
    (19024usize, "FEAT_CSV2_3_IMPLEMENTED"),
    (19032usize, "FEAT_SPMU_IMPLEMENTED"),
    (19040usize, "__tlb_enabled"),
    (19048usize, "_VBAR_NS"),
    (19056usize, "MAIR2_EL3"),
    (19064usize, "R14"),
    (19072usize, "TTBR1_S"),
    (19080usize, "v8Ap5_IMPLEMENTED"),
    (19088usize, "PMSELR_EL0"),
    (19096usize, "HDFGRTR_EL2"),
    (19104usize, "AMEVTYPER1_EL0"),
    (19232usize, "CNTHV_CTL_EL2"),
    (19240usize, "ICC_RPR_EL1"),
    (19248usize, "AMDEVARCH"),
    (19256usize, "GCSCR_EL2"),
    (19264usize, "EDPCSR"),
    (19272usize, "_ERXFR2"),
    (19280usize, "VDISR_EL2"),
    (19288usize, "FEAT_MTE_ASYNC_IMPLEMENTED"),
    (19296usize, "_CNTP_CVAL_NS"),
    (19304usize, "DBGDEVID2"),
    (19312usize, "NUM_WATCHPOINTS"),
    (19328usize, "CNTSR"),
    (19336usize, "AMCIDR1"),
    (19344usize, "DBGWVR_EL1"),
    (19856usize, "ICH_AP1R_EL2"),
    (19888usize, "FEAT_FCMA_IMPLEMENTED"),
    (19896usize, "FEAT_GICv3p1_IMPLEMENTED"),
    (19904usize, "__syncAbortOnTTWCache"),
    (19912usize, "FEAT_S1PIE_IMPLEMENTED"),
    (19920usize, "OSECCR_EL1"),
    (19928usize, "FEAT_ETMv4p5_IMPLEMENTED"),
    (19936usize, "PRRR_S"),
    (19944usize, "ICC_MSRE"),
    (19952usize, "_ERXMISC5"),
    (19960usize, "PFAR_EL2"),
    (19968usize, "CTICIDR1"),
    (19976usize, "TTBR1_NS"),
    (19984usize, "SPSR_abt"),
    (19992usize, "_ICV_IAR0"),
    (20000usize, "MAIR2_EL1"),
    (20008usize, "FEAT_MTE_NO_ADDRESS_TAGS_IMPLEMENTED"),
    (20016usize, "R21"),
    (20024usize, "MDCCINT_EL1"),
    (20032usize, "AMCIDR2"),
    (20040usize, "_ICH_HCR"),
    (20048usize, "RGSR_EL1"),
    (20056usize, "_MIDR"),
    (20064usize, "ID_AA64DFR0_EL1"),
    (20072usize, "_ID_PFR1"),
    (20080usize, "ELR_EL3"),
    (20088usize, "__syncAbortOnSoRead"),
    (20096usize, "ID_AA64AFR1_EL1"),
    (20104usize, "FEAT_AA64EL0_IMPLEMENTED"),
    (20112usize, "SPESampleContextEL1Valid"),
    (20120usize, "FEAT_EBEP_IMPLEMENTED"),
    (20128usize, "EDECR"),
    (20136usize, "GICR_VPROPBASER"),
    (20144usize, "_CSSELR_NS"),
    (20152usize, "_MVFR0"),
    (20160usize, "AMAIR1_S"),
    (20168usize, "ID_MMFR5_EL1"),
    (20176usize, "PMCIDR3"),
    (20184usize, "_DBGCLAIMCLR"),
    (20192usize, "_ADFSR_NS"),
    (20200usize, "v8Ap6_IMPLEMENTED"),
    (20208usize, "_HPFAR"),
    (20216usize, "EDPIDR0"),
    (20224usize, "_DBGOSLSR"),
    (20232usize, "PIRE0_EL1"),
    (20240usize, "FEAT_LRCPC3_IMPLEMENTED"),
    (20248usize, "FEAT_SVE_AES_IMPLEMENTED"),
    (20256usize, "SPSR_EL3"),
    (20264usize, "GICM_CLRSPI_SR"),
    (20272usize, "__syncAbortOnWriteNormCache"),
    (20280usize, "CP15SDISABLE2"),
    (20288usize, "FEAT_CRC32_IMPLEMENTED"),
    (20296usize, "FEAT_TTST_IMPLEMENTED"),
    (20304usize, "TTBCR2_S"),
    (20312usize, "_ICC_IGRPEN0"),
    (20320usize, "R20"),
    (20328usize, "CNTPS_CTL_EL1"),
    (20336usize, "_HTPIDR"),
    (20344usize, "GICR_PARTIDR"),
    (20352usize, "FEAT_PMUv3_EXT_IMPLEMENTED"),
    (20360usize, "R13"),
    (20368usize, "ID_DFR0_EL1"),
    (20376usize, "GICD_CLRSPI_SR"),
    (20384usize, "PMMIR_EL1"),
    (20392usize, "DBGEN"),
    (20400usize, "FEAT_IESB_IMPLEMENTED"),
    (20408usize, "FEAT_BTI_IMPLEMENTED"),
    (20416usize, "ICC_SGI1R_EL1"),
    (20424usize, "R30"),
    (20432usize, "PMBLIMITR_EL1"),
    (20440usize, "_TPIDRPRW_NS"),
    (20448usize, "FEAT_GTG_IMPLEMENTED"),
    (20456usize, "_CNTHV_CTL"),
    (20464usize, "GITS_MPAMIDR"),
    (20472usize, "_DBGDTRRXint"),
    (20480usize, "FEAT_AA32EL0_IMPLEMENTED"),
    (20488usize, "FEAT_DoubleFault_IMPLEMENTED"),
    (20496usize, "__isla_vector_gpr"),
    (20504usize, "__GICCPUInterfaceBase"),
    (20512usize, "RC"),
    (20552usize, "VMECID_P_EL2"),
    (20560usize, "__GIC_Pending"),
    (20568usize, "ICC_DIR_EL1"),
    (20576usize, "GPTBR_EL3"),
    (20584usize, "_ICC_EOIR0"),
    (20592usize, "_MAIR0_S"),
    (20600usize, "_ICC_SRE_S"),
    (20608usize, "FEAT_SPECRES2_IMPLEMENTED"),
    (20616usize, "__mops_forward_copy"),
    (20624usize, "VMPIDR_EL2"),
    (20632usize, "_ICV_BPR0"),
    (20640usize, "FEAT_PMUv3_SS_IMPLEMENTED"),
    (20648usize, "FPSR"),
    (20656usize, "_HIFAR"),
    (20664usize, "_ICV_EOIR1"),
    (20672usize, "_HMAIR1"),
    (20680usize, "SPESamplePreviousBranchAddressValid"),
    (20688usize, "Branchtypetaken"),
    (20696usize, "ICV_AP1R_EL1"),
    (20728usize, "AMAIR2_EL3"),
    (20736usize, "SCTLR_EL2"),
    (20744usize, "VPIDR_EL2"),
    (20752usize, "CNTP_CVAL_EL0"),
    (20760usize, "_ICV_AP0R"),
    (20776usize, "NUM_BRBE_RECORDS"),
    (20792usize, "GCSPR_EL0"),
    (20800usize, "__has_sve_extended_bf16"),
    (20816usize, "v8Ap2_IMPLEMENTED"),
    (20824usize, "_ACTLR2_NS"),
    (20832usize, "SPESampleContextEL2"),
    (20840usize, "AMEVTYPER0_EL0"),
    (20872usize, "SCR"),
    (20880usize, "MAIR2_EL2"),
    (20888usize, "GICC_STATUSR"),
    (20896usize, "ID_AA64MMFR4_EL1"),
    (20904usize, "BTypeCompatible"),
    (20912usize, "FEAT_S2PIE_IMPLEMENTED"),
    (20920usize, "_DBGOSDLR"),
    (20928usize, "DBGAUTHSTATUS_EL1"),
    (20936usize, "MPAMVPM7_EL2"),
    (20944usize, "ICH_HCR_EL2"),
    (20952usize, "GICV_DIR"),
    (20960usize, "FEAT_EBF16_IMPLEMENTED"),
    (20968usize, "PMCR_EL0"),
    (20976usize, "FPEXC32_EL2"),
    (20984usize, "ICV_HPPIR1_EL1"),
    (20992usize, "FEAT_FP16_IMPLEMENTED"),
    (21000usize, "_TRFCR"),
    (21008usize, "__empam_sdeflt_implemented"),
    (21016usize, "CNTHV_TVAL_EL2"),
    (21024usize, "PMSCR_EL1"),
    (21032usize, "ID_AFR0_EL1"),
    (21040usize, "DBGCLAIMCLR_EL1"),
    (21048usize, "APIAKeyLo_EL1"),
    (21056usize, "FEAT_UAO_IMPLEMENTED"),
    (21064usize, "SDER32_EL2"),
    (21072usize, "EDDFR1"),
    (21080usize, "FEAT_GICv3_NMI_IMPLEMENTED"),
    (21088usize, "SPSR_mon"),
    (21096usize, "__mpam_has_altsp"),
    (21104usize, "ICV_AP0R_EL1"),
    (21136usize, "SCXTNUM_EL3"),
    (21144usize, "__mpam_vpmr_max"),
    (21152usize, "R18"),
    (21160usize, "__SGI_base"),
    (21168usize, "R0"),
    (21176usize, "v9Ap3_IMPLEMENTED"),
    (21184usize, "__apply_effective_shareability"),
    (21192usize, "Records_SRC"),
    (21704usize, "_DFAR_S"),
    (21712usize, "HAFGRTR_EL2"),
    (21720usize, "__syncAbortOnReadNormCache"),
    (21728usize, "LOREA_EL1"),
    (21736usize, "AMAIR2_EL1"),
    (21744usize, "ERRSELR_EL1"),
    (21752usize, "ICC_MCTLR"),
    (21760usize, "__mpam_partid_max"),
    (21768usize, "FEAT_RDM_IMPLEMENTED"),
    (21776usize, "__syncAbortOnDeviceWrite"),
    (21784usize, "FEAT_ETMv4p6_IMPLEMENTED"),
    (21792usize, "R27"),
    (21800usize, "_DormantCtlReg"),
    (21808usize, "_ID_MMFR0"),
    (21816usize, "_ERXADDR"),
    (21824usize, "EDITCTRL"),
    (21832usize, "__ignore_rvbar_in_aarch32"),
    (21840usize, "CNTP_CTL_S"),
    (21848usize, "FEAT_EL2_IMPLEMENTED"),
    (21856usize, "CTICONTROL"),
    (21864usize, "GCSPR_EL1"),
    (21872usize, "__currentCond"),
    (21880usize, "BRBSRCINJ_EL1"),
    (21888usize, "CONTEXTIDR_S"),
    (21896usize, "GITS_STATUSR"),
    (21904usize, "_HCR2"),
    (21912usize, "AMCIDR0"),
    (21920usize, "EventRegister"),
    (21928usize, "FEAT_ETS2_IMPLEMENTED"),
    (21936usize, "_DBGPRCR"),
    (21944usize, "_DLR"),
    (21952usize, "FEAT_SME_IMPLEMENTED"),
    (21960usize, "__SPE_LFSR"),
    (21968usize, "CNTSCR"),
    (21976usize, "_AMEVCNTR0_EL0"),
    (22008usize, "CNTKCTL_EL1"),
    (22016usize, "__isb_is_branch"),
    (22024usize, "GICR_MPAMIDR"),
    (22032usize, "LORID_EL1"),
    (22040usize, "_ICC_SRE_NS"),
    (22048usize, "_ICV_IGRPEN0"),
    (22056usize, "FEAT_DPB2_IMPLEMENTED"),
    (22064usize, "ID_AA64MMFR3_EL1"),
    (22072usize, "BRBINF_EL1"),
    (22328usize, "GICH_ELRSR"),
    (22336usize, "GICH_MISR"),
    (22344usize, "TCR_EL1"),
    (22352usize, "CNTVOFF_EL2"),
    (22360usize, "VTTBR"),
    (22368usize, "SPESampleInFlight"),
    (22376usize, "REVIDR_EL1"),
    (22384usize, "_DBGBXVR"),
    (22448usize, "TPIDRURW_S"),
    (22456usize, "AMCIDR3"),
    (22464usize, "FEAT_XS_IMPLEMENTED"),
    (22472usize, "MPAMVPM4_EL2"),
    (22480usize, "HCRX_EL2"),
    (22488usize, "OSDTRTX_EL1"),
    (22496usize, "MPAMVPM6_EL2"),
    (22504usize, "ID_AA64PFR1_EL1"),
    (22512usize, "ERXPFGF_EL1"),
    (22520usize, "FEAT_NV2_IMPLEMENTED"),
    (22528usize, "FEAT_HAFDBS_IMPLEMENTED"),
    (22536usize, "FEAT_PAuth_IMPLEMENTED"),
    (22544usize, "ICH_EISR_EL2"),
    (22552usize, "ERXMISC0_EL1"),
    (22560usize, "JOSCR"),
    (22568usize, "AMAIR2_EL2"),
    (22576usize, "PMAUTHSTATUS"),
    (22584usize, "PMCNTENCLR_EL0"),
    (22592usize, "__last_cycle_count"),
    (22608usize, "FEAT_F64MM_IMPLEMENTED"),
    (22616usize, "FEAT_PAuth2_IMPLEMENTED"),
    (22624usize, "CNTHPS_CVAL_EL2"),
    (22632usize, "__trcclaim_tags"),
    (22640usize, "AFSR1_EL1"),
    (22648usize, "_AMCNTENCLR1"),
    (22656usize, "GICD_SETSPI_NSR"),
    (22664usize, "MDCR_EL3"),
    (22672usize, "_VMPIDR"),
    (22680usize, "GICV_AHPPIR"),
    (22688usize, "AMPIDR0"),
    (22696usize, "PMSEVFR_EL1"),
    (22704usize, "v8Ap7_IMPLEMENTED"),
    (22712usize, "__InstructionStep"),
    (22720usize, "FEAT_SVE2p1_IMPLEMENTED"),
    (22728usize, "NUM_BREAKPOINTS"),
    (22744usize, "AMCNTENCLR0_EL0"),
    (22752usize, "EDDFR"),
    (22760usize, "__SPE_LFSR_initialized"),
    (22768usize, "VBAR_EL2"),
    (22776usize, "VSTTBR_EL2"),
    (22784usize, "EDVIDSR"),
    (22792usize, "PMZR_EL0"),
    (22800usize, "ADFSR_S"),
    (22808usize, "_ID_PFR2"),
    (22816usize, "_ICC_AP1R_S"),
    (22832usize, "_ICC_SGI1R"),
    (22840usize, "_CNTFRQ"),
    (22848usize, "CSSELR_EL1"),
    (22856usize, "MECID_P0_EL2"),
    (22864usize, "CNTFRQ_EL0"),
    (22872usize, "MAIR_EL1"),
    (22880usize, "R5"),
    (22888usize, "_HRMR"),
    (22896usize, "_HACTLR2"),
    (22904usize, "ESR_EL1"),
    (22912usize, "ICC_SRE_EL1_NS"),
    (22920usize, "_PAR_EL1"),
    (22936usize, "R3"),
    (22944usize, "ShouldAdvanceSS"),
    (22952usize, "FEAT_SME_F64F64_IMPLEMENTED"),
    (22960usize, "BRBTS_EL1"),
    (22968usize, "_ICV_AP1R"),
    (22984usize, "FEAT_MTE4_IMPLEMENTED"),
    (22992usize, "_DBGDSCRint"),
    (23000usize, "_DSPSR2"),
    (23008usize, "SPESampleCounterValid"),
    (23016usize, "_DISR"),
    (23024usize, "R26"),
    (23032usize, "VBAR_EL3"),
    (23040usize, "MECID_A1_EL2"),
    (23048usize, "RMR_EL2"),
    (23056usize, "_ID_DFR1"),
    (23064usize, "_ICV_PMR"),
    (23072usize, "_CNTV_CVAL"),
    (23080usize, "R10"),
    (23088usize, "FEAT_BF16_IMPLEMENTED"),
    (23096usize, "FEAT_THE_IMPLEMENTED"),
    (23104usize, "TTBR0_EL3"),
    (23112usize, "ICC_IAR1_EL1"),
    (23120usize, "R16"),
    (23128usize, "_PMOVSSET"),
    (23136usize, "_DBGDTRTXext"),
    (23144usize, "CTICIDR3"),
    (23152usize, "FEAT_PMUv3_EXT64_IMPLEMENTED"),
    (23160usize, "FEAT_SEBEP_IMPLEMENTED"),
    (23168usize, "_REVIDR"),
    (23176usize, "FEAT_I8MM_IMPLEMENTED"),
    (23184usize, "__CNTEL0BaseN"),
    (23192usize, "FEAT_ETE_IMPLEMENTED"),
    (23200usize, "__GICDistBase"),
    (23208usize, "CCSIDR_EL1"),
    (23216usize, "FEAT_EPAC_IMPLEMENTED"),
    (23224usize, "_DBGWVR"),
    (23288usize, "__feat_rpres"),
    (23296usize, "ID_ISAR3_EL1"),
    (23304usize, "__gmid_log2_block_size"),
    (23320usize, "GICM_SETSPI_SR"),
    (23328usize, "GITS_SGIR"),
    (23336usize, "__PMUBase"),
    (23344usize, "_VDFSR"),
    (23352usize, "TPIDR_EL0"),
    (23360usize, "EDDEVID"),
    (23368usize, "GICV_EOIR"),
    (23376usize, "ICV_DIR_EL1"),
    (23384usize, "_HTCR"),
    (23392usize, "_PMEVTYPER"),
    (23520usize, "ERXPFGCTL_EL1"),
    (23528usize, "_PMCEID1"),
    (23536usize, "_AMCNTENCLR0"),
    (23544usize, "RCWMASK_EL1"),
    (23560usize, "CNTV_CVAL_EL0"),
    (23568usize, "__cpy_mops_option_a_supported"),
    (23576usize, "BRBSRC_EL1"),
    (23832usize, "GITS_IIDR"),
    (23840usize, "R24"),
    (23848usize, "FEAT_CSV2_IMPLEMENTED"),
    (23856usize, "RNDR"),
    (23864usize, "__syncAbortOnSoWrite"),
    (23872usize, "GICM_IIDR"),
    (23880usize, "_ZA"),
    (89416usize, "GICD_TYPER"),
    (89424usize, "RMR_EL1"),
    (89432usize, "GICC_PMR"),
    (89440usize, "FEAT_MTE_IMPLEMENTED"),
    (89448usize, "FEAT_MPAMv0p1_IMPLEMENTED"),
    (89456usize, "__cpyf_mops_option_a_supported"),
    (89464usize, "ICV_EOIR1_EL1"),
    (89472usize, "ICC_MGRPEN1"),
    (89480usize, "_ERXCTLR2"),
    (89488usize, "PIR_EL2"),
    (89496usize, "FEAT_SPECRES_IMPLEMENTED"),
    (89504usize, "_CNTHP_CTL"),
    (89512usize, "FEAT_TRBE_EXT_IMPLEMENTED"),
    (89520usize, "RVBAR_EL2"),
    (89528usize, "_ID_MMFR2"),
    (89536usize, "ID_MMFR0_EL1"),
    (89544usize, "FEAT_XNX_IMPLEMENTED"),
    (89552usize, "AMAIR_EL1"),
    (89560usize, "PMUEventAccumulator"),
    (90056usize, "SP_EL0"),
    (90064usize, "_ICH_VMCR"),
    (90072usize, "__mpam_major"),
    (90080usize, "FEAT_E0PD_IMPLEMENTED"),
    (90088usize, "EDPIDR4"),
    (90096usize, "MECID_P1_EL2"),
    (90104usize, "_DBGBCR"),
    (90168usize, "FEAT_GICv3_LEGACY_IMPLEMENTED"),
    (90176usize, "SMPRIMAP_EL2"),
    (90184usize, "__supported_pa_size"),
    (90200usize, "SCTLR_EL1"),
    (90208usize, "__syncAbortOnDeviceRead"),
    (90216usize, "FEAT_Debugv8p1_IMPLEMENTED"),
    (90224usize, "FEAT_TME_IMPLEMENTED"),
    (90232usize, "DBGPRCR_EL1"),
    (90240usize, "ID_MMFR4_EL1"),
    (90248usize, "PMINTENSET_EL1"),
    (90256usize, "v8Ap4_IMPLEMENTED"),
    (90264usize, "_CNTHPS_CTL"),
    (90272usize, "ICV_BPR0_EL1"),
    (90280usize, "CPTR_EL3_ESM_VALUE"),
    (90296usize, "FEAT_AFP_IMPLEMENTED"),
    (90304usize, "GITS_CWRITER"),
    (90312usize, "_ICC_IGRPEN1_NS"),
    (90320usize, "__mpam_has_hcr"),
    (90328usize, "__empam_force_ns_RAO"),
    (90336usize, "ID_ISAR6_EL1"),
    (90344usize, "SCXTNUM_EL0"),
    (90352usize, "MVFR0_EL1"),
    (90360usize, "_DFAR_NS"),
    (90368usize, "_HACR"),
    (90376usize, "FEAT_PMUv3p8_IMPLEMENTED"),
    (90384usize, "_DBGCLAIMSET"),
    (90392usize, "GICR_INMIR0"),
    (90400usize, "NUM_AMU_CG0_MONITORS"),
    (90416usize, "CTIPIDR4"),
    (90424usize, "AMUSERENR_EL0"),
    (90432usize, "MPAM2_EL2"),
    (90440usize, "PMBPTR_EL1"),
    (90448usize, "_ZT0"),
    (90512usize, "FEAT_SVE_SHA3_IMPLEMENTED"),
    (90520usize, "_HSTR"),
    (90528usize, "ID_AA64MMFR2_EL1"),
    (90536usize, "ID_AA64ISAR0_EL1"),
    (90544usize, "_DBGOSECCR"),
    (90552usize, "AMPIDR4"),
    (90560usize, "ICC_SGI0R_EL1"),
    (90568usize, "BRBCR_EL1"),
    (90576usize, "SPSR_EL1"),
    (90584usize, "_PMCR"),
    (90592usize, "_ICC_IGRPEN1_S"),
    (90600usize, "_ICH_EISR"),
    (90608usize, "__GIC_Active"),
    (90616usize, "ESR_EL2"),
    (90624usize, "FEAT_PAN2_IMPLEMENTED"),
    (90632usize, "SCR_EL3"),
    (90640usize, "PAR_S"),
    (90648usize, "FEAT_WFxT_IMPLEMENTED"),
    (90656usize, "ID_MMFR3_EL1"),
    (90664usize, "CSSELR_S"),
    (90672usize, "_ICC_HSRE"),
    (90680usize, "CNTNSAR"),
    (90688usize, "FEAT_PMUv3_TH_IMPLEMENTED"),
    (90696usize, "FEAT_HBC_IMPLEMENTED"),
    (90704usize, "FEAT_SME_F16F16_IMPLEMENTED"),
    (90712usize, "NUM_AMU_CG1_MONITORS"),
    (90728usize, "OSLAR_EL1"),
    (90736usize, "MECIDR_EL2"),
    (90744usize, "MVFR2_EL1"),
    (90752usize, "_PMCEID3"),
    (90760usize, "CNTP_CTL_EL0"),
    (90768usize, "FEAT_CLRBHB_IMPLEMENTED"),
    (90776usize, "FEAT_MTE2_IMPLEMENTED"),
    (90784usize, "_PMCNTENCLR"),
    (90792usize, "MPAMVPM3_EL2"),
    (90800usize, "ID_MMFR1_EL1"),
    (90808usize, "ICV_NMIAR1_EL1"),
    (90816usize, "FEAT_SVE_B16B16_IMPLEMENTED"),
    (90824usize, "v9Ap2_IMPLEMENTED"),
    (90832usize, "FEAT_FPACCOMBINE_IMPLEMENTED"),
    (90840usize, "BTypeNext"),
    (90848usize, "FEAT_MTE_CANONICAL_TAGS_IMPLEMENTED"),
    (90856usize, "SMCR_EL3_LEN_VALUE"),
    (90872usize, "ID_PFR1_EL1"),
    (90880usize, "_ERXMISC6"),
    (90888usize, "SMCR_EL3"),
    (90896usize, "SP_EL2"),
    (90904usize, "_ICV_EOIR0"),
    (90912usize, "FEAT_SVE_SM4_IMPLEMENTED"),
    (90920usize, "_CNTVOFF"),
    (90928usize, "__mte_implemented"),
    (90936usize, "CONTEXTIDR_EL2"),
    (90944usize, "SPSR_irq"),
    (90952usize, "_TTBR0_EL2"),
    (90968usize, "JMCR"),
    (90976usize, "ICV_IAR1_EL1"),
    (90984usize, "__empam_force_ns_implemented"),
    (90992usize, "_SPSR_hyp"),
    (91000usize, "ICC_AP0R_EL1"),
    (91032usize, "GICC_RPR"),
    (91040usize, "_HACTLR"),
    (91048usize, "GICR_ISENABLER0"),
    (91056usize, "SMPRI_EL1"),
    (91064usize, "TSTATE"),
    (100136usize, "MVBAR"),
    (100144usize, "CNTV_TVAL_EL0"),
    (100152usize, "MPAMVPM0_EL2"),
    (100160usize, "VariantImplemented"),
    (100168usize, "_DBGVCR"),
    (100176usize, "ID_AA64SMFR0_EL1"),
    (100184usize, "FEAT_PMULL_IMPLEMENTED"),
    (100192usize, "FEAT_PAN_IMPLEMENTED"),
    (100200usize, "MFAR_EL3"),
    (100208usize, "Records_INF"),
    (100720usize, "CTIPIDR3"),
    (100728usize, "FEAT_FPAC_IMPLEMENTED"),
    (100736usize, "GMID_EL1"),
    (100744usize, "VSESR_EL2"),
    (100752usize, "CNTHPS_TVAL_EL2"),
    (100760usize, "NMRR_S"),
    (100768usize, "_ID_MMFR4"),
    (100776usize, "_ICH_VTR"),
    (100784usize, "EDDEVID1"),
    (100792usize, "PMCIDR1"),
    (100800usize, "GICR_INVALLR"),
    (100808usize, "FEAT_EDHSR_IMPLEMENTED"),
    (100816usize, "FEAT_NV_IMPLEMENTED"),
    (100824usize, "FEAT_SYSINSTR128_IMPLEMENTED"),
    (100832usize, "CNTHP_CTL_EL2"),
    (100840usize, "APIBKeyHi_EL1"),
    (100848usize, "CNTP_TVAL_EL0"),
    (100856usize, "FEAT_S2FWB_IMPLEMENTED"),
    (100864usize, "FEAT_AA32EL2_IMPLEMENTED"),
    (100872usize, "R8"),
    (100880usize, "_ICC_CTLR_NS"),
    (100888usize, "_EDECCR"),
    (100896usize, "CCSIDR2_EL1"),
    (100904usize, "MPAMVPM5_EL2"),
    (100912usize, "HFGWTR_EL2"),
    (100920usize, "SMIDR_EL1"),
    (100928usize, "_ERXMISC2"),
    (100936usize, "FEAT_LS64_ACCDATA_IMPLEMENTED"),
    (100944usize, "FEAT_ITE_IMPLEMENTED"),
    (100952usize, "CTIDEVARCH"),
    (100960usize, "S2POR_EL1"),
    (100968usize, "GICD_CLRSPI_NSR"),
    (100976usize, "GCSCR_EL1"),
    (100984usize, "FEAT_GCS_IMPLEMENTED"),
    (100992usize, "FEAT_Debugv8p4_IMPLEMENTED"),
    (101000usize, "_TTBCR_NS"),
    (101008usize, "LORN_EL1"),
    (101016usize, "FEAT_PACQARMA3_IMPLEMENTED"),
    (101024usize, "_RMR"),
    (101032usize, "FEAT_PMUv3p7_IMPLEMENTED"),
    (101040usize, "R7"),
    (101048usize, "__emulator_termination_opcode"),
    (101064usize, "_PMOVSR"),
    (101072usize, "__monomorphize_writes"),
    (101080usize, "__ExclusiveMonitorSet"),
    (101088usize, "FEAT_FlagM_IMPLEMENTED"),
    (101096usize, "TLBTR"),
    (101104usize, "FEAT_SHA3_IMPLEMENTED"),
    (101112usize, "FEAT_TLBIRANGE_IMPLEMENTED"),
    (101120usize, "IsWFIsleep"),
    (101128usize, "PMSFCR_EL1"),
    (101136usize, "ICC_IGRPEN1_EL1_S"),
    (101144usize, "HDFGRTR2_EL2"),
    (101152usize, "CTIPIDR1"),
    (101160usize, "_MPIDR"),
    (101168usize, "Records_TGT"),
    (101680usize, "EDPIDR3"),
    (101688usize, "EDDEVID2"),
    (101696usize, "PMIAR_EL1"),
    (101704usize, "GICR_PROPBASER"),
    (101712usize, "v9Ap4_IMPLEMENTED"),
    (101720usize, "TTBR0_S"),
    (101728usize, "GICV_CTLR"),
    (101736usize, "PMSICR_EL1"),
    (101744usize, "ID_AA64PFR0_EL1"),
    (101752usize, "FEAT_TTL_IMPLEMENTED"),
    (101760usize, "FEAT_LS64_IMPLEMENTED"),
    (101768usize, "FEAT_HPDS_IMPLEMENTED"),
    (101776usize, "v8Ap9_IMPLEMENTED"),
    (101784usize, "_DBGDTRTXint"),
    (101792usize, "JIDR"),
    (101800usize, "DBGWFAR"),
    (101808usize, "GICV_AIAR"),
    (101816usize, "ZCR_EL1"),
    (101824usize, "FEAT_ETMv4_IMPLEMENTED"),
    (101832usize, "RMR_EL3"),
    (101840usize, "AMCNTENCLR1_EL0"),
    (101848usize, "PMEVCNTSVR_EL1"),
    (102096usize, "NUM_GIC_PRIORITY_BITS"),
    (102112usize, "_ICV_HPPIR0"),
    (102120usize, "PMLSR"),
    (102128usize, "DCZID_EL0"),
    (102136usize, "_ICV_IGRPEN1"),
    (102144usize, "__DCACHE_CCSIDR_RESET"),
    (102200usize, "FEAT_RPRFM_IMPLEMENTED"),
    (102208usize, "DBGVCR32_EL2"),
    (102216usize, "CTIDEVID"),
    (102224usize, "BRBTGTINJ_EL1"),
    (102232usize, "FEAT_DoubleLock_IMPLEMENTED"),
    (102240usize, "_ID_MMFR3"),
    (102248usize, "_SDER"),
    (102256usize, "FEAT_SM4_IMPLEMENTED"),
    (102264usize, "MPAMSM_EL1"),
    (102272usize, "FEAT_TRF_IMPLEMENTED"),
    (102280usize, "PIRE0_EL2"),
    (102288usize, "_ICC_HPPIR1"),
    (102296usize, "EDCIDR0"),
    (102304usize, "FEAT_CNTSC_IMPLEMENTED"),
    (102312usize, "__trickbox_enabled"),
    (102320usize, "AMPIDR3"),
    (102328usize, "FEAT_CCIDX_IMPLEMENTED"),
    (102336usize, "_ICC_DIR"),
    (102344usize, "PMLAR"),
    (102352usize, "FEAT_SM3_IMPLEMENTED"),
    (102360usize, "CFG_RVBAR"),
    (102368usize, "_FPEXC"),
    (102376usize, "ICV_BPR1_EL1"),
    (102384usize, "ACCDATA_EL1"),
    (102392usize, "ERXMISC2_EL1"),
    (102400usize, "FEAT_VHE_IMPLEMENTED"),
    (102408usize, "NSACR"),
    (102416usize, "__CTIBase"),
    (102424usize, "CTILSR"),
    (102432usize, "_ISR"),
    (102440usize, "InGuardedPage"),
    (102448usize, "ICC_BPR1_EL1_S"),
    (102456usize, "_ERRSELR"),
    (102464usize, "GICV_AEOIR"),
    (102472usize, "HCR_EL2"),
    (102480usize, "ID_ISAR2_EL1"),
    (102488usize, "MECID_RL_A_EL3"),
    (102496usize, "FEAT_EL0_IMPLEMENTED"),
    (102504usize, "DSPSR_EL0"),
    (102512usize, "FEAT_D128_IMPLEMENTED"),
    (102520usize, "_DFSR_NS"),
    (102528usize, "GICD_STATUSR"),
    (102536usize, "FAR_EL2"),
    (102544usize, "PMUSERENR_EL0"),
    (102552usize, "FEAT_SSBS2_IMPLEMENTED"),
    (102560usize, "_ID_ISAR5"),
    (102568usize, "SPESampleCounterPending"),
    (102576usize, "SCTLR2_EL2"),
    (102584usize, "POR_EL0"),
    (102592usize, "R12"),
    (102600usize, "FEAT_PRFMSLC_IMPLEMENTED"),
    (102608usize, "R22"),
    (102616usize, "_MVFR2"),
    (102624usize, "GICV_PMR"),
    (102632usize, "GICR_INVLPIR"),
    (102640usize, "_ACTLR_NS"),
    (102648usize, "FEAT_LOR_IMPLEMENTED"),
    (102656usize, "v9Ap1_IMPLEMENTED"),
    (102664usize, "R11"),
    (102672usize, "PMICNTSVR_EL1"),
    (102680usize, "HFGRTR2_EL2"),
    (102688usize, "__num_ctx_breakpoints"),
    (102704usize, "_ID_AFR0"),
    (102712usize, "_ConfigReg"),
    (102720usize, "PAR_NS"),
    (102728usize, "PMDEVID"),
    (102736usize, "PFAR_EL1"),
    (102744usize, "_HCR"),
    (102752usize, "OSDLR_EL1"),
    (102760usize, "FEAT_SPEv1p4_IMPLEMENTED"),
    (102768usize, "FeatureImpl"),
    (102808usize, "ICC_HPPIR0_EL1"),
    (102816usize, "ID_AA64MMFR1_EL1"),
    (102824usize, "CNTHV_CVAL_EL2"),
    (102832usize, "ID_MMFR2_EL1"),
    (102840usize, "_HCPTR"),
    (102848usize, "SCXTNUM_EL1"),
    (102856usize, "DBGDTRRX_EL0"),
    (102864usize, "__setg_mops_option_a_supported"),
    (102872usize, "_DSPSR"),
    (102880usize, "EDPRCR"),
    (102888usize, "FEAT_DIT_IMPLEMENTED"),
    (102896usize, "FEAT_MPAM_IMPLEMENTED"),
    (102904usize, "_ID_ISAR0"),
    (102912usize, "AMEVCNTR1_EL0"),
    (103040usize, "_HMAIR0"),
    (103048usize, "FEAT_AA32EL1_IMPLEMENTED"),
    (103056usize, "ERXSTATUS_EL1"),
    (103064usize, "GICH_HCR"),
    (103072usize, "DFSR_S"),
    (103080usize, "FEAT_GICv4p1_IMPLEMENTED"),
    (103088usize, "MIDR_EL1"),
    (103096usize, "DBGBVR_EL1"),
    (103608usize, "FEAT_RAS_IMPLEMENTED"),
    (103616usize, "PMSWINC_EL0"),
    (103624usize, "CNTPS_TVAL_EL1"),
    (103632usize, "PMCGCR0"),
    (103640usize, "FEAT_NMI_IMPLEMENTED"),
    (103648usize, "FEAT_LPA2_IMPLEMENTED"),
    (103656usize, "DBGWCR_EL1"),
    (104168usize, "PMICFILTR_EL0"),
    (104176usize, "FEAT_MTE3_IMPLEMENTED"),
    (104184usize, "_AMCNTENSET1"),
    (104192usize, "__g1_activity_monitor_implemented"),
    (104200usize, "FEAT_SPEv1p3_IMPLEMENTED"),
    (104208usize, "GICV_BPR"),
    (104216usize, "FEAT_TTCNP_IMPLEMENTED"),
    (104224usize, "FEAT_LRCPC2_IMPLEMENTED"),
    (104232usize, "_DBGDCCINT"),
    (104240usize, "SPESampleContextEL1"),
    (104248usize, "__CNTControlBase"),
    (104256usize, "GICD_IIDR"),
    (104264usize, "PMPIDR4"),
    (104272usize, "CTIDEVID2"),
    (104280usize, "FEAT_AA32BF16_IMPLEMENTED"),
    (104288usize, "FEAT_BRBE_IMPLEMENTED"),
    (104296usize, "FEAT_AA32I8MM_IMPLEMENTED"),
    (104304usize, "PIR_EL1"),
    (104312usize, "PMOVSSET_EL0"),
    (104320usize, "MDSCR_EL1"),
    (104328usize, "FEAT_ETMv4p3_IMPLEMENTED"),
    (104336usize, "ID_AA64ZFR0_EL1"),
    (104344usize, "__g1_activity_monitor_offset_implemented"),
    (104352usize, "ACTLR_EL1"),
    (104360usize, "_CLIDR"),
    (104368usize, "__ThisInstr"),
    (104376usize, "_CNTHVS_CTL"),
    (104384usize, "FEAT_S2POE_IMPLEMENTED"),
    (104392usize, "ID_DFR1_EL1"),
    (104400usize, "__has_spe_pseudo_cycles"),
    (104408usize, "FEAT_MTPMU_IMPLEMENTED"),
    (104416usize, "DBGOSLAR"),
    (104424usize, "__ExtDebugBase"),
    (104432usize, "TFSR_EL2"),
    (104440usize, "TFSR_EL3"),
    (104448usize, "PMCCNTR_EL0"),
    (104456usize, "_DBGAUTHSTATUS"),
    (104464usize, "ShouldAdvanceIT"),
    (104472usize, "ID_AA64DFR1_EL1"),
    (104480usize, "AMCNTENSET0_EL0"),
    (104488usize, "_ICC_BPR1_S"),
    (104496usize, "_ICC_PMR"),
    (104504usize, "CTIDEVID1"),
    (104512usize, "HFGITR2_EL2"),
    (104520usize, "AMCG1IDR_EL0"),
    (104528usize, "SPESampleEvents"),
    (104536usize, "FEAT_DoubleFault2_IMPLEMENTED"),
    (104544usize, "FAR_EL3"),
    (104552usize, "MDCR_EL2"),
    (104560usize, "PMOVSCLR_EL0"),
    (104568usize, "__syncAbortOnWriteNormNonCache"),
    (104576usize, "MVFR1_EL1"),
    (104584usize, "TPIDR2_EL0"),
    (104592usize, "SPNIDEN"),
    (104600usize, "PMSCR_EL2"),
    (104608usize, "HSTR_EL2"),
    (104616usize, "CTICIDR2"),
    (104624usize, "GICV_ABPR"),
    (104632usize, "FEAT_JSCVT_IMPLEMENTED"),
    (104640usize, "FEAT_MPAMv1p1_IMPLEMENTED"),
    (104648usize, "FEAT_PMUv3p4_IMPLEMENTED"),
    (104656usize, "PMPIDR1"),
    (104664usize, "FEAT_GICv3_TDIR_IMPLEMENTED"),
    (104672usize, "R17"),
    (104680usize, "_AMAIR0_NS"),
];
#[repr(align(8))]
pub struct State {
    data: [u8; 104684usize],
    guest_environment: alloc::boxed::Box<dyn plugins_api::guest::Environment>,
}
impl State {
    // Returns the ISA state with initial values and configuration set
    pub fn new(
        guest_environment: alloc::boxed::Box<dyn plugins_api::guest::Environment>,
    ) -> Self {
        Self {
            data: [0; 104684usize],
            guest_environment,
        }
    }
    pub fn write_register<T>(&mut self, offset: usize, value: T) {
        let start = offset;
        let end = start + core::mem::size_of::<T>();
        unsafe {
            core::ptr::write_unaligned(self.data[start..end].as_mut_ptr().cast(), value)
        };
    }
    pub fn read_register<T>(&self, offset: usize) -> T {
        let start = offset;
        let end = start + core::mem::size_of::<T>();
        unsafe { core::ptr::read_unaligned(self.data[start..end].as_ptr().cast()) }
    }
    pub fn write_memory(&self, address: u64, data: &[u8]) {
        self.guest_environment.write_memory(address, data);
    }
    pub fn read_memory(&self, address: u64, data: &mut [u8]) {
        self.guest_environment.read_memory(address, data);
    }
}
impl core::fmt::Debug for State {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        writeln!(f, "State {{")?;
        for window in REGISTER_NAME_MAP.windows(2) {
            let (offset, name) = window[0];
            let (next_offset, _) = window[1];
            write!(f, "{name}: 0x")?;
            for byte_idx in 0..(next_offset - offset) {
                write!(f, "{:x}", self.read_register:: < u8 > (offset + byte_idx))?;
            }
            writeln!(f)?;
        }
        writeln!(f, "}}")
    }
}
pub const REG_ERXMISC1_EL1: usize = 1400usize;
pub const REG_FEAT_VMID16_IMPLEMENTED: usize = 1408usize;
pub const REG_V9AP0_IMPLEMENTED: usize = 1416usize;
pub const REG_FEAT_SVE_PMULL128_IMPLEMENTED: usize = 1424usize;
pub const REG_U__DBG_ROM_ADDR: usize = 1432usize;
pub const REG_U_ERXMISC7: usize = 1440usize;
pub const REG_GICH_EISR: usize = 1448usize;
pub const REG_U_VTCR: usize = 1456usize;
pub const REG_SCTLR2_EL3: usize = 1464usize;
pub const REG_PMU_EVENT_EXC_TAKEN: usize = 48usize;
pub const REG_ICC_CTLR_EL1_NS: usize = 1472usize;
pub const REG_ID_ISAR5_EL1: usize = 1480usize;
pub const REG_FEAT_EVT_IMPLEMENTED: usize = 1488usize;
pub const REG_U_PMINTENSET: usize = 1496usize;
pub const REG_FEAT_EL3_IMPLEMENTED: usize = 1512usize;
pub const REG_U_ICV_CTLR: usize = 1528usize;
pub const REG_AMPIDR2: usize = 1504usize;
pub const REG_PMVCIDSR: usize = 1536usize;
pub const REG_SPEADDRPOSPREVBRANCHTARGET: usize = 1048usize;
pub const REG_PMSDSFR_EL1: usize = 1520usize;
pub const REG_FEAT_FGT2_IMPLEMENTED: usize = 1544usize;
pub const REG_RLPIDEN: usize = 1552usize;
pub const REG_FEAT_ETEV1P2_IMPLEMENTED: usize = 1560usize;
pub const REG_FEAT_AES_IMPLEMENTED: usize = 1568usize;
pub const REG_U__MAX_IMPLEMENTED_SMEVECLEN: usize = 1576usize;
pub const REG_ICC_AP1R_EL1_S: usize = 1600usize;
pub const REG_MECID_A0_EL2: usize = 1592usize;
pub const REG_EDCIDR2: usize = 1640usize;
pub const REG_FEAT_SHA256_IMPLEMENTED: usize = 1632usize;
pub const REG_LORC_EL1: usize = 1648usize;
pub const REG_U_PMEVCNTR: usize = 1656usize;
pub const REG_U__EXCLUSIVE_GRANULE_SIZE: usize = 1784usize;
pub const REG_PMU_EVENT_LL_CACHE_HITM_RD: usize = 312usize;
pub const REG_FEAT_FGT_IMPLEMENTED: usize = 1792usize;
pub const REG_U_Z: usize = 1800usize;
pub const REG_FEAT_GICV4_IMPLEMENTED: usize = 9992usize;
pub const REG_FEAT_SEL2_IMPLEMENTED: usize = 10000usize;
pub const REG_U_ICH_AP1R: usize = 10008usize;
pub const REG_CFG_MPAM_NONE: usize = 1264usize;
pub const REG_FEAT_SME2P1_IMPLEMENTED: usize = 10024usize;
pub const REG_U__ETEBASE: usize = 10032usize;
pub const REG_GICC_BPR: usize = 10040usize;
pub const REG_CONTEXTIDR_EL1: usize = 10048usize;
pub const REG_GICR_STATUSR: usize = 10056usize;
pub const REG_CNTHVS_CVAL_EL2: usize = 10064usize;
pub const REG_SPEMAXCOUNTERS: usize = 1000usize;
pub const REG_STACK_LIMIT: usize = 10072usize;
pub const REG_GICC_ABPR: usize = 10080usize;
pub const REG_GICC_AIAR: usize = 10096usize;
pub const REG_U_CTR: usize = 10088usize;
pub const REG_FEAT_RASSAV1P1_IMPLEMENTED: usize = 10104usize;
pub const REG_ERXADDR_EL1: usize = 10112usize;
pub const REG_FEAT_PACQARMA5_IMPLEMENTED: usize = 10120usize;
pub const REG_OSLSR_EL1: usize = 10128usize;
pub const REG_GICR_SETLPIR: usize = 10136usize;
pub const REG_PMSLATFR_EL1: usize = 10144usize;
pub const REG_U_DBGDTRRXEXT: usize = 10152usize;
pub const REG_U_HDCR: usize = 10160usize;
pub const REG_BRBINFINJ_EL1: usize = 10168usize;
pub const REG_PMCEID1_EL0: usize = 10176usize;
pub const REG_SP_EL1: usize = 10184usize;
pub const REG_CP15SDISABLE: usize = 10192usize;
pub const REG_ICC_SRE_EL3: usize = 10200usize;
pub const REG_FEAT_HPMN0_IMPLEMENTED: usize = 10208usize;
pub const REG_GCSPR_EL2: usize = 10216usize;
pub const REG_U_ERXMISC1: usize = 10224usize;
pub const REG_GICV_RPR: usize = 10232usize;
pub const REG_ICH_LR_EL2: usize = 10240usize;
pub const REG_U__HIGHEST_EL_AARCH32: usize = 10368usize;
pub const REG_SMCR_EL2: usize = 10376usize;
pub const REG_SPERECORDSIZE: usize = 10384usize;
pub const REG_FEAT_RNG_TRAP_IMPLEMENTED: usize = 10400usize;
pub const REG_FEAT_DOPD_IMPLEMENTED: usize = 10408usize;
pub const REG_ERXCTLR_EL1: usize = 10416usize;
pub const REG_CFG_ID_AA64PFR0_EL1_EL1: usize = 1232usize;
pub const REG_U__CYCLE_COUNT: usize = 10424usize;
pub const REG_PMUACR_EL1: usize = 10440usize;
pub const REG_U_ICC_CTLR_S: usize = 10456usize;
pub const REG_FEAT_HAFT_IMPLEMENTED: usize = 10464usize;
pub const REG_U_CNTV_CTL: usize = 10448usize;
pub const REG_FEAT_PMUV3_EXT32_IMPLEMENTED: usize = 10472usize;
pub const REG_ACTLR2_S: usize = 10480usize;
pub const REG_U_ID_MMFR1: usize = 10488usize;
pub const REG_GICD_CTLR: usize = 10496usize;
pub const REG_CNTHPS_CTL_EL2: usize = 10504usize;
pub const REG_AMCFGR_EL0: usize = 10512usize;
pub const REG_PMCIDR2: usize = 10520usize;
pub const REG_SPESAMPLEINSTISNV2: usize = 10528usize;
pub const REG_VBAR_S: usize = 10536usize;
pub const REG_MAIR_EL2: usize = 10544usize;
pub const REG_FEAT_PACIMP_IMPLEMENTED: usize = 10552usize;
pub const REG_PMULASTTHRESHOLDVALUE: usize = 10560usize;
pub const REG_R25: usize = 10568usize;
pub const REG_ICV_IGRPEN1_EL1: usize = 10576usize;
pub const REG_ID_AA64AFR0_EL1: usize = 10584usize;
pub const REG_ACTLR_EL2: usize = 10592usize;
pub const REG_FEAT_DGH_IMPLEMENTED: usize = 10600usize;
pub const REG_GITS_TYPER: usize = 10608usize;
pub const REG_U__MONOMORPHIZE_READS: usize = 10616usize;
pub const REG_MPAMVPM1_EL2: usize = 10624usize;
pub const REG_RNDRRS: usize = 10632usize;
pub const REG_SPERECORDDATA: usize = 10640usize;
pub const REG_GICR_VSGIR: usize = 10704usize;
pub const REG_LOG2_TAG_GRANULE: usize = 456usize;
pub const REG_TCR_EL3: usize = 10712usize;
pub const REG_PMEVCNTR_EL0: usize = 10720usize;
pub const REG_U_MAIR0_NS: usize = 10976usize;
pub const REG_EDRCR: usize = 10984usize;
pub const REG_IFSR_S: usize = 10992usize;
pub const REG_GPRS: usize = 520usize;
pub const REG_FEAT_FLAGM2_IMPLEMENTED: usize = 11000usize;
pub const REG_MPAMIDR_EL1: usize = 11008usize;
pub const REG_ICH_MISR_EL2: usize = 11016usize;
pub const REG_U_AIFSR_NS: usize = 11024usize;
pub const REG_GICC_AHPPIR: usize = 11032usize;
pub const REG_ZCR_EL3: usize = 11040usize;
pub const REG_U_ERXFR: usize = 11048usize;
pub const REG_U_ID_DFR0: usize = 11056usize;
pub const REG_CPTR_EL2: usize = 11064usize;
pub const REG_APIBKEYLO_EL1: usize = 11072usize;
pub const REG_NUM_PMU_COUNTERS: usize = 11080usize;
pub const REG_PMPCSCTL: usize = 11096usize;
pub const REG_U__RD_BASE: usize = 11104usize;
pub const REG_SPESAMPLEADDRESSVALID: usize = 11112usize;
pub const REG_VSTCR_EL2: usize = 11120usize;
pub const REG_U__MAX_IMPLEMENTED_SVEVECLEN: usize = 11128usize;
pub const REG_PMU_EVENT_L2D_CACHE_RD: usize = 144usize;
pub const REG_U_CNTHCTL: usize = 11144usize;
pub const REG_SPEADDRPOSPCVIRTUAL: usize = 1016usize;
pub const REG_FEAT_ETMV4P1_IMPLEMENTED: usize = 11152usize;
pub const REG_PMEVTYPER_EL0: usize = 11160usize;
pub const REG_TRFCR_EL1: usize = 11416usize;
pub const REG_GICC_HPPIR: usize = 11424usize;
pub const REG_GCR_EL1: usize = 11432usize;
pub const REG_CFG_MPAM_V1P1: usize = 1280usize;
pub const REG_R23: usize = 11440usize;
pub const REG_FEAT_TIDCP1_IMPLEMENTED: usize = 11448usize;
pub const REG_DACR_S: usize = 11456usize;
pub const REG_EDPIDR1: usize = 11464usize;
pub const REG_U_SDER32_EL3: usize = 11472usize;
pub const REG_SPESAMPLESUBCLASSVALID: usize = 11480usize;
pub const REG_ICC_AP1R_EL1_NS: usize = 11488usize;
pub const REG_U_DBGDTR_EL0: usize = 11520usize;
pub const REG_FEAT_LSE128_IMPLEMENTED: usize = 11528usize;
pub const REG_U__RME_L0GPTSZ: usize = 11536usize;
pub const REG_AMAIR_EL3: usize = 11544usize;
pub const REG_FEAT_AMUV1_IMPLEMENTED: usize = 11552usize;
pub const REG_FEAT_PMUV3_EDGE_IMPLEMENTED: usize = 11560usize;
pub const REG_TTBR0_NS: usize = 11568usize;
pub const REG_FEAT_AIE_IMPLEMENTED: usize = 11576usize;
pub const REG_ICC_CTLR_EL3: usize = 11584usize;
pub const REG_PMMIR: usize = 11592usize;
pub const REG_TRFCR_EL2: usize = 11600usize;
pub const REG_R28: usize = 11608usize;
pub const REG_PMU_EVENT_SAMPLE_COLLISION: usize = 176usize;
pub const REG_FEAT_PCSRV8P2_IMPLEMENTED: usize = 11616usize;
pub const REG_TPIDRPRW_S: usize = 11624usize;
pub const REG_V8AP0_IMPLEMENTED: usize = 11632usize;
pub const REG_FEAT_AA64EL2_IMPLEMENTED: usize = 11640usize;
pub const REG_LR_MON: usize = 11648usize;
pub const REG_GCSCR_EL3: usize = 11656usize;
pub const REG_U_IFSR_NS: usize = 11664usize;
pub const REG_RCW128_PROTECTED_BIT: usize = 1192usize;
pub const REG_SCTLR2_EL1: usize = 11672usize;
pub const REG_ICC_NMIAR1_EL1: usize = 11680usize;
pub const REG_PMCNTENSET_EL0: usize = 11688usize;
pub const REG_ID_PFR2_EL1: usize = 11696usize;
pub const REG_U_AMEVTYPER0: usize = 11704usize;
pub const REG_U_ICH_LRC: usize = 11720usize;
pub const REG_EDDEVTYPE: usize = 11784usize;
pub const REG_FEAT_IDST_IMPLEMENTED: usize = 11792usize;
pub const REG_ISWFESLEEP: usize = 11800usize;
pub const REG_U_ICC_IAR1: usize = 11808usize;
pub const REG_FEAT_AA64EL3_IMPLEMENTED: usize = 11816usize;
pub const REG_U_ICH_MISR: usize = 11824usize;
pub const REG_FEAT_PMUV3_ICNTR_IMPLEMENTED: usize = 11832usize;
pub const REG_HPFAR_EL2: usize = 11840usize;
pub const REG_APGAKEYLO_EL1: usize = 11848usize;
pub const REG_ICC_SRE_EL1_S: usize = 11856usize;
pub const REG_U_ERXSTATUS: usize = 11864usize;
pub const REG_GICR_WAKER: usize = 11872usize;
pub const REG_FEAT_SVE_IMPLEMENTED: usize = 11880usize;
pub const REG_S2PIR_EL2: usize = 11888usize;
pub const REG_SPMACCESSR_EL1: usize = 11896usize;
pub const REG_U_ICC_AP0R: usize = 11904usize;
pub const REG_CNTFID0: usize = 11920usize;
pub const REG_TPIDR_EL2: usize = 11928usize;
pub const REG_ICC_IGRPEN1_EL3: usize = 11936usize;
pub const REG_ESR_EL3: usize = 11944usize;
pub const REG_FEAT_CSSC_IMPLEMENTED: usize = 11960usize;
pub const REG_GICR_VSGIPENDR: usize = 11952usize;
pub const REG_R6: usize = 11968usize;
pub const REG_FEAT_SPEV1P1_IMPLEMENTED: usize = 11976usize;
pub const REG_FEAT_SCTLR2_IMPLEMENTED: usize = 11984usize;
pub const REG_FEAT_MTE_TAGGED_FAR_IMPLEMENTED: usize = 11992usize;
pub const REG_ICV_IGRPEN0_EL1: usize = 12000usize;
pub const REG_GICD_TYPER2: usize = 12008usize;
pub const REG_U_CCSIDR: usize = 12016usize;
pub const REG_DBGCLAIMSET_EL1: usize = 12024usize;
pub const REG_SP_EL3: usize = 12032usize;
pub const REG_CPACR_EL1: usize = 12040usize;
pub const REG_U_HVBAR: usize = 12048usize;
pub const REG_PMVIDSR: usize = 12056usize;
pub const REG_FEAT_TRBE_MPAM_IMPLEMENTED: usize = 12064usize;
pub const REG_ICV_IAR0_EL1: usize = 12072usize;
pub const REG_FEAT_BRBEV1P1_IMPLEMENTED: usize = 12080usize;
pub const REG_SPIDEN: usize = 12088usize;
pub const REG_FEAT_PMUV3P1_IMPLEMENTED: usize = 12096usize;
pub const REG_FEAT_SME_FA64_IMPLEMENTED: usize = 12104usize;
pub const REG_U_HAMAIR0: usize = 12112usize;
pub const REG_FEAT_TWED_IMPLEMENTED: usize = 12120usize;
pub const REG_PIR_EL3: usize = 12128usize;
pub const REG_DBGBCR_EL1: usize = 12136usize;
pub const REG_STACK_BASE: usize = 12648usize;
pub const REG_U_ICC_RPR: usize = 12656usize;
pub const REG_AMAIR0_S: usize = 12664usize;
pub const REG_GICV_STATUSR: usize = 12672usize;
pub const REG_PMITCTRL: usize = 12680usize;
pub const REG_PMSIRR_EL1: usize = 12688usize;
pub const REG_U_PC: usize = 12696usize;
pub const REG_U_ICC_ASGI1R: usize = 12704usize;
pub const REG_NUM_AMU_COUNTER_GROUPS: usize = 12712usize;
pub const REG_ICC_PMR_EL1: usize = 12728usize;
pub const REG_FEAT_RASSAV2_IMPLEMENTED: usize = 12736usize;
pub const REG_U_MPAM3_EL3: usize = 12744usize;
pub const REG_FEAT_PAN3_IMPLEMENTED: usize = 12752usize;
pub const REG_CNTHCTL_EL2: usize = 12760usize;
pub const REG_TAG_GRANULE: usize = 1344usize;
pub const REG_TCR_EL2: usize = 12768usize;
pub const REG_ICV_CTLR_EL1: usize = 12776usize;
pub const REG_AMAIR_EL2: usize = 12784usize;
pub const REG_U_MVFR1: usize = 12792usize;
pub const REG_U_ICC_AP1R_NS: usize = 12800usize;
pub const REG_U_CCSIDR2: usize = 12816usize;
pub const REG_U_AMCGCR: usize = 12824usize;
pub const REG_TFSR_EL1: usize = 12832usize;
pub const REG_U_HSR: usize = 12840usize;
pub const REG_FEAT_RASV2_IMPLEMENTED: usize = 12848usize;
pub const REG_PMSNEVFR_EL1: usize = 12856usize;
pub const REG_FEAT_CSV2_1P2_IMPLEMENTED: usize = 12864usize;
pub const REG_PMU_EVENT_SAMPLE_WRAP: usize = 224usize;
pub const REG_DEBUGEXCEPTION_BREAKPOINT: usize = 1312usize;
pub const REG_FPCR: usize = 12872usize;
pub const REG_U_PMCCNTR: usize = 12880usize;
pub const REG_ERXMISC3_EL1: usize = 12888usize;
pub const REG_PMICNTR_EL0: usize = 12896usize;
pub const REG_U__DCZID_LOG2_BLOCK_SIZE: usize = 12904usize;
pub const REG_EDPIDR2: usize = 12920usize;
pub const REG_U_DCLONE: usize = 12928usize;
pub const REG_CTIAUTHSTATUS: usize = 13184usize;
pub const REG_U__SYNCABORTONTTWNONCACHE: usize = 13192usize;
pub const REG_U__SYNCABORTONREADNORMNONCACHE: usize = 13200usize;
pub const REG_U_ICV_DIR: usize = 13208usize;
pub const REG_U_AIDR: usize = 13216usize;
pub const REG_PMSSCR_EL1: usize = 13224usize;
pub const REG_U_CNTP_CTL_NS: usize = 13232usize;
pub const REG_FEAT_AA32EL3_IMPLEMENTED: usize = 13240usize;
pub const REG_U_AMEVTYPER1: usize = 13248usize;
pub const REG_DLR_EL0: usize = 13312usize;
pub const REG_AFSR0_EL2: usize = 13320usize;
pub const REG_U_TTBCR2_NS: usize = 13328usize;
pub const REG_GIC_BASE: usize = 1360usize;
pub const REG_U_ICV_BPR1: usize = 13336usize;
pub const REG_U__MPAM_PMG_MAX: usize = 13344usize;
pub const REG_FEAT_HPDS2_IMPLEMENTED: usize = 13352usize;
pub const REG_FEAT_PMUV3P9_IMPLEMENTED: usize = 13360usize;
pub const REG_U_HADFSR: usize = 13368usize;
pub const REG_U_ICH_ELRSR: usize = 13376usize;
pub const REG_APGAKEYHI_EL1: usize = 13384usize;
pub const REG_AMCNTENSET1_EL0: usize = 13392usize;
pub const REG_APDAKEYHI_EL1: usize = 13400usize;
pub const REG_PHYSICALCOUNT: usize = 13408usize;
pub const REG_U__GICITSCONTROLBASE: usize = 13424usize;
pub const REG_DEBUGHALT_STEP_EXCLUSIVE: usize = 1120usize;
pub const REG_ID_AA64PFR2_EL1: usize = 13432usize;
pub const REG_U_AMCFGR: usize = 13440usize;
pub const REG_BRBIDR0_EL1: usize = 13448usize;
pub const REG_SPESAMPLETIMESTAMP: usize = 13456usize;
pub const REG_GICR_SYNCR: usize = 13464usize;
pub const REG_U_NMRR_NS: usize = 13472usize;
pub const REG_SPESAMPLESUBCLASS: usize = 13480usize;
pub const REG_U_MPAM1_EL1: usize = 13488usize;
pub const REG_U_ID_MMFR5: usize = 13496usize;
pub const REG_ICV_EOIR0_EL1: usize = 13504usize;
pub const REG_FEAT_EXS_IMPLEMENTED: usize = 13512usize;
pub const REG_ICV_HPPIR0_EL1: usize = 13520usize;
pub const REG_FEAT_BBM_IMPLEMENTED: usize = 13528usize;
pub const REG_U__SME_ONLY: usize = 13536usize;
pub const REG_POR_EL1: usize = 13544usize;
pub const REG_U__THISINSTRENC: usize = 13552usize;
pub const REG_HFGITR_EL2: usize = 13560usize;
pub const REG_PMECR_EL1: usize = 13568usize;
pub const REG_EDAA32PFR: usize = 13576usize;
pub const REG_PMU_EVENT_SAMPLE_FILTRATE: usize = 168usize;
pub const REG_DISR_EL1: usize = 13584usize;
pub const REG_U_ID_ISAR6: usize = 13592usize;
pub const REG_M32_MONITOR: usize = 384usize;
pub const REG_VNCR_EL2: usize = 13600usize;
pub const REG_FEAT_PFAR_IMPLEMENTED: usize = 13608usize;
pub const REG_ICC_EOIR0_EL1: usize = 13616usize;
pub const REG_GICR_IIDR: usize = 13624usize;
pub const REG_CTICIDR0: usize = 13632usize;
pub const REG_SPMACCESSR_EL3: usize = 13640usize;
pub const REG_CNTEL0ACR: usize = 13648usize;
pub const REG_PMBSR_EL1: usize = 13656usize;
pub const REG_U_AMCR: usize = 13664usize;
pub const REG_U_ICV_RPR: usize = 13672usize;
pub const REG_U__IMPDEF_TG1: usize = 13680usize;
pub const REG_CTIDEVTYPE: usize = 13688usize;
pub const REG_EDCIDR1: usize = 13696usize;
pub const REG_CTIDEVCTL: usize = 13704usize;
pub const REG_PMU_EVENT_LDST_ALIGN_LAT: usize = 192usize;
pub const REG_GPT_CONTIG: usize = 864usize;
pub const REG_U_HTRFCR: usize = 13712usize;
pub const REG_FEAT_RASV1P1_IMPLEMENTED: usize = 13720usize;
pub const REG_SPESAMPLEADDRESS: usize = 13728usize;
pub const REG_U__LAST_BRANCH_VALID: usize = 13984usize;
pub const REG_EDPRSR: usize = 13992usize;
pub const REG_CFG_MPIDR: usize = 14000usize;
pub const REG_FEAT_DEBUGV8P2_IMPLEMENTED: usize = 14008usize;
pub const REG_FEAT_LRCPC_IMPLEMENTED: usize = 14016usize;
pub const REG_PMPIDR2: usize = 14024usize;
pub const REG_U_IFAR_NS: usize = 14032usize;
pub const REG_U_HAIFSR: usize = 14040usize;
pub const REG_U_DBGWCR: usize = 14048usize;
pub const REG_CNTPS_CVAL_EL1: usize = 14112usize;
pub const REG_DEBUGEXCEPTION_BKPT: usize = 1320usize;
pub const REG_U_TTBR1_EL1: usize = 14120usize;
pub const REG_SPESAMPLEDATASOURCEVALID: usize = 14136usize;
pub const REG_AMDEVTYPE: usize = 14144usize;
pub const REG_POR_EL3: usize = 14152usize;
pub const REG_U_EDSCR2: usize = 14160usize;
pub const REG_U__SUPPORTED_VA_SIZE: usize = 14168usize;
pub const REG_FEAT_HCX_IMPLEMENTED: usize = 14184usize;
pub const REG_U__CNTBASE_FREQUENCY: usize = 14192usize;
pub const REG_GITS_CBASER: usize = 14200usize;
pub const REG_U__MPAM_FRAC: usize = 14208usize;
pub const REG_FEAT_ADERR_IMPLEMENTED: usize = 14216usize;
pub const REG_U_PMCNTEN: usize = 14224usize;
pub const REG_TPIDR_EL1: usize = 14232usize;
pub const REG_U_TPIDRURW_NS: usize = 14240usize;
pub const REG_GPT_REALM: usize = 896usize;
pub const REG_FEAT_AMUV1P1_IMPLEMENTED: usize = 14248usize;
pub const REG_FEAT_CSV2_1P1_IMPLEMENTED: usize = 14256usize;
pub const REG_FEAT_ANERR_IMPLEMENTED: usize = 14264usize;
pub const REG_APDBKEYHI_EL1: usize = 14272usize;
pub const REG_NUM_GIC_PREEMPTION_BITS: usize = 14280usize;
pub const REG_U__SET_MOPS_OPTION_A_SUPPORTED: usize = 14296usize;
pub const REG_FEAT_LS64_V_IMPLEMENTED: usize = 14304usize;
pub const REG_HEAP_LIMIT: usize = 14312usize;
pub const REG_U_PMCEID0: usize = 14320usize;
pub const REG_SP_REL_ACCESS_PC: usize = 14328usize;
pub const REG_ID_ISAR1_EL1: usize = 14336usize;
pub const REG_U_ERRIDR: usize = 14344usize;
pub const REG_U__HAS_SME_PRIORITY_CONTROL: usize = 14352usize;
pub const REG_GICR_CLRLPIR: usize = 14360usize;
pub const REG_ERXGSR_EL1: usize = 14368usize;
pub const REG_FEAT_TRC_SR_IMPLEMENTED: usize = 14376usize;
pub const REG_FEAT_RNG_IMPLEMENTED: usize = 14384usize;
pub const REG_GITS_MPIDR: usize = 14392usize;
pub const REG_FEAT_PMUV3P5_IMPLEMENTED: usize = 14400usize;
pub const REG_FEAT_LVA3_IMPLEMENTED: usize = 14408usize;
pub const REG_FEAT_MTE_STORE_ONLY_IMPLEMENTED: usize = 14416usize;
pub const REG_FEAT_PCSRV8P9_IMPLEMENTED: usize = 14424usize;
pub const REG_FEAT_SPE_FDS_IMPLEMENTED: usize = 14432usize;
pub const REG_PMU_EVENT_SAMPLE_FEED_OP: usize = 256usize;
pub const REG_U_AMAIR1_NS: usize = 14440usize;
pub const REG_ICC_IGRPEN0_EL1: usize = 14448usize;
pub const REG_U_PMINTEN: usize = 14456usize;
pub const REG_GICR_CTLR: usize = 14464usize;
pub const REG_DBGDEVID: usize = 14472usize;
pub const REG_THROW: usize = 14480usize;
pub const REG_U_TTBR0_EL1: usize = 14488usize;
pub const REG_U__CNTBASEN: usize = 14504usize;
pub const REG_U_FFR: usize = 14512usize;
pub const REG_CNTPOFF_EL2: usize = 14544usize;
pub const REG_APDAKEYLO_EL1: usize = 14552usize;
pub const REG_ID_AA64ISAR1_EL1: usize = 14560usize;
pub const REG_AFSR1_EL3: usize = 14568usize;
pub const REG_FEAT_SHA512_IMPLEMENTED: usize = 14576usize;
pub const REG_AMEVCNTR0: usize = 14584usize;
pub const REG_AMCGCR_EL0: usize = 14616usize;
pub const REG_MAX_ZERO_BLOCK_SIZE: usize = 1088usize;
pub const REG_FEAT_EL1_IMPLEMENTED: usize = 14624usize;
pub const REG_U_ID_ISAR3: usize = 14632usize;
pub const REG_U_PMSWINC: usize = 14640usize;
pub const REG_FEAT_IVIPT_IMPLEMENTED: usize = 14648usize;
pub const REG_SEE: usize = 14656usize;
pub const REG_EDESR: usize = 14672usize;
pub const REG_U_IFAR_S: usize = 14680usize;
pub const REG_U_ID_PFR0: usize = 14688usize;
pub const REG_PMSIDR_EL1: usize = 14696usize;
pub const REG_FEAT_SB_IMPLEMENTED: usize = 14704usize;
pub const REG_U_CNTHP_CVAL: usize = 14712usize;
pub const REG_FEAT_PCSRV8_IMPLEMENTED: usize = 14720usize;
pub const REG_R29: usize = 14728usize;
pub const REG_TCR2_EL1: usize = 14736usize;
pub const REG_FEAT_LSE_IMPLEMENTED: usize = 14744usize;
pub const REG_APIAKEYHI_EL1: usize = 14752usize;
pub const REG_ZCR_EL3_LEN_VALUE: usize = 14760usize;
pub const REG_FEAT_SVE_BITPERM_IMPLEMENTED: usize = 14776usize;
pub const REG_HTTBR: usize = 14784usize;
pub const REG_ICH_AP0R_EL2: usize = 14792usize;
pub const REG_ID_AA64ISAR2_EL1: usize = 14824usize;
pub const REG_CNTHVS_CTL_EL2: usize = 14832usize;
pub const REG_SPESAMPLECONTEXTEL2VALID: usize = 14840usize;
pub const REG_DOMAIN_NOACCESS: usize = 784usize;
pub const REG_ICC_ASGI1R_EL1: usize = 14848usize;
pub const REG_ID_AA64MMFR0_EL1: usize = 14856usize;
pub const REG_HACR_EL2: usize = 14864usize;
pub const REG_FEAT_CONSTPACFIELD_IMPLEMENTED: usize = 14872usize;
pub const REG_PMU_EVENT_SAMPLE_POP: usize = 152usize;
pub const REG_FEAT_GICV3_IMPLEMENTED: usize = 14880usize;
pub const REG_FEAT_CHK_IMPLEMENTED: usize = 14888usize;
pub const REG_FEAT_ETEV1P1_IMPLEMENTED: usize = 14896usize;
pub const REG_U__BRANCHTAKEN: usize = 14904usize;
pub const REG_TFSRE0_EL1: usize = 14912usize;
pub const REG_MDRAR_EL1: usize = 14920usize;
pub const REG_PMCEID0_EL0: usize = 14928usize;
pub const REG_GITS_CREADR: usize = 14936usize;
pub const REG_PMIIDR: usize = 14944usize;
pub const REG_U_ID_ISAR4: usize = 14952usize;
pub const REG_U__CNTCTLBASE: usize = 14960usize;
pub const REG_GICM_CLRSPI_NSR: usize = 14984usize;
pub const REG_U_ERXMISC4: usize = 14968usize;
pub const REG_RVBAR: usize = 14992usize;
pub const REG_CFG_ID_AA64PFR0_EL1_EL0: usize = 1224usize;
pub const REG_GITS_CTLR: usize = 14976usize;
pub const REG_U_EDSCR: usize = 15000usize;
pub const REG_SDCR: usize = 15008usize;
pub const REG_IFSR32_EL2: usize = 15016usize;
pub const REG_ICV_PMR_EL1: usize = 15024usize;
pub const REG_CFG_MPAM_FRAC_NONE: usize = 1288usize;
pub const REG_ZCR_EL2: usize = 15032usize;
pub const REG_U_AMEVCNTR1: usize = 15040usize;
pub const REG_M32_ABORT: usize = 392usize;
pub const REG_FEAT_FRINTTS_IMPLEMENTED: usize = 15168usize;
pub const REG_U_SPSR_SVC: usize = 15176usize;
pub const REG_U__EMPAM_TIDR_IMPLEMENTED: usize = 15184usize;
pub const REG_DBGDEVID1: usize = 15192usize;
pub const REG_FEAT_TRC_EXT_IMPLEMENTED: usize = 15200usize;
pub const REG_U_ERXMISC0: usize = 15208usize;
pub const REG_FEAT_F32MM_IMPLEMENTED: usize = 15216usize;
pub const REG_V8AP3_IMPLEMENTED: usize = 15224usize;
pub const REG_ERRIDR_EL1: usize = 15232usize;
pub const REG_GICC_AEOIR: usize = 15240usize;
pub const REG_GICC_DIR: usize = 15248usize;
pub const REG_FEAT_ECV_IMPLEMENTED: usize = 15256usize;
pub const REG_U_CPACR: usize = 15264usize;
pub const REG_FEAT_SPEV1P2_IMPLEMENTED: usize = 15272usize;
pub const REG_U__SYNCABORTONPREFETCH: usize = 15280usize;
pub const REG_VTCR_EL2: usize = 15288usize;
pub const REG_POR_EL2: usize = 15296usize;
pub const REG_PMCCNTSVR_EL1: usize = 15304usize;
pub const REG_PMXEVCNTR_EL0: usize = 15312usize;
pub const REG_SP_MON: usize = 15320usize;
pub const REG_TTBCR_S: usize = 15328usize;
pub const REG_ICH_VMCR_EL2: usize = 15336usize;
pub const REG_U_FPSCR: usize = 15344usize;
pub const REG_ICV_RPR_EL1: usize = 15352usize;
pub const REG_AFSR1_EL2: usize = 15360usize;
pub const REG_ACTLR_S: usize = 15368usize;
pub const REG_FEAT_LPA_IMPLEMENTED: usize = 15376usize;
pub const REG_DEFAULTPARTID: usize = 768usize;
pub const REG_EDPFR: usize = 15384usize;
pub const REG_FEAT_ETMV4P4_IMPLEMENTED: usize = 15392usize;
pub const REG_SPESAMPLEPREVIOUSBRANCHADDRESS: usize = 15400usize;
pub const REG_PMINTENCLR_EL1: usize = 15408usize;
pub const REG_EDLSR: usize = 15416usize;
pub const REG_MPAMVPM2_EL2: usize = 15424usize;
pub const REG_AMPIDR1: usize = 15432usize;
pub const REG_RTPIDEN: usize = 15440usize;
pub const REG_FEAT_DOTPROD_IMPLEMENTED: usize = 15448usize;
pub const REG_GICR_PENDBASER: usize = 15456usize;
pub const REG_U_ID_ISAR2: usize = 15464usize;
pub const REG_GICC_IAR: usize = 15472usize;
pub const REG_U_MAIR1_S: usize = 15480usize;
pub const REG_U_ICC_BPR0: usize = 15488usize;
pub const REG_DEBUGHALT_HALTINSTRUCTION: usize = 1152usize;
pub const REG_SPSR_FIQ: usize = 15496usize;
pub const REG_AMCR_EL0: usize = 15504usize;
pub const REG_FEAT_DPB_IMPLEMENTED: usize = 15512usize;
pub const REG_U_SCTLR_NS: usize = 15520usize;
pub const REG_ICC_IAR0_EL1: usize = 15528usize;
pub const REG_FPSID: usize = 15536usize;
pub const REG_FEAT_CSV3_IMPLEMENTED: usize = 15544usize;
pub const REG_FEAT_S1POE_IMPLEMENTED: usize = 15552usize;
pub const REG_FEAT_LSMAOC_IMPLEMENTED: usize = 15560usize;
pub const REG_GCSCRE0_EL1: usize = 15568usize;
pub const REG_LST_64BV: usize = 1200usize;
pub const REG_AMIIDR: usize = 15576usize;
pub const REG_U__BLOCK_BBM_IMPLEMENTED: usize = 15584usize;
pub const REG_PMU_EVENT_SAMPLE_FEED_ST: usize = 248usize;
pub const REG_U_ERXCTLR: usize = 15600usize;
pub const REG_GICC_CTLR: usize = 15608usize;
pub const REG_HAVE_EXCEPTION: usize = 15616usize;
pub const REG_CPTR_EL3_EZ_VALUE: usize = 15624usize;
pub const REG_R2: usize = 15640usize;
pub const REG_ACTLR_EL3: usize = 15648usize;
pub const REG_FEAT_VPIPT_IMPLEMENTED: usize = 15656usize;
pub const REG_U_ICC_HPPIR0: usize = 15664usize;
pub const REG_MEMATTR_WT: usize = 472usize;
pub const REG_PMBIDR_EL1: usize = 15672usize;
pub const REG_CTIITCTRL: usize = 15680usize;
pub const REG_VMECID_A_EL2: usize = 15688usize;
pub const REG_U_HAMAIR1: usize = 15696usize;
pub const REG_SPSR_EL2: usize = 15704usize;
pub const REG_COLD_RESET: usize = 1392usize;
pub const REG_CURRENT_EXCEPTION: usize = 15712usize;
pub const REG_LORSA_EL1: usize = 15720usize;
pub const REG_TCR2_EL2: usize = 15728usize;
pub const REG_APDBKEYLO_EL1: usize = 15736usize;
pub const REG_RVBAR_EL3: usize = 15744usize;
pub const REG_PMPIDR0: usize = 15752usize;
pub const REG_U_ICH_LR: usize = 15760usize;
pub const REG_U__CLOCK_DIVIDER: usize = 15824usize;
pub const REG_PMCCFILTR_EL0: usize = 15840usize;
pub const REG_OSDTRRX_EL1: usize = 15848usize;
pub const REG_DBGDSAR: usize = 15856usize;
pub const REG_U_VPIDR: usize = 15864usize;
pub const REG_CNTID: usize = 15872usize;
pub const REG_FEAT_SVE2_IMPLEMENTED: usize = 15880usize;
pub const REG_FEAT_SME2_IMPLEMENTED: usize = 15888usize;
pub const REG_HEAP_BASE: usize = 15896usize;
pub const REG_FEAT_ETMV4P2_IMPLEMENTED: usize = 15904usize;
pub const REG_U__MECID_WIDTH: usize = 15912usize;
pub const REG_BRBTGT_EL1: usize = 15920usize;
pub const REG_GICV_HPPIR: usize = 16176usize;
pub const REG_FEAT_PMUV3_IMPLEMENTED: usize = 16184usize;
pub const REG_FEAT_SSBS_IMPLEMENTED: usize = 16192usize;
pub const REG_U_HDFAR: usize = 16200usize;
pub const REG_U_ICV_IAR1: usize = 16208usize;
pub const REG_ISR_EL1: usize = 16216usize;
pub const REG_FEAT_NTLBPA_IMPLEMENTED: usize = 16224usize;
pub const REG_FAR_EL1: usize = 16232usize;
pub const REG_RVBAR_EL1: usize = 16240usize;
pub const REG_U_CNTKCTL: usize = 16248usize;
pub const REG_TPIDR_EL3: usize = 16256usize;
pub const REG_ID_PFR0_EL1: usize = 16264usize;
pub const REG_FEAT_RPRES_IMPLEMENTED: usize = 16272usize;
pub const REG_U_PRRR_NS: usize = 16280usize;
pub const REG_DEBUGHALT_EXCEPTIONCATCH: usize = 1168usize;
pub const REG_FEAT_TCR2_IMPLEMENTED: usize = 16288usize;
pub const REG_U_ICC_IAR0: usize = 16296usize;
pub const REG_SPECOUNTERPOSTRANSLATIONLATENCY: usize = 1072usize;
pub const REG_FEAT_SHA1_IMPLEMENTED: usize = 16304usize;
pub const REG_FEAT_AA32HPD_IMPLEMENTED: usize = 16312usize;
pub const REG_PMU_EVENT_L3D_CACHE_HITM_RD: usize = 304usize;
pub const REG_FEAT_LSE2_IMPLEMENTED: usize = 16320usize;
pub const REG_CFG_RMR_AA64: usize = 16328usize;
pub const REG_MEMHINT_NO: usize = 488usize;
pub const REG_U_PMCNTENSET: usize = 16336usize;
pub const REG_ICC_SRE_EL2: usize = 16344usize;
pub const REG_HFGWTR2_EL2: usize = 16352usize;
pub const REG_PMPIDR3: usize = 16360usize;
pub const REG_U_DBGBVR: usize = 16368usize;
pub const REG_SCTLR_S: usize = 16432usize;
pub const REG_FEAT_FHM_IMPLEMENTED: usize = 16440usize;
pub const REG_EDWAR: usize = 16448usize;
pub const REG_R1: usize = 16456usize;
pub const REG_U_CONTEXTIDR_NS: usize = 16464usize;
pub const REG_DEBUGHALT_OSUNLOCKCATCH: usize = 1128usize;
pub const REG_AFSR0_EL1: usize = 16472usize;
pub const REG_RCWSMASK_EL1: usize = 16480usize;
pub const REG_SCXTNUM_EL2: usize = 16496usize;
pub const REG_ERXPFGCDN_EL1: usize = 16504usize;
pub const REG_BRBFCR_EL1: usize = 16512usize;
pub const REG_U__IMPDEF_TG0: usize = 16520usize;
pub const REG_SPMSELR_EL0: usize = 16528usize;
pub const REG_U_PMUSERENR: usize = 16536usize;
pub const REG_FCSEIDR: usize = 16544usize;
pub const REG_GICD_SETSPI_SR: usize = 16552usize;
pub const REG_PMU_EVENT_L1D_CACHE_LMISS_RD: usize = 136usize;
pub const REG_CFG_MPAM_FRAC_V0P1: usize = 1296usize;
pub const REG_DACR32_EL2: usize = 16560usize;
pub const REG_HFGRTR_EL2: usize = 16568usize;
pub const REG_TPIDRURO_S: usize = 16576usize;
pub const REG_FEAT_DEBUGV8P9_IMPLEMENTED: usize = 16584usize;
pub const REG_FEAT_MEC_IMPLEMENTED: usize = 16592usize;
pub const REG_MPAM0_EL1: usize = 16600usize;
pub const REG_FEAT_TLBIOS_IMPLEMENTED: usize = 16608usize;
pub const REG_SPEADDRPOSDATAVIRTUAL: usize = 1032usize;
pub const REG_CNTHP_CVAL_EL2: usize = 16616usize;
pub const REG_GPCCR_EL3: usize = 16624usize;
pub const REG_AFSR0_EL3: usize = 16632usize;
pub const REG_AMEVCNTVOFF1_EL2: usize = 16640usize;
pub const REG_U_AMUSERENR: usize = 16768usize;
pub const REG_U_ICC_EOIR1: usize = 16776usize;
pub const REG_EDCIDR3: usize = 16784usize;
pub const REG_DBGDIDR: usize = 16792usize;
pub const REG_FEAT_LVA_IMPLEMENTED: usize = 16800usize;
pub const REG_MDCCSR_EL0: usize = 16808usize;
pub const REG_CPTR_EL3: usize = 16816usize;
pub const REG_CNTP_CVAL_S: usize = 16824usize;
pub const REG_GPTRANGE_32MB: usize = 944usize;
pub const REG_AIDR_EL1: usize = 16832usize;
pub const REG_U_AMCNTENSET0: usize = 16840usize;
pub const REG_U_DACR_NS: usize = 16848usize;
pub const REG_EDLAR: usize = 16856usize;
pub const REG_FEAT_AA64EL1_IMPLEMENTED: usize = 16864usize;
pub const REG_U_ICH_AP0R: usize = 16872usize;
pub const REG_ERRNFR: usize = 16888usize;
pub const REG_R15: usize = 16920usize;
pub const REG_U_PMCCFILTR: usize = 16928usize;
pub const REG_PMCFGR: usize = 16936usize;
pub const REG_PSTATE: usize = 16944usize;
pub const REG_PMU_EVENT_L2D_LFB_HIT_RD: usize = 328usize;
pub const REG_EDDEVARCH: usize = 16952usize;
pub const REG_U_ID_ISAR1: usize = 16960usize;
pub const REG_TCMTR: usize = 16968usize;
pub const REG_EDHSR: usize = 16976usize;
pub const REG_U__CNTREADBASE: usize = 16984usize;
pub const REG_ICC_IGRPEN1_EL1_NS: usize = 16992usize;
pub const REG_GICH_VTR: usize = 17000usize;
pub const REG_GICD_SGIR: usize = 17008usize;
pub const REG_FEAT_ADVSIMD_IMPLEMENTED: usize = 17016usize;
pub const REG_SCTLR_EL3: usize = 17024usize;
pub const REG_U_ERXMISC3: usize = 17032usize;
pub const REG_U_ELR_HYP: usize = 17040usize;
pub const REG_U_PMSELR: usize = 17048usize;
pub const REG_R19: usize = 17056usize;
pub const REG_CNTHVS_TVAL_EL2: usize = 17064usize;
pub const REG_AIFSR_S: usize = 17072usize;
pub const REG_U_PMCEID2: usize = 17080usize;
pub const REG_SPESAMPLECLASS: usize = 17088usize;
pub const REG_NIDEN: usize = 17096usize;
pub const REG_VBAR_EL1: usize = 17104usize;
pub const REG_FEAT_ECBHB_IMPLEMENTED: usize = 17112usize;
pub const REG_ICC_HPPIR1_EL1: usize = 17120usize;
pub const REG_ICH_ELRSR_EL2: usize = 17128usize;
pub const REG_FEAT_MOPS_IMPLEMENTED: usize = 17136usize;
pub const REG_CLIDR_EL1: usize = 17144usize;
pub const REG_CNTV_CTL_EL0: usize = 17152usize;
pub const REG_U_MAIR1_NS: usize = 17160usize;
pub const REG_FEAT_SPE_IMPLEMENTED: usize = 17168usize;
pub const REG_ELR_EL2: usize = 17176usize;
pub const REG_DBGDTRTX_EL0: usize = 17184usize;
pub const REG_TPIDRRO_EL0: usize = 17192usize;
pub const REG_ICC_EOIR1_EL1: usize = 17200usize;
pub const REG_PMCIDR0: usize = 17208usize;
pub const REG_FEAT_SME_I16I64_IMPLEMENTED: usize = 17216usize;
pub const REG_MEMATTR_WB: usize = 480usize;
pub const REG_FEAT_FP_IMPLEMENTED: usize = 17224usize;
pub const REG_FEAT_MTE_ASYM_FAULT_IMPLEMENTED: usize = 17232usize;
pub const REG_FEAT_SPE_CRR_IMPLEMENTED: usize = 17240usize;
pub const REG_FEAT_TRBE_IMPLEMENTED: usize = 17248usize;
pub const REG_SMCR_EL1: usize = 17256usize;
pub const REG_MPAMVPMV_EL2: usize = 17264usize;
pub const REG_U_VDISR: usize = 17272usize;
pub const REG_ICC_BPR0_EL1: usize = 17280usize;
pub const REG_ID_ISAR0_EL1: usize = 17288usize;
pub const REG_ICC_BPR1_EL1_NS: usize = 17296usize;
pub const REG_ICH_VTR_EL2: usize = 17304usize;
pub const REG_HDFGWTR_EL2: usize = 17312usize;
pub const REG_FEAT_MTE_PERM_IMPLEMENTED: usize = 17320usize;
pub const REG_MPIDR_EL1: usize = 17328usize;
pub const REG_DEBUGHALT_RESETCATCH: usize = 1136usize;
pub const REG_PMPCSR: usize = 17336usize;
pub const REG_U_ICC_SGI0R: usize = 17344usize;
pub const REG_AMEVCNTVOFF0_EL2: usize = 17352usize;
pub const REG_ERXFR_EL1: usize = 17480usize;
pub const REG_GICR_VPENDBASER: usize = 17488usize;
pub const REG_U_ICC_BPR1_NS: usize = 17496usize;
pub const REG_SPESAMPLEDATASOURCE: usize = 17504usize;
pub const REG_GICM_SETSPI_NSR: usize = 17512usize;
pub const REG_NUM_GIC_LIST_REGS: usize = 17520usize;
pub const REG_U_PMINTENCLR: usize = 17536usize;
pub const REG_GICM_TYPER: usize = 17544usize;
pub const REG_FEAT_DEBUGV8P8_IMPLEMENTED: usize = 17552usize;
pub const REG_MPAMHCR_EL2: usize = 17560usize;
pub const REG_PMU_EVENT_SAMPLE_FEED: usize = 160usize;
pub const REG_SPESAMPLETIMESTAMPVALID: usize = 17568usize;
pub const REG_FEAT_CMOW_IMPLEMENTED: usize = 17576usize;
pub const REG_FEAT_ETEV1P3_IMPLEMENTED: usize = 17584usize;
pub const REG_V8AP1_IMPLEMENTED: usize = 17592usize;
pub const REG_U_DBGDSCREXT: usize = 17600usize;
pub const REG_MAIR_EL3: usize = 17608usize;
pub const REG_FINAL_LEVEL: usize = 800usize;
pub const REG_HDFGWTR2_EL2: usize = 17616usize;
pub const REG_FEAT_ABLE_IMPLEMENTED: usize = 17624usize;
pub const REG_GICV_IAR: usize = 17632usize;
pub const REG_U_PMOVS: usize = 17640usize;
pub const REG_CTIPIDR2: usize = 17648usize;
pub const REG_V8AP8_IMPLEMENTED: usize = 17656usize;
pub const REG_EL1: usize = 440usize;
pub const REG_FEAT_RME_IMPLEMENTED: usize = 17664usize;
pub const REG_U_DBGDRAR: usize = 17672usize;
pub const REG_GITS_PARTIDR: usize = 17680usize;
pub const REG_U_P: usize = 17688usize;
pub const REG_PMU_EVENT_CHAIN: usize = 80usize;
pub const REG_GCSPR_EL3: usize = 18200usize;
pub const REG_FEAT_ASMV8P2_IMPLEMENTED: usize = 18208usize;
pub const REG_U__VLPI_BASE: usize = 18216usize;
pub const REG_BRBCR_EL2: usize = 18224usize;
pub const REG_U__UNPRED_TSIZE_ABORTS: usize = 18232usize;
pub const REG_CNTCR: usize = 18240usize;
pub const REG_CNTHP_TVAL_EL2: usize = 18248usize;
pub const REG_U_ICV_HPPIR1: usize = 18256usize;
pub const REG_ELR_EL1: usize = 18264usize;
pub const REG_R4: usize = 18272usize;
pub const REG_U__ICACHE_CCSIDR_RESET: usize = 18280usize;
pub const REG_U_HSCTLR: usize = 18336usize;
pub const REG_ICC_CTLR_EL1_S: usize = 18344usize;
pub const REG_U_TPIDRURO_NS: usize = 18352usize;
pub const REG_U_ERXADDR2: usize = 18360usize;
pub const REG_MDSELR_EL1: usize = 18368usize;
pub const REG_DEFAULT_MECID: usize = 832usize;
pub const REG_SPSR_UND: usize = 18376usize;
pub const REG_TTBR1_EL2: usize = 18384usize;
pub const REG_U_VTTBR_EL2: usize = 18400usize;
pub const REG_SPESAMPLECOUNTER: usize = 18416usize;
pub const REG_GICH_VMCR: usize = 18928usize;
pub const REG_CTILAR: usize = 18936usize;
pub const REG_PMDEVTYPE: usize = 18944usize;
pub const REG_GICC_EOIR: usize = 18952usize;
pub const REG_GPTRANGE_16KB: usize = 920usize;
pub const REG_ID_ISAR4_EL1: usize = 18960usize;
pub const REG_FEAT_CSV2_2_IMPLEMENTED: usize = 18968usize;
pub const REG_FEAT_SYSREG128_IMPLEMENTED: usize = 18976usize;
pub const REG_R9: usize = 18984usize;
pub const REG_SPESAMPLEOPTYPE: usize = 18992usize;
pub const REG_CTIPIDR0: usize = 19000usize;
pub const REG_CTR_EL0: usize = 19008usize;
pub const REG_SPMACCESSR_EL2: usize = 19016usize;
pub const REG_FEAT_CSV2_3_IMPLEMENTED: usize = 19024usize;
pub const REG_FEAT_SPMU_IMPLEMENTED: usize = 19032usize;
pub const REG_U__TLB_ENABLED: usize = 19040usize;
pub const REG_U_VBAR_NS: usize = 19048usize;
pub const REG_MAIR2_EL3: usize = 19056usize;
pub const REG_R14: usize = 19064usize;
pub const REG_TTBR1_S: usize = 19072usize;
pub const REG_V8AP5_IMPLEMENTED: usize = 19080usize;
pub const REG_PMSELR_EL0: usize = 19088usize;
pub const REG_DEBUGHALT_SOFTWAREACCESS: usize = 1160usize;
pub const REG_HDFGRTR_EL2: usize = 19096usize;
pub const REG_AMEVTYPER1_EL0: usize = 19104usize;
pub const REG_MEMATTR_NC: usize = 464usize;
pub const REG_CNTHV_CTL_EL2: usize = 19232usize;
pub const REG_ICC_RPR_EL1: usize = 19240usize;
pub const REG_AMDEVARCH: usize = 19248usize;
pub const REG_GCSCR_EL2: usize = 19256usize;
pub const REG_EDPCSR: usize = 19264usize;
pub const REG_U_ERXFR2: usize = 19272usize;
pub const REG_VDISR_EL2: usize = 19280usize;
pub const REG_FEAT_MTE_ASYNC_IMPLEMENTED: usize = 19288usize;
pub const REG_U_CNTP_CVAL_NS: usize = 19296usize;
pub const REG_DBGDEVID2: usize = 19304usize;
pub const REG_NUM_WATCHPOINTS: usize = 19312usize;
pub const REG_CNTSR: usize = 19328usize;
pub const REG_AMCIDR1: usize = 19336usize;
pub const REG_DBGWVR_EL1: usize = 19344usize;
pub const REG_ICH_AP1R_EL2: usize = 19856usize;
pub const REG_FEAT_FCMA_IMPLEMENTED: usize = 19888usize;
pub const REG_FEAT_GICV3P1_IMPLEMENTED: usize = 19896usize;
pub const REG_DEBUGHALT_STEP_NORMAL: usize = 1112usize;
pub const REG_U__SYNCABORTONTTWCACHE: usize = 19904usize;
pub const REG_FEAT_S1PIE_IMPLEMENTED: usize = 19912usize;
pub const REG_OSECCR_EL1: usize = 19920usize;
pub const REG_GPT_NOACCESS: usize = 840usize;
pub const REG_PMU_EVENT_SAMPLE_FEED_BR: usize = 232usize;
pub const REG_FEAT_ETMV4P5_IMPLEMENTED: usize = 19928usize;
pub const REG_PRRR_S: usize = 19936usize;
pub const REG_ICC_MSRE: usize = 19944usize;
pub const REG_U_ERXMISC5: usize = 19952usize;
pub const REG_PFAR_EL2: usize = 19960usize;
pub const REG_CTICIDR1: usize = 19968usize;
pub const REG_TTBR1_NS: usize = 19976usize;
pub const REG_SPSR_ABT: usize = 19984usize;
pub const REG_U_ICV_IAR0: usize = 19992usize;
pub const REG_MAIR2_EL1: usize = 20000usize;
pub const REG_FEAT_MTE_NO_ADDRESS_TAGS_IMPLEMENTED: usize = 20008usize;
pub const REG_R21: usize = 20016usize;
pub const REG_MDCCINT_EL1: usize = 20024usize;
pub const REG_AMCIDR2: usize = 20032usize;
pub const REG_U_ICH_HCR: usize = 20040usize;
pub const REG_PMU_EVENT_BRB_FILTRATE: usize = 216usize;
pub const REG_RGSR_EL1: usize = 20048usize;
pub const REG_U_MIDR: usize = 20056usize;
pub const REG_ID_AA64DFR0_EL1: usize = 20064usize;
pub const REG_U_ID_PFR1: usize = 20072usize;
pub const REG_ELR_EL3: usize = 20080usize;
pub const REG_U__SYNCABORTONSOREAD: usize = 20088usize;
pub const REG_INSTRUCTION_COUNTER_ID: usize = 8usize;
pub const REG_ID_AA64AFR1_EL1: usize = 20096usize;
pub const REG_FEAT_AA64EL0_IMPLEMENTED: usize = 20104usize;
pub const REG_FEAT_EBEP_IMPLEMENTED: usize = 20120usize;
pub const REG_GPTRANGE_64GB: usize = 976usize;
pub const REG_SPESAMPLECONTEXTEL1VALID: usize = 20112usize;
pub const REG_EDECR: usize = 20128usize;
pub const REG_GICR_VPROPBASER: usize = 20136usize;
pub const REG_AMAIR1_S: usize = 20160usize;
pub const REG_U_CSSELR_NS: usize = 20144usize;
pub const REG_U_MVFR0: usize = 20152usize;
pub const REG_PMU_EVENT_SAMPLE_FEED_LAT: usize = 272usize;
pub const REG_ID_MMFR5_EL1: usize = 20168usize;
pub const REG_PMCIDR3: usize = 20176usize;
pub const REG_U_DBGCLAIMCLR: usize = 20184usize;
pub const REG_U_ADFSR_NS: usize = 20192usize;
pub const REG_V8AP6_IMPLEMENTED: usize = 20200usize;
pub const REG_PMU_EVENT_L3D_LFB_HIT_RD: usize = 336usize;
pub const REG_U_HPFAR: usize = 20208usize;
pub const REG_EDPIDR0: usize = 20216usize;
pub const REG_U_DBGOSLSR: usize = 20224usize;
pub const REG_PIRE0_EL1: usize = 20232usize;
pub const REG_FEAT_LRCPC3_IMPLEMENTED: usize = 20240usize;
pub const REG_PMU_EVENT_SAMPLE_FEED_EVENT: usize = 264usize;
pub const REG_FEAT_SVE_AES_IMPLEMENTED: usize = 20248usize;
pub const REG_SPSR_EL3: usize = 20256usize;
pub const REG_GICM_CLRSPI_SR: usize = 20264usize;
pub const REG_U__SYNCABORTONWRITENORMCACHE: usize = 20272usize;
pub const REG_CP15SDISABLE2: usize = 20280usize;
pub const REG_FEAT_CRC32_IMPLEMENTED: usize = 20288usize;
pub const REG_FEAT_TTST_IMPLEMENTED: usize = 20296usize;
pub const REG_TTBCR2_S: usize = 20304usize;
pub const REG_U_ICC_IGRPEN0: usize = 20312usize;
pub const REG_R20: usize = 20320usize;
pub const REG_CNTPS_CTL_EL1: usize = 20328usize;
pub const REG_U_HTPIDR: usize = 20336usize;
pub const REG_GICR_PARTIDR: usize = 20344usize;
pub const REG_FEAT_PMUV3_EXT_IMPLEMENTED: usize = 20352usize;
pub const REG_R13: usize = 20360usize;
pub const REG_ID_DFR0_EL1: usize = 20368usize;
pub const REG_GICD_CLRSPI_SR: usize = 20376usize;
pub const REG_PMMIR_EL1: usize = 20384usize;
pub const REG_DBGEN: usize = 20392usize;
pub const REG_FEAT_IESB_IMPLEMENTED: usize = 20400usize;
pub const REG_FEAT_BTI_IMPLEMENTED: usize = 20408usize;
pub const REG_ICC_SGI1R_EL1: usize = 20416usize;
pub const REG_R30: usize = 20424usize;
pub const REG_PMBLIMITR_EL1: usize = 20432usize;
pub const REG_U_TPIDRPRW_NS: usize = 20440usize;
pub const REG_FEAT_GTG_IMPLEMENTED: usize = 20448usize;
pub const REG_U_CNTHV_CTL: usize = 20456usize;
pub const REG_GITS_MPAMIDR: usize = 20464usize;
pub const REG_U_DBGDTRRXINT: usize = 20472usize;
pub const REG_FEAT_AA32EL0_IMPLEMENTED: usize = 20480usize;
pub const REG_FEAT_DOUBLEFAULT_IMPLEMENTED: usize = 20488usize;
pub const REG_SPEADDRPOSBRANCHTARGET: usize = 1024usize;
pub const REG_U__ISLA_VECTOR_GPR: usize = 20496usize;
pub const REG_U__GICCPUINTERFACEBASE: usize = 20504usize;
pub const REG_RC: usize = 20512usize;
pub const REG_SPECOUNTERPOSTOTALLATENCY: usize = 1056usize;
pub const REG_VMECID_P_EL2: usize = 20552usize;
pub const REG_U__GIC_PENDING: usize = 20560usize;
pub const REG_ICC_DIR_EL1: usize = 20568usize;
pub const REG_GPTBR_EL3: usize = 20576usize;
pub const REG_U_ICC_EOIR0: usize = 20584usize;
pub const REG_U_MAIR0_S: usize = 20592usize;
pub const REG_U_ICC_SRE_S: usize = 20600usize;
pub const REG_FEAT_SPECRES2_IMPLEMENTED: usize = 20608usize;
pub const REG_U__MOPS_FORWARD_COPY: usize = 20616usize;
pub const REG_VMPIDR_EL2: usize = 20624usize;
pub const REG_U_ICV_BPR0: usize = 20632usize;
pub const REG_FEAT_PMUV3_SS_IMPLEMENTED: usize = 20640usize;
pub const REG_FPSR: usize = 20648usize;
pub const REG_U_HIFAR: usize = 20656usize;
pub const REG_U_ICV_EOIR1: usize = 20664usize;
pub const REG_U_HMAIR1: usize = 20672usize;
pub const REG_SPESAMPLEPREVIOUSBRANCHADDRESSVALID: usize = 20680usize;
pub const REG_BRANCHTYPETAKEN: usize = 20688usize;
pub const REG_ICV_AP1R_EL1: usize = 20696usize;
pub const REG_AMAIR2_EL3: usize = 20728usize;
pub const REG_SCTLR_EL2: usize = 20736usize;
pub const REG_VPIDR_EL2: usize = 20744usize;
pub const REG_CNTP_CVAL_EL0: usize = 20752usize;
pub const REG_U_ICV_AP0R: usize = 20760usize;
pub const REG_NUM_BRBE_RECORDS: usize = 20776usize;
pub const REG_GCSPR_EL0: usize = 20792usize;
pub const REG_U__HAS_SVE_EXTENDED_BF16: usize = 20800usize;
pub const REG_GPT_NONSECURE: usize = 880usize;
pub const REG_V8AP2_IMPLEMENTED: usize = 20816usize;
pub const REG_U_ACTLR2_NS: usize = 20824usize;
pub const REG_SPESAMPLECONTEXTEL2: usize = 20832usize;
pub const REG_AMEVTYPER0_EL0: usize = 20840usize;
pub const REG_SCR: usize = 20872usize;
pub const REG_MAIR2_EL2: usize = 20880usize;
pub const REG_GICC_STATUSR: usize = 20888usize;
pub const REG_ID_AA64MMFR4_EL1: usize = 20896usize;
pub const REG_BTYPECOMPATIBLE: usize = 20904usize;
pub const REG_FEAT_S2PIE_IMPLEMENTED: usize = 20912usize;
pub const REG_U_DBGOSDLR: usize = 20920usize;
pub const REG_DBGAUTHSTATUS_EL1: usize = 20928usize;
pub const REG_MPAMVPM7_EL2: usize = 20936usize;
pub const REG_ICH_HCR_EL2: usize = 20944usize;
pub const REG_GICV_DIR: usize = 20952usize;
pub const REG_LST_64B: usize = 1208usize;
pub const REG_FEAT_EBF16_IMPLEMENTED: usize = 20960usize;
pub const REG_PMCR_EL0: usize = 20968usize;
pub const REG_FPEXC32_EL2: usize = 20976usize;
pub const REG_ICV_HPPIR1_EL1: usize = 20984usize;
pub const REG_FEAT_FP16_IMPLEMENTED: usize = 20992usize;
pub const REG_U_TRFCR: usize = 21000usize;
pub const REG_U__EMPAM_SDEFLT_IMPLEMENTED: usize = 21008usize;
pub const REG_CNTHV_TVAL_EL2: usize = 21016usize;
pub const REG_PMSCR_EL1: usize = 21024usize;
pub const REG_ID_AFR0_EL1: usize = 21032usize;
pub const REG_DBGCLAIMCLR_EL1: usize = 21040usize;
pub const REG_APIAKEYLO_EL1: usize = 21048usize;
pub const REG_FEAT_UAO_IMPLEMENTED: usize = 21056usize;
pub const REG_SDER32_EL2: usize = 21064usize;
pub const REG_EDDFR1: usize = 21072usize;
pub const REG_FEAT_GICV3_NMI_IMPLEMENTED: usize = 21080usize;
pub const REG_SPSR_MON: usize = 21088usize;
pub const REG_U__MPAM_HAS_ALTSP: usize = 21096usize;
pub const REG_PMU_EVENT_L2D_CACHE_LMISS_RD: usize = 184usize;
pub const REG_ICV_AP0R_EL1: usize = 21104usize;
pub const REG_SCXTNUM_EL3: usize = 21136usize;
pub const REG_U__MPAM_VPMR_MAX: usize = 21144usize;
pub const REG_R18: usize = 21152usize;
pub const REG_U__SGI_BASE: usize = 21160usize;
pub const REG_R0: usize = 21168usize;
pub const REG_V9AP3_IMPLEMENTED: usize = 21176usize;
pub const REG_U__APPLY_EFFECTIVE_SHAREABILITY: usize = 21184usize;
pub const REG_RECORDS_SRC: usize = 21192usize;
pub const REG_U_DFAR_S: usize = 21704usize;
pub const REG_HAFGRTR_EL2: usize = 21712usize;
pub const REG_U__SYNCABORTONREADNORMCACHE: usize = 21720usize;
pub const REG_LOREA_EL1: usize = 21728usize;
pub const REG_AMAIR2_EL1: usize = 21736usize;
pub const REG_ERRSELR_EL1: usize = 21744usize;
pub const REG_ICC_MCTLR: usize = 21752usize;
pub const REG_U__MPAM_PARTID_MAX: usize = 21760usize;
pub const REG_FEAT_RDM_IMPLEMENTED: usize = 21768usize;
pub const REG_U__SYNCABORTONDEVICEWRITE: usize = 21776usize;
pub const REG_FEAT_ETMV4P6_IMPLEMENTED: usize = 21784usize;
pub const REG_R27: usize = 21792usize;
pub const REG_U_DORMANTCTLREG: usize = 21800usize;
pub const REG_U_ID_MMFR0: usize = 21808usize;
pub const REG_U_ERXADDR: usize = 21816usize;
pub const REG_EDITCTRL: usize = 21824usize;
pub const REG_U__IGNORE_RVBAR_IN_AARCH32: usize = 21832usize;
pub const REG_CNTP_CTL_S: usize = 21840usize;
pub const REG_FEAT_EL2_IMPLEMENTED: usize = 21848usize;
pub const REG_CTICONTROL: usize = 21856usize;
pub const REG_GCSPR_EL1: usize = 21864usize;
pub const REG_U__CURRENTCOND: usize = 21872usize;
pub const REG_BRBSRCINJ_EL1: usize = 21880usize;
pub const REG_CONTEXTIDR_S: usize = 21888usize;
pub const REG_GITS_STATUSR: usize = 21896usize;
pub const REG_U_HCR2: usize = 21904usize;
pub const REG_AMCIDR0: usize = 21912usize;
pub const REG_EVENTREGISTER: usize = 21920usize;
pub const REG_FEAT_ETS2_IMPLEMENTED: usize = 21928usize;
pub const REG_U_DBGPRCR: usize = 21936usize;
pub const REG_U_DLR: usize = 21944usize;
pub const REG_FEAT_SME_IMPLEMENTED: usize = 21952usize;
pub const REG_U__SPE_LFSR: usize = 21960usize;
pub const REG_MEMHINT_RWA: usize = 512usize;
pub const REG_CNTSCR: usize = 21968usize;
pub const REG_U_AMEVCNTR0_EL0: usize = 21976usize;
pub const REG_CNTKCTL_EL1: usize = 22008usize;
pub const REG_CFG_ID_AA64PFR0_EL1_EL2: usize = 1240usize;
pub const REG_U__ISB_IS_BRANCH: usize = 22016usize;
pub const REG_GICR_MPAMIDR: usize = 22024usize;
pub const REG_LORID_EL1: usize = 22032usize;
pub const REG_U_ICC_SRE_NS: usize = 22040usize;
pub const REG_U_ICV_IGRPEN0: usize = 22048usize;
pub const REG_FEAT_DPB2_IMPLEMENTED: usize = 22056usize;
pub const REG_ID_AA64MMFR3_EL1: usize = 22064usize;
pub const REG_BRBINF_EL1: usize = 22072usize;
pub const REG_GICH_ELRSR: usize = 22328usize;
pub const REG_GICH_MISR: usize = 22336usize;
pub const REG_TCR_EL1: usize = 22344usize;
pub const REG_CNTVOFF_EL2: usize = 22352usize;
pub const REG_VTTBR: usize = 22360usize;
pub const REG_UART_BASE: usize = 1352usize;
pub const REG_SPESAMPLEINFLIGHT: usize = 22368usize;
pub const REG_REVIDR_EL1: usize = 22376usize;
pub const REG_U_DBGBXVR: usize = 22384usize;
pub const REG_TPIDRURW_S: usize = 22448usize;
pub const REG_AMCIDR3: usize = 22456usize;
pub const REG_PMU_EVENT_L1D_CACHE: usize = 32usize;
pub const REG_FEAT_XS_IMPLEMENTED: usize = 22464usize;
pub const REG_MPAMVPM4_EL2: usize = 22472usize;
pub const REG_HCRX_EL2: usize = 22480usize;
pub const REG_OSDTRTX_EL1: usize = 22488usize;
pub const REG_MPAMVPM6_EL2: usize = 22496usize;
pub const REG_ID_AA64PFR1_EL1: usize = 22504usize;
pub const REG_ERXPFGF_EL1: usize = 22512usize;
pub const REG_FEAT_NV2_IMPLEMENTED: usize = 22520usize;
pub const REG_MAX_VL: usize = 808usize;
pub const REG_FEAT_HAFDBS_IMPLEMENTED: usize = 22528usize;
pub const REG_FEAT_PAUTH_IMPLEMENTED: usize = 22536usize;
pub const REG_ICH_EISR_EL2: usize = 22544usize;
pub const REG_ERXMISC0_EL1: usize = 22552usize;
pub const REG_JOSCR: usize = 22560usize;
pub const REG_AMAIR2_EL2: usize = 22568usize;
pub const REG_PMAUTHSTATUS: usize = 22576usize;
pub const REG_PMCNTENCLR_EL0: usize = 22584usize;
pub const REG_U__LAST_CYCLE_COUNT: usize = 22592usize;
pub const REG_FEAT_F64MM_IMPLEMENTED: usize = 22608usize;
pub const REG_FEAT_PAUTH2_IMPLEMENTED: usize = 22616usize;
pub const REG_CNTHPS_CVAL_EL2: usize = 22624usize;
pub const REG_U__TRCCLAIM_TAGS: usize = 22632usize;
pub const REG_AFSR1_EL1: usize = 22640usize;
pub const REG_U_AMCNTENCLR1: usize = 22648usize;
pub const REG_GICD_SETSPI_NSR: usize = 22656usize;
pub const REG_MDCR_EL3: usize = 22664usize;
pub const REG_U_VMPIDR: usize = 22672usize;
pub const REG_GICV_AHPPIR: usize = 22680usize;
pub const REG_DEBUGHALT_BREAKPOINT: usize = 1096usize;
pub const REG_AMPIDR0: usize = 22688usize;
pub const REG_PMSEVFR_EL1: usize = 22696usize;
pub const REG_SPEMAXRECORDSIZE: usize = 1008usize;
pub const REG_V8AP7_IMPLEMENTED: usize = 22704usize;
pub const REG_U__INSTRUCTIONSTEP: usize = 22712usize;
pub const REG_FEAT_SVE2P1_IMPLEMENTED: usize = 22720usize;
pub const REG_NUM_BREAKPOINTS: usize = 22728usize;
pub const REG_AMCNTENCLR0_EL0: usize = 22744usize;
pub const REG_EDDFR: usize = 22752usize;
pub const REG_U__SPE_LFSR_INITIALIZED: usize = 22760usize;
pub const REG_VBAR_EL2: usize = 22768usize;
pub const REG_VSTTBR_EL2: usize = 22776usize;
pub const REG_EDVIDSR: usize = 22784usize;
pub const REG_PMZR_EL0: usize = 22792usize;
pub const REG_ADFSR_S: usize = 22800usize;
pub const REG_U_ID_PFR2: usize = 22808usize;
pub const REG_U_ICC_AP1R_S: usize = 22816usize;
pub const REG_PMU_EVENT_L1D_TLB: usize = 96usize;
pub const REG_U_ICC_SGI1R: usize = 22832usize;
pub const REG_U_CNTFRQ: usize = 22840usize;
pub const REG_CSSELR_EL1: usize = 22848usize;
pub const REG_DEBUGHALT_WATCHPOINT: usize = 1144usize;
pub const REG_MECID_P0_EL2: usize = 22856usize;
pub const REG_CNTFRQ_EL0: usize = 22864usize;
pub const REG_MAIR_EL1: usize = 22872usize;
pub const REG_R5: usize = 22880usize;
pub const REG_U_HRMR: usize = 22888usize;
pub const REG_MAX_PL: usize = 816usize;
pub const REG_U_HACTLR2: usize = 22896usize;
pub const REG_ESR_EL1: usize = 22904usize;
pub const REG_ICC_SRE_EL1_NS: usize = 22912usize;
pub const REG_U_PAR_EL1: usize = 22920usize;
pub const REG_R3: usize = 22936usize;
pub const REG_SHOULDADVANCESS: usize = 22944usize;
pub const REG_FEAT_SME_F64F64_IMPLEMENTED: usize = 22952usize;
pub const REG_BRBTS_EL1: usize = 22960usize;
pub const REG_U_ICV_AP1R: usize = 22968usize;
pub const REG_FEAT_MTE4_IMPLEMENTED: usize = 22984usize;
pub const REG_U_DBGDSCRINT: usize = 22992usize;
pub const REG_U_DSPSR2: usize = 23000usize;
pub const REG_GPTRANGE_2MB: usize = 936usize;
pub const REG_SPESAMPLECOUNTERVALID: usize = 23008usize;
pub const REG_U_DISR: usize = 23016usize;
pub const REG_R26: usize = 23024usize;
pub const REG_VBAR_EL3: usize = 23032usize;
pub const REG_MECID_A1_EL2: usize = 23040usize;
pub const REG_RMR_EL2: usize = 23048usize;
pub const REG_U_ID_DFR1: usize = 23056usize;
pub const REG_U_ICV_PMR: usize = 23064usize;
pub const REG_U_CNTV_CVAL: usize = 23072usize;
pub const REG_R10: usize = 23080usize;
pub const REG_FEAT_BF16_IMPLEMENTED: usize = 23088usize;
pub const REG_FEAT_THE_IMPLEMENTED: usize = 23096usize;
pub const REG_CFG_PMCR_IDCODE: usize = 1256usize;
pub const REG_TTBR0_EL3: usize = 23104usize;
pub const REG_ICC_IAR1_EL1: usize = 23112usize;
pub const REG_R16: usize = 23120usize;
pub const REG_DOMAIN_CLIENT: usize = 792usize;
pub const REG_U_PMOVSSET: usize = 23128usize;
pub const REG_U_DBGDTRTXEXT: usize = 23136usize;
pub const REG_CTICIDR3: usize = 23144usize;
pub const REG_FEAT_PMUV3_EXT64_IMPLEMENTED: usize = 23152usize;
pub const REG_FEAT_SEBEP_IMPLEMENTED: usize = 23160usize;
pub const REG_U_REVIDR: usize = 23168usize;
pub const REG_PMU_EVENT_L1D_CACHE_HITM_RD: usize = 288usize;
pub const REG_FEAT_I8MM_IMPLEMENTED: usize = 23176usize;
pub const REG_U__CNTEL0BASEN: usize = 23184usize;
pub const REG_FEAT_ETE_IMPLEMENTED: usize = 23192usize;
pub const REG_U__GICDISTBASE: usize = 23200usize;
pub const REG_CCSIDR_EL1: usize = 23208usize;
pub const REG_FEAT_EPAC_IMPLEMENTED: usize = 23216usize;
pub const REG_U_DBGWVR: usize = 23224usize;
pub const REG_PMU_EVENT_LL_CACHE: usize = 112usize;
pub const REG_U__FEAT_RPRES: usize = 23288usize;
pub const REG_ID_ISAR3_EL1: usize = 23296usize;
pub const REG_U__GMID_LOG2_BLOCK_SIZE: usize = 23304usize;
pub const REG_GICM_SETSPI_SR: usize = 23320usize;
pub const REG_GITS_SGIR: usize = 23328usize;
pub const REG_U__PMUBASE: usize = 23336usize;
pub const REG_U_VDFSR: usize = 23344usize;
pub const REG_PMU_EVENT_INST_RETIRED: usize = 40usize;
pub const REG_TPIDR_EL0: usize = 23352usize;
pub const REG_EDDEVID: usize = 23360usize;
pub const REG_GICV_EOIR: usize = 23368usize;
pub const REG_ICV_DIR_EL1: usize = 23376usize;
pub const REG_U_HTCR: usize = 23384usize;
pub const REG_U_PMEVTYPER: usize = 23392usize;
pub const REG_ERXPFGCTL_EL1: usize = 23520usize;
pub const REG_U_PMCEID1: usize = 23528usize;
pub const REG_U_AMCNTENCLR0: usize = 23536usize;
pub const REG_RCWMASK_EL1: usize = 23544usize;
pub const REG_CNTV_CVAL_EL0: usize = 23560usize;
pub const REG_U__CPY_MOPS_OPTION_A_SUPPORTED: usize = 23568usize;
pub const REG_BRBSRC_EL1: usize = 23576usize;
pub const REG_GITS_IIDR: usize = 23832usize;
pub const REG_R24: usize = 23840usize;
pub const REG_FEAT_CSV2_IMPLEMENTED: usize = 23848usize;
pub const REG_RNDR: usize = 23856usize;
pub const REG_U__SYNCABORTONSOWRITE: usize = 23864usize;
pub const REG_GICM_IIDR: usize = 23872usize;
pub const REG_U_ZA: usize = 23880usize;
pub const REG_GICD_TYPER: usize = 89416usize;
pub const REG_RMR_EL1: usize = 89424usize;
pub const REG_GICC_PMR: usize = 89432usize;
pub const REG_PMU_EVENT_CPU_CYCLES: usize = 64usize;
pub const REG_FEAT_MTE_IMPLEMENTED: usize = 89440usize;
pub const REG_FEAT_MPAMV0P1_IMPLEMENTED: usize = 89448usize;
pub const REG_U__CPYF_MOPS_OPTION_A_SUPPORTED: usize = 89456usize;
pub const REG_ICV_EOIR1_EL1: usize = 89464usize;
pub const REG_ICC_MGRPEN1: usize = 89472usize;
pub const REG_U_ERXCTLR2: usize = 89480usize;
pub const REG_PIR_EL2: usize = 89488usize;
pub const REG_FEAT_SPECRES_IMPLEMENTED: usize = 89496usize;
pub const REG_U_CNTHP_CTL: usize = 89504usize;
pub const REG_FEAT_TRBE_EXT_IMPLEMENTED: usize = 89512usize;
pub const REG_RVBAR_EL2: usize = 89520usize;
pub const REG_U_ID_MMFR2: usize = 89528usize;
pub const REG_ID_MMFR0_EL1: usize = 89536usize;
pub const REG_PMU_EVENT_L2D_CACHE_HITM_RD: usize = 296usize;
pub const REG_FEAT_XNX_IMPLEMENTED: usize = 89544usize;
pub const REG_PMU_EVENT_SVE_PRED_PARTIAL_SPEC: usize = 208usize;
pub const REG_AMAIR_EL1: usize = 89552usize;
pub const REG_PMUEVENTACCUMULATOR: usize = 89560usize;
pub const REG_SP_EL0: usize = 90056usize;
pub const REG_U_ICH_VMCR: usize = 90064usize;
pub const REG_U__MPAM_MAJOR: usize = 90072usize;
pub const REG_FEAT_E0PD_IMPLEMENTED: usize = 90080usize;
pub const REG_EDPIDR4: usize = 90088usize;
pub const REG_MECID_P1_EL2: usize = 90096usize;
pub const REG_U_DBGBCR: usize = 90104usize;
pub const REG_FEAT_GICV3_LEGACY_IMPLEMENTED: usize = 90168usize;
pub const REG_SMPRIMAP_EL2: usize = 90176usize;
pub const REG_U__SUPPORTED_PA_SIZE: usize = 90184usize;
pub const REG_SCTLR_EL1: usize = 90200usize;
pub const REG_U__SYNCABORTONDEVICEREAD: usize = 90208usize;
pub const REG_FEAT_DEBUGV8P1_IMPLEMENTED: usize = 90216usize;
pub const REG_GPT_TABLE: usize = 848usize;
pub const REG_FEAT_TME_IMPLEMENTED: usize = 90224usize;
pub const REG_DBGPRCR_EL1: usize = 90232usize;
pub const REG_ID_MMFR4_EL1: usize = 90240usize;
pub const REG_PMINTENSET_EL1: usize = 90248usize;
pub const REG_V8AP4_IMPLEMENTED: usize = 90256usize;
pub const REG_U_CNTHPS_CTL: usize = 90264usize;
pub const REG_CFG_MPAM_FRAC_V1P1: usize = 1304usize;
pub const REG_ICV_BPR0_EL1: usize = 90272usize;
pub const REG_CPTR_EL3_ESM_VALUE: usize = 90280usize;
pub const REG_FEAT_AFP_IMPLEMENTED: usize = 90296usize;
pub const REG_GITS_CWRITER: usize = 90304usize;
pub const REG_PMU_EVENT_SW_INCR: usize = 16usize;
pub const REG_DEBUGHALT_EDBGRQ: usize = 1104usize;
pub const REG_U_ICC_IGRPEN1_NS: usize = 90312usize;
pub const REG_U__MPAM_HAS_HCR: usize = 90320usize;
pub const REG_U__EMPAM_FORCE_NS_RAO: usize = 90328usize;
pub const REG_ID_ISAR6_EL1: usize = 90336usize;
pub const REG_SCXTNUM_EL0: usize = 90344usize;
pub const REG_MVFR0_EL1: usize = 90352usize;
pub const REG_GIC_PENDING_NONE: usize = 1384usize;
pub const REG_U_DFAR_NS: usize = 90360usize;
pub const REG_U_HACR: usize = 90368usize;
pub const REG_FEAT_PMUV3P8_IMPLEMENTED: usize = 90376usize;
pub const REG_U_DBGCLAIMSET: usize = 90384usize;
pub const REG_GICR_INMIR0: usize = 90392usize;
pub const REG_NUM_AMU_CG0_MONITORS: usize = 90400usize;
pub const REG_PMU_EVENT_L1D_LFB_HIT_RD: usize = 320usize;
pub const REG_CTIPIDR4: usize = 90416usize;
pub const REG_AMUSERENR_EL0: usize = 90424usize;
pub const REG_MPAM2_EL2: usize = 90432usize;
pub const REG_PMBPTR_EL1: usize = 90440usize;
pub const REG_U_ZT0: usize = 90448usize;
pub const REG_FEAT_SVE_SHA3_IMPLEMENTED: usize = 90512usize;
pub const REG_U_HSTR: usize = 90520usize;
pub const REG_ID_AA64MMFR2_EL1: usize = 90528usize;
pub const REG_ID_AA64ISAR0_EL1: usize = 90536usize;
pub const REG_U_DBGOSECCR: usize = 90544usize;
pub const REG_AMPIDR4: usize = 90552usize;
pub const REG_ICC_SGI0R_EL1: usize = 90560usize;
pub const REG_BRBCR_EL1: usize = 90568usize;
pub const REG_SPSR_EL1: usize = 90576usize;
pub const REG_U_PMCR: usize = 90584usize;
pub const REG_U_ICC_IGRPEN1_S: usize = 90592usize;
pub const REG_U_ICH_EISR: usize = 90600usize;
pub const REG_U__GIC_ACTIVE: usize = 90608usize;
pub const REG_ESR_EL2: usize = 90616usize;
pub const REG_FEAT_PAN2_IMPLEMENTED: usize = 90624usize;
pub const REG_SCR_EL3: usize = 90632usize;
pub const REG_PAR_S: usize = 90640usize;
pub const REG_FEAT_WFXT_IMPLEMENTED: usize = 90648usize;
pub const REG_RCW64_PROTECTED_BIT: usize = 1184usize;
pub const REG_ID_MMFR3_EL1: usize = 90656usize;
pub const REG_CSSELR_S: usize = 90664usize;
pub const REG_U_ICC_HSRE: usize = 90672usize;
pub const REG_CNTNSAR: usize = 90680usize;
pub const REG_FEAT_PMUV3_TH_IMPLEMENTED: usize = 90688usize;
pub const REG_FEAT_HBC_IMPLEMENTED: usize = 90696usize;
pub const REG_FEAT_SME_F16F16_IMPLEMENTED: usize = 90704usize;
pub const REG_M32_UNDEF: usize = 408usize;
pub const REG_PMU_EVENT_DTLB_WALK: usize = 128usize;
pub const REG_NUM_AMU_CG1_MONITORS: usize = 90712usize;
pub const REG_OSLAR_EL1: usize = 90728usize;
pub const REG_MECIDR_EL2: usize = 90736usize;
pub const REG_MVFR2_EL1: usize = 90744usize;
pub const REG_PMU_EVENT_INST_SPEC: usize = 72usize;
pub const REG_EL3: usize = 424usize;
pub const REG_U_PMCEID3: usize = 90752usize;
pub const REG_CNTP_CTL_EL0: usize = 90760usize;
pub const REG_FEAT_CLRBHB_IMPLEMENTED: usize = 90768usize;
pub const REG_FEAT_MTE2_IMPLEMENTED: usize = 90776usize;
pub const REG_U_PMCNTENCLR: usize = 90784usize;
pub const REG_MPAMVPM3_EL2: usize = 90792usize;
pub const REG_ID_MMFR1_EL1: usize = 90800usize;
pub const REG_ICV_NMIAR1_EL1: usize = 90808usize;
pub const REG_FEAT_SVE_B16B16_IMPLEMENTED: usize = 90816usize;
pub const REG_DEBUGEXCEPTION_WATCHPOINT: usize = 1336usize;
pub const REG_V9AP2_IMPLEMENTED: usize = 90824usize;
pub const REG_FEAT_FPACCOMBINE_IMPLEMENTED: usize = 90832usize;
pub const REG_BTYPENEXT: usize = 90840usize;
pub const REG_FEAT_MTE_CANONICAL_TAGS_IMPLEMENTED: usize = 90848usize;
pub const REG_SMCR_EL3_LEN_VALUE: usize = 90856usize;
pub const REG_ID_PFR1_EL1: usize = 90872usize;
pub const REG_U_ERXMISC6: usize = 90880usize;
pub const REG_SMCR_EL3: usize = 90888usize;
pub const REG_SP_EL2: usize = 90896usize;
pub const REG_U_ICV_EOIR0: usize = 90904usize;
pub const REG_PMU_EVENT_DSNP_HIT_RD: usize = 280usize;
pub const REG_FEAT_SVE_SM4_IMPLEMENTED: usize = 90912usize;
pub const REG_U_CNTVOFF: usize = 90920usize;
pub const REG_U__MTE_IMPLEMENTED: usize = 90928usize;
pub const REG_CONTEXTIDR_EL2: usize = 90936usize;
pub const REG_SPSR_IRQ: usize = 90944usize;
pub const REG_U_TTBR0_EL2: usize = 90952usize;
pub const REG_JMCR: usize = 90968usize;
pub const REG_MEMHINT_WA: usize = 496usize;
pub const REG_ICV_IAR1_EL1: usize = 90976usize;
pub const REG_EL0: usize = 448usize;
pub const REG_U__EMPAM_FORCE_NS_IMPLEMENTED: usize = 90984usize;
pub const REG_U_SPSR_HYP: usize = 90992usize;
pub const REG_SPEMAXADDRS: usize = 992usize;
pub const REG_ICC_AP0R_EL1: usize = 91000usize;
pub const REG_GICC_RPR: usize = 91032usize;
pub const REG_U_HACTLR: usize = 91040usize;
pub const REG_GICR_ISENABLER0: usize = 91048usize;
pub const REG_SMPRI_EL1: usize = 91056usize;
pub const REG_TSTATE: usize = 91064usize;
pub const REG_MVBAR: usize = 100136usize;
pub const REG_GPTRANGE_16GB: usize = 968usize;
pub const REG_U__GICC_IIDR: usize = 1376usize;
pub const REG_CNTV_TVAL_EL0: usize = 100144usize;
pub const REG_MPAMVPM0_EL2: usize = 100152usize;
pub const REG_VARIANTIMPLEMENTED: usize = 100160usize;
pub const REG_U_DBGVCR: usize = 100168usize;
pub const REG_ID_AA64SMFR0_EL1: usize = 100176usize;
pub const REG_FEAT_PMULL_IMPLEMENTED: usize = 100184usize;
pub const REG_FEAT_PAN_IMPLEMENTED: usize = 100192usize;
pub const REG_GPT_SECURE: usize = 872usize;
pub const REG_MFAR_EL3: usize = 100200usize;
pub const REG_RECORDS_INF: usize = 100208usize;
pub const REG_CTIPIDR3: usize = 100720usize;
pub const REG_FEAT_FPAC_IMPLEMENTED: usize = 100728usize;
pub const REG_GMID_EL1: usize = 100736usize;
pub const REG_VSESR_EL2: usize = 100744usize;
pub const REG_CNTHPS_TVAL_EL2: usize = 100752usize;
pub const REG_NMRR_S: usize = 100760usize;
pub const REG_U_ID_MMFR4: usize = 100768usize;
pub const REG_U_ICH_VTR: usize = 100776usize;
pub const REG_EDDEVID1: usize = 100784usize;
pub const REG_PMCIDR1: usize = 100792usize;
pub const REG_GICR_INVALLR: usize = 100800usize;
pub const REG_FEAT_EDHSR_IMPLEMENTED: usize = 100808usize;
pub const REG_FEAT_NV_IMPLEMENTED: usize = 100816usize;
pub const REG_PMU_EVENT_SVE_PRED_EMPTY_SPEC: usize = 200usize;
pub const REG_FEAT_SYSINSTR128_IMPLEMENTED: usize = 100824usize;
pub const REG_CNTHP_CTL_EL2: usize = 100832usize;
pub const REG_APIBKEYHI_EL1: usize = 100840usize;
pub const REG_CNTP_TVAL_EL0: usize = 100848usize;
pub const REG_FEAT_S2FWB_IMPLEMENTED: usize = 100856usize;
pub const REG_FEAT_AA32EL2_IMPLEMENTED: usize = 100864usize;
pub const REG_R8: usize = 100872usize;
pub const REG_U_ICC_CTLR_NS: usize = 100880usize;
pub const REG_U_EDECCR: usize = 100888usize;
pub const REG_CCSIDR2_EL1: usize = 100896usize;
pub const REG_VMID_NONE: usize = 1080usize;
pub const REG_MPAMVPM5_EL2: usize = 100904usize;
pub const REG_HFGWTR_EL2: usize = 100912usize;
pub const REG_SMIDR_EL1: usize = 100920usize;
pub const REG_U_ERXMISC2: usize = 100928usize;
pub const REG_FEAT_LS64_ACCDATA_IMPLEMENTED: usize = 100936usize;
pub const REG_FEAT_ITE_IMPLEMENTED: usize = 100944usize;
pub const REG_CTIDEVARCH: usize = 100952usize;
pub const REG_S2POR_EL1: usize = 100960usize;
pub const REG_PMU_EVENT_LL_LFB_HIT_RD: usize = 344usize;
pub const REG_GICD_CLRSPI_NSR: usize = 100968usize;
pub const REG_GCSCR_EL1: usize = 100976usize;
pub const REG_M32_SVC: usize = 376usize;
pub const REG_FEAT_GCS_IMPLEMENTED: usize = 100984usize;
pub const REG_FEAT_DEBUGV8P4_IMPLEMENTED: usize = 100992usize;
pub const REG_U_TTBCR_NS: usize = 101000usize;
pub const REG_LORN_EL1: usize = 101008usize;
pub const REG_FEAT_PACQARMA3_IMPLEMENTED: usize = 101016usize;
pub const REG_U_RMR: usize = 101024usize;
pub const REG_SPECOUNTERPOSISSUELATENCY: usize = 1064usize;
pub const REG_FEAT_PMUV3P7_IMPLEMENTED: usize = 101032usize;
pub const REG_R7: usize = 101040usize;
pub const REG_U__EMULATOR_TERMINATION_OPCODE: usize = 101048usize;
pub const REG_U_PMOVSR: usize = 101064usize;
pub const REG_GPTRANGE_1GB: usize = 960usize;
pub const REG_U__MONOMORPHIZE_WRITES: usize = 101072usize;
pub const REG_U__EXCLUSIVEMONITORSET: usize = 101080usize;
pub const REG_FEAT_FLAGM_IMPLEMENTED: usize = 101088usize;
pub const REG_TLBTR: usize = 101096usize;
pub const REG_FEAT_SHA3_IMPLEMENTED: usize = 101104usize;
pub const REG_GPTRANGE_512GB: usize = 984usize;
pub const REG_FEAT_TLBIRANGE_IMPLEMENTED: usize = 101112usize;
pub const REG_ISWFISLEEP: usize = 101120usize;
pub const REG_PMSFCR_EL1: usize = 101128usize;
pub const REG_ICC_IGRPEN1_EL1_S: usize = 101136usize;
pub const REG_HDFGRTR2_EL2: usize = 101144usize;
pub const REG_CTIPIDR1: usize = 101152usize;
pub const REG_U_MPIDR: usize = 101160usize;
pub const REG_RECORDS_TGT: usize = 101168usize;
pub const REG_EDPIDR3: usize = 101680usize;
pub const REG_EDDEVID2: usize = 101688usize;
pub const REG_PMIAR_EL1: usize = 101696usize;
pub const REG_GICR_PROPBASER: usize = 101704usize;
pub const REG_V9AP4_IMPLEMENTED: usize = 101712usize;
pub const REG_TTBR0_S: usize = 101720usize;
pub const REG_GICV_CTLR: usize = 101728usize;
pub const REG_PMSICR_EL1: usize = 101736usize;
pub const REG_ID_AA64PFR0_EL1: usize = 101744usize;
pub const REG_FEAT_TTL_IMPLEMENTED: usize = 101752usize;
pub const REG_FEAT_LS64_IMPLEMENTED: usize = 101760usize;
pub const REG_FEAT_HPDS_IMPLEMENTED: usize = 101768usize;
pub const REG_V8AP9_IMPLEMENTED: usize = 101776usize;
pub const REG_U_DBGDTRTXINT: usize = 101784usize;
pub const REG_JIDR: usize = 101792usize;
pub const REG_DBGWFAR: usize = 101800usize;
pub const REG_GICV_AIAR: usize = 101808usize;
pub const REG_ZCR_EL1: usize = 101816usize;
pub const REG_FEAT_ETMV4_IMPLEMENTED: usize = 101824usize;
pub const REG_RMR_EL3: usize = 101832usize;
pub const REG_AMCNTENCLR1_EL0: usize = 101840usize;
pub const REG_PMEVCNTSVR_EL1: usize = 101848usize;
pub const REG_NUM_GIC_PRIORITY_BITS: usize = 102096usize;
pub const REG_U_ICV_HPPIR0: usize = 102112usize;
pub const REG_DEBUGEXCEPTION_VECTORCATCH: usize = 1328usize;
pub const REG_PMLSR: usize = 102120usize;
pub const REG_DCZID_EL0: usize = 102128usize;
pub const REG_U_ICV_IGRPEN1: usize = 102136usize;
pub const REG_U__DCACHE_CCSIDR_RESET: usize = 102144usize;
pub const REG_FEAT_RPRFM_IMPLEMENTED: usize = 102200usize;
pub const REG_DBGVCR32_EL2: usize = 102208usize;
pub const REG_CTIDEVID: usize = 102216usize;
pub const REG_BRBTGTINJ_EL1: usize = 102224usize;
pub const REG_FEAT_DOUBLELOCK_IMPLEMENTED: usize = 102232usize;
pub const REG_U_ID_MMFR3: usize = 102240usize;
pub const REG_U_SDER: usize = 102248usize;
pub const REG_FEAT_SM4_IMPLEMENTED: usize = 102256usize;
pub const REG_MPAMSM_EL1: usize = 102264usize;
pub const REG_M32_HYP: usize = 400usize;
pub const REG_FEAT_TRF_IMPLEMENTED: usize = 102272usize;
pub const REG_PIRE0_EL2: usize = 102280usize;
pub const REG_U_ICC_HPPIR1: usize = 102288usize;
pub const REG_EDCIDR0: usize = 102296usize;
pub const REG_FEAT_CNTSC_IMPLEMENTED: usize = 102304usize;
pub const REG_U__TRICKBOX_ENABLED: usize = 102312usize;
pub const REG_MEMHINT_RA: usize = 504usize;
pub const REG_AMPIDR3: usize = 102320usize;
pub const REG_GPTRANGE_512MB: usize = 952usize;
pub const REG_FEAT_CCIDX_IMPLEMENTED: usize = 102328usize;
pub const REG_U_ICC_DIR: usize = 102336usize;
pub const REG_PMLAR: usize = 102344usize;
pub const REG_GPT_ROOT: usize = 888usize;
pub const REG_FEAT_SM3_IMPLEMENTED: usize = 102352usize;
pub const REG_CFG_RVBAR: usize = 102360usize;
pub const REG_U_FPEXC: usize = 102368usize;
pub const REG_PMU_EVENT_LL_CACHE_MISS: usize = 120usize;
pub const REG_PMU_EVENT_L1D_CACHE_REFILL: usize = 24usize;
pub const REG_ICV_BPR1_EL1: usize = 102376usize;
pub const REG_ACCDATA_EL1: usize = 102384usize;
pub const REG_ERXMISC2_EL1: usize = 102392usize;
pub const REG_FEAT_VHE_IMPLEMENTED: usize = 102400usize;
pub const REG_NSACR: usize = 102408usize;
pub const REG_U__CTIBASE: usize = 102416usize;
pub const REG_CTILSR: usize = 102424usize;
pub const REG_U_ISR: usize = 102432usize;
pub const REG_INGUARDEDPAGE: usize = 102440usize;
pub const REG_SPEADDRPOSDATAPHYSICAL: usize = 1040usize;
pub const REG_ICC_BPR1_EL1_S: usize = 102448usize;
pub const REG_EL2: usize = 432usize;
pub const REG_U_ERRSELR: usize = 102456usize;
pub const REG_GICV_AEOIR: usize = 102464usize;
pub const REG_HCR_EL2: usize = 102472usize;
pub const REG_ZT0_LEN: usize = 824usize;
pub const REG_ID_ISAR2_EL1: usize = 102480usize;
pub const REG_MECID_RL_A_EL3: usize = 102488usize;
pub const REG_FEAT_EL0_IMPLEMENTED: usize = 102496usize;
pub const REG_DSPSR_EL0: usize = 102504usize;
pub const REG_FEAT_D128_IMPLEMENTED: usize = 102512usize;
pub const REG_U_DFSR_NS: usize = 102520usize;
pub const REG_GICD_STATUSR: usize = 102528usize;
pub const REG_FAR_EL2: usize = 102536usize;
pub const REG_PMUSERENR_EL0: usize = 102544usize;
pub const REG_FEAT_SSBS2_IMPLEMENTED: usize = 102552usize;
pub const REG_CFG_ID_AA64PFR0_EL1_EL3: usize = 1248usize;
pub const REG_U_ID_ISAR5: usize = 102560usize;
pub const REG_SPESAMPLECOUNTERPENDING: usize = 102568usize;
pub const REG_SCTLR2_EL2: usize = 102576usize;
pub const REG_POR_EL0: usize = 102584usize;
pub const REG_R12: usize = 102592usize;
pub const REG_FEAT_PRFMSLC_IMPLEMENTED: usize = 102600usize;
pub const REG_R22: usize = 102608usize;
pub const REG_GPT_BLOCK: usize = 856usize;
pub const REG_U_MVFR2: usize = 102616usize;
pub const REG_GICV_PMR: usize = 102624usize;
pub const REG_GICR_INVLPIR: usize = 102632usize;
pub const REG_U_ACTLR_NS: usize = 102640usize;
pub const REG_DEFAULTPMG: usize = 776usize;
pub const REG_FEAT_LOR_IMPLEMENTED: usize = 102648usize;
pub const REG_V9AP1_IMPLEMENTED: usize = 102656usize;
pub const REG_R11: usize = 102664usize;
pub const REG_GPT_ANY: usize = 904usize;
pub const REG_PMICNTSVR_EL1: usize = 102672usize;
pub const REG_HFGRTR2_EL2: usize = 102680usize;
pub const REG_U__NUM_CTX_BREAKPOINTS: usize = 102688usize;
pub const REG_U_ID_AFR0: usize = 102704usize;
pub const REG_U_CONFIGREG: usize = 102712usize;
pub const REG_PAR_NS: usize = 102720usize;
pub const REG_PMDEVID: usize = 102728usize;
pub const REG_PFAR_EL1: usize = 102736usize;
pub const REG_U_HCR: usize = 102744usize;
pub const REG_OSDLR_EL1: usize = 102752usize;
pub const REG_FEAT_SPEV1P4_IMPLEMENTED: usize = 102760usize;
pub const REG_FEATUREIMPL: usize = 102768usize;
pub const REG_ICC_HPPIR0_EL1: usize = 102808usize;
pub const REG_ID_AA64MMFR1_EL1: usize = 102816usize;
pub const REG_CNTHV_CVAL_EL2: usize = 102824usize;
pub const REG_ID_MMFR2_EL1: usize = 102832usize;
pub const REG_U_HCPTR: usize = 102840usize;
pub const REG_SCXTNUM_EL1: usize = 102848usize;
pub const REG_DBGDTRRX_EL0: usize = 102856usize;
pub const REG_U__SETG_MOPS_OPTION_A_SUPPORTED: usize = 102864usize;
pub const REG_CFG_MPAM_V0P1: usize = 1272usize;
pub const REG_U_DSPSR: usize = 102872usize;
pub const REG_EDPRCR: usize = 102880usize;
pub const REG_PMU_EVENT_BR_MIS_PRED_RETIRED: usize = 88usize;
pub const REG_DEBUGHALT_STEP_NOSYNDROME: usize = 1176usize;
pub const REG_FEAT_DIT_IMPLEMENTED: usize = 102888usize;
pub const REG_FEAT_MPAM_IMPLEMENTED: usize = 102896usize;
pub const REG_PMU_EVENT_SAMPLE_FEED_LD: usize = 240usize;
pub const REG_U_ID_ISAR0: usize = 102904usize;
pub const REG_AMEVCNTR1_EL0: usize = 102912usize;
pub const REG_U_HMAIR0: usize = 103040usize;
pub const REG_FEAT_AA32EL1_IMPLEMENTED: usize = 103048usize;
pub const REG_M32_SYSTEM: usize = 416usize;
pub const REG_ERXSTATUS_EL1: usize = 103056usize;
pub const REG_GICH_HCR: usize = 103064usize;
pub const REG_DFSR_S: usize = 103072usize;
pub const REG_M32_FIQ: usize = 360usize;
pub const REG_FEAT_GICV4P1_IMPLEMENTED: usize = 103080usize;
pub const REG_MIDR_EL1: usize = 103088usize;
pub const REG_DBGBVR_EL1: usize = 103096usize;
pub const REG_FEAT_RAS_IMPLEMENTED: usize = 103608usize;
pub const REG_PMSWINC_EL0: usize = 103616usize;
pub const REG_CNTPS_TVAL_EL1: usize = 103624usize;
pub const REG_M32_USER: usize = 352usize;
pub const REG_PMCGCR0: usize = 103632usize;
pub const REG_FEAT_NMI_IMPLEMENTED: usize = 103640usize;
pub const REG_GPTRANGE_64KB: usize = 928usize;
pub const REG_FEAT_LPA2_IMPLEMENTED: usize = 103648usize;
pub const REG_DBGWCR_EL1: usize = 103656usize;
pub const REG_PMICFILTR_EL0: usize = 104168usize;
pub const REG_FEAT_MTE3_IMPLEMENTED: usize = 104176usize;
pub const REG_U_AMCNTENSET1: usize = 104184usize;
pub const REG_U__G1_ACTIVITY_MONITOR_IMPLEMENTED: usize = 104192usize;
pub const REG_FEAT_SPEV1P3_IMPLEMENTED: usize = 104200usize;
pub const REG_GICV_BPR: usize = 104208usize;
pub const REG_FEAT_TTCNP_IMPLEMENTED: usize = 104216usize;
pub const REG_FEAT_LRCPC2_IMPLEMENTED: usize = 104224usize;
pub const REG_U_DBGDCCINT: usize = 104232usize;
pub const REG_SPESAMPLECONTEXTEL1: usize = 104240usize;
pub const REG_U__CNTCONTROLBASE: usize = 104248usize;
pub const REG_GICD_IIDR: usize = 104256usize;
pub const REG_PMPIDR4: usize = 104264usize;
pub const REG_CTIDEVID2: usize = 104272usize;
pub const REG_FEAT_AA32BF16_IMPLEMENTED: usize = 104280usize;
pub const REG_FEAT_BRBE_IMPLEMENTED: usize = 104288usize;
pub const REG_FEAT_AA32I8MM_IMPLEMENTED: usize = 104296usize;
pub const REG_PIR_EL1: usize = 104304usize;
pub const REG_PMOVSSET_EL0: usize = 104312usize;
pub const REG_MDSCR_EL1: usize = 104320usize;
pub const REG_FEAT_ETMV4P3_IMPLEMENTED: usize = 104328usize;
pub const REG_ID_AA64ZFR0_EL1: usize = 104336usize;
pub const REG_U__GICD_TYPER: usize = 1368usize;
pub const REG_U__G1_ACTIVITY_MONITOR_OFFSET_IMPLEMENTED: usize = 104344usize;
pub const REG_ACTLR_EL1: usize = 104352usize;
pub const REG_U_CLIDR: usize = 104360usize;
pub const REG_U__THISINSTR: usize = 104368usize;
pub const REG_U_CNTHVS_CTL: usize = 104376usize;
pub const REG_FEAT_S2POE_IMPLEMENTED: usize = 104384usize;
pub const REG_ID_DFR1_EL1: usize = 104392usize;
pub const REG_U__HAS_SPE_PSEUDO_CYCLES: usize = 104400usize;
pub const REG_PMU_EVENT_REMOTE_ACCESS: usize = 104usize;
pub const REG_FEAT_MTPMU_IMPLEMENTED: usize = 104408usize;
pub const REG_DBGOSLAR: usize = 104416usize;
pub const REG_U__EXTDEBUGBASE: usize = 104424usize;
pub const REG_TFSR_EL2: usize = 104432usize;
pub const REG_TFSR_EL3: usize = 104440usize;
pub const REG_PMCCNTR_EL0: usize = 104448usize;
pub const REG_U_DBGAUTHSTATUS: usize = 104456usize;
pub const REG_SHOULDADVANCEIT: usize = 104464usize;
pub const REG_ID_AA64DFR1_EL1: usize = 104472usize;
pub const REG_AMCNTENSET0_EL0: usize = 104480usize;
pub const REG_U_ICC_BPR1_S: usize = 104488usize;
pub const REG_U_ICC_PMR: usize = 104496usize;
pub const REG_GPTRANGE_4KB: usize = 912usize;
pub const REG_CTIDEVID1: usize = 104504usize;
pub const REG_HFGITR2_EL2: usize = 104512usize;
pub const REG_CYCLE_COUNTER_ID: usize = 0usize;
pub const REG_AMCG1IDR_EL0: usize = 104520usize;
pub const REG_SPESAMPLEEVENTS: usize = 104528usize;
pub const REG_FEAT_DOUBLEFAULT2_IMPLEMENTED: usize = 104536usize;
pub const REG_FAR_EL3: usize = 104544usize;
pub const REG_MDCR_EL2: usize = 104552usize;
pub const REG_PMOVSCLR_EL0: usize = 104560usize;
pub const REG_U__SYNCABORTONWRITENORMNONCACHE: usize = 104568usize;
pub const REG_MVFR1_EL1: usize = 104576usize;
pub const REG_TPIDR2_EL0: usize = 104584usize;
pub const REG_SPNIDEN: usize = 104592usize;
pub const REG_LST_64BV0: usize = 1216usize;
pub const REG_PMSCR_EL2: usize = 104600usize;
pub const REG_HSTR_EL2: usize = 104608usize;
pub const REG_CTICIDR2: usize = 104616usize;
pub const REG_GICV_ABPR: usize = 104624usize;
pub const REG_FEAT_JSCVT_IMPLEMENTED: usize = 104632usize;
pub const REG_FEAT_MPAMV1P1_IMPLEMENTED: usize = 104640usize;
pub const REG_PMU_EVENT_BR_MIS_PRED: usize = 56usize;
pub const REG_M32_IRQ: usize = 368usize;
pub const REG_FEAT_PMUV3P4_IMPLEMENTED: usize = 104648usize;
pub const REG_PMPIDR1: usize = 104656usize;
pub const REG_FEAT_GICV3_TDIR_IMPLEMENTED: usize = 104664usize;
pub const REG_R17: usize = 104672usize;
pub const REG_U_AMAIR0_NS: usize = 104680usize;
pub struct RegisterOffset {
    // Name of the register
    pub name: &'static str,
    // Offset in bytes inside the register
    pub offset: usize,
}
pub fn lookup_register_by_offset(offset: usize) -> Option<RegisterOffset> {
    if offset > core::mem::size_of::<State>() {
        return None;
    }
    Some(
        match REGISTER_NAME_MAP.binary_search_by(|(candidate, _)| candidate.cmp(&offset))
        {
            Ok(idx) => {
                RegisterOffset {
                    name: REGISTER_NAME_MAP[idx].1,
                    offset: 0,
                }
            }
            Err(idx) => {
                let (register_offset, name) = REGISTER_NAME_MAP[idx - 1];
                RegisterOffset {
                    name,
                    offset: offset - register_offset,
                }
            }
        },
    )
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structf71da1a79e9d9d1c {
    pub tuple__pcnt_bool__pcnt_bv320: bool,
    pub tuple__pcnt_bool__pcnt_bv321: u32,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct3cb65eaffadb0720 {
    pub tuple__pcnt_bv1__pcnt_bv1__pcnt_bv10: bool,
    pub tuple__pcnt_bv1__pcnt_bv1__pcnt_bv11: bool,
    pub tuple__pcnt_bv1__pcnt_bv1__pcnt_bv12: bool,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structdc3b504fad5c6519 {
    pub tuple__pcnt_bv__pcnt_bool0: Bits,
    pub tuple__pcnt_bv__pcnt_bool1: bool,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct343b2d4a0306013a {
    pub tuple__pcnt_bv__pcnt_union_zoptionzIozK0: Bits,
    pub tuple__pcnt_bv__pcnt_union_zoptionzIozK1: Enumf69731e192b14a6b,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct29530d10a7ab293e {
    pub access: Structce3d4f74f0c035a1,
    pub assuredonly: bool,
    pub debugmoe: u8,
    pub dirtybit: bool,
    pub domain: u8,
    pub extflag: bool,
    pub gpcf: Struct70fb44e0b08fca48,
    pub gpcfs2walk: bool,
    pub ipaddress: Structd1e4e056bb52a442,
    pub level: i128,
    pub merrorstate: u32,
    pub overlay: bool,
    pub paddress: Structd1e4e056bb52a442,
    pub s1tagnotdata: bool,
    pub s2fs1walk: bool,
    pub secondstage: bool,
    pub statuscode: u32,
    pub tagaccess: bool,
    pub toplevel: bool,
    pub write: bool,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structb80fc33b537eeda2 {
    pub tuple__pcnt_struct_zFaultRecord__pcnt_struct_zAddressDescriptor__pcnt_struct_zTTWState__pcnt_bv0: Struct29530d10a7ab293e,
    pub tuple__pcnt_struct_zFaultRecord__pcnt_struct_zAddressDescriptor__pcnt_struct_zTTWState__pcnt_bv1: Struct5f3b6da595f30aca,
    pub tuple__pcnt_struct_zFaultRecord__pcnt_struct_zAddressDescriptor__pcnt_struct_zTTWState__pcnt_bv2: Struct62e97a2b6f14adb0,
    pub tuple__pcnt_struct_zFaultRecord__pcnt_struct_zAddressDescriptor__pcnt_struct_zTTWState__pcnt_bv3: Bits,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct9fe441156b18108 {
    pub tuple__pcnt_enum_zConstraint__pcnt_bv2__pcnt_bv1__pcnt_bv1__pcnt_bv20: u32,
    pub tuple__pcnt_enum_zConstraint__pcnt_bv2__pcnt_bv1__pcnt_bv1__pcnt_bv21: u8,
    pub tuple__pcnt_enum_zConstraint__pcnt_bv2__pcnt_bv1__pcnt_bv1__pcnt_bv22: bool,
    pub tuple__pcnt_enum_zConstraint__pcnt_bv2__pcnt_bv1__pcnt_bv1__pcnt_bv23: bool,
    pub tuple__pcnt_enum_zConstraint__pcnt_bv2__pcnt_bv1__pcnt_bv1__pcnt_bv24: u8,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct917b3b33dbf1754b {
    pub bits: u64,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct4fc70f5aac01ee9e {
    pub tuple__pcnt_enum_zConstraint__pcnt_bv50: u32,
    pub tuple__pcnt_enum_zConstraint__pcnt_bv51: u8,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct44caea4e847fe08d {
    pub tuple__pcnt_bv8__pcnt_bool0: u8,
    pub tuple__pcnt_bv8__pcnt_bool1: bool,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structb0893c7db9074fbf {
    pub iesb_req: bool,
    pub take_FIQ: bool,
    pub take_IRQ: bool,
    pub take_SE: bool,
    pub take_vFIQ: bool,
    pub take_vIRQ: bool,
    pub take_vSE: bool,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structe89015f692c2dc66 {
    pub attrs: u8,
    pub hints: u8,
    pub transient: bool,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structf0c9a449998805c {
    pub tuple__pcnt_struct_zPhysMemRetStatus__pcnt_bv80: Structc549f9bcfd9a2c5f,
    pub tuple__pcnt_struct_zPhysMemRetStatus__pcnt_bv81: u8,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structc541d5a5aa38657a {
    pub access_kind: Enumfabfd93ef17fdbf2,
    pub pa: Bits,
    pub size: i128,
    pub tag: Enumf69731e192b14a6b,
    pub translation: Enum341d9ce549c82439,
    pub va: Enum3c2b85a331c35c26,
    pub value: Enum3c2b85a331c35c26,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct5f3b6da595f30aca {
    pub fault: Struct29530d10a7ab293e,
    pub mecid: u16,
    pub memattrs: Structad9a367f5ed3ed07,
    pub paddress: Structd1e4e056bb52a442,
    pub s1assured: bool,
    pub s2fs1mro: bool,
    pub tlbcontext: Struct21784028ef9bf8b3,
    pub vaddress: u64,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structcc766a8b1e22a4c4 {
    pub blocksize: i128,
    pub context: Struct21784028ef9bf8b3,
    pub contigsize: i128,
    pub s1descriptor: u128,
    pub s2descriptor: u128,
    pub walkstate: Struct62e97a2b6f14adb0,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structd5e0dcebfc891db1 {
    pub tuple__pcnt_bv__pcnt_bv10: Bits,
    pub tuple__pcnt_bv__pcnt_bv11: bool,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct258b23aa3d588091 {
    pub tuple__pcnt_enum_zConstraint__pcnt_i0: u32,
    pub tuple__pcnt_enum_zConstraint__pcnt_i1: i128,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct5de641ba4f5d5b47 {
    pub tuple__pcnt_enum_zFPType__pcnt_bv1__pcnt_real0: u32,
    pub tuple__pcnt_enum_zFPType__pcnt_bv1__pcnt_real1: bool,
    pub tuple__pcnt_enum_zFPType__pcnt_bv1__pcnt_real2: num_rational::Ratio<i128>,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct604e5f7ac44b60ef {
    pub tuple__pcnt_struct_zPhysMemRetStatus__pcnt_bv40: Structc549f9bcfd9a2c5f,
    pub tuple__pcnt_struct_zPhysMemRetStatus__pcnt_bv41: u8,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct51db15130d1af1bf {
    pub aie: bool,
    pub amec: bool,
    pub cmow: bool,
    pub d128: bool,
    pub dc: bool,
    pub dct: bool,
    pub disch: bool,
    pub ds: bool,
    pub e0pd: bool,
    pub ee: bool,
    pub emec: bool,
    pub epan: bool,
    pub ha: bool,
    pub haft: bool,
    pub hd: bool,
    pub hpd: bool,
    pub irgn: u8,
    pub mair: Struct917b3b33dbf1754b,
    pub mair2: Struct917b3b33dbf1754b,
    pub mtx: bool,
    pub nfd: bool,
    pub ntlsmd: bool,
    pub nv1: bool,
    pub orgn: u8,
    pub pie: bool,
    pub pir: Struct917b3b33dbf1754b,
    pub pire0: Struct917b3b33dbf1754b,
    pub pnch: bool,
    pub ps: u8,
    pub sh: u8,
    pub sif: bool,
    pub skl: u8,
    pub t0sz: u8,
    pub t1sz: u8,
    pub tbi: bool,
    pub tbid: bool,
    pub tgx: u32,
    pub txsz: u8,
    pub uwxn: bool,
    pub wxn: bool,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct88c833685d899444 {
    pub or: bool,
    pub or_mmu: bool,
    pub or_rcw: bool,
    pub overlay: bool,
    pub ow: bool,
    pub ow_mmu: bool,
    pub ow_rcw: bool,
    pub ox: bool,
    pub r: bool,
    pub r_mmu: bool,
    pub r_rcw: bool,
    pub toplevel0: bool,
    pub toplevel1: bool,
    pub w: bool,
    pub w_mmu: bool,
    pub w_rcw: bool,
    pub x: bool,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structa4873b0cfdc3568d {
    pub rec: Structcfae909247391754,
    pub shareability: u32,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structf1eb568d383e89ea {
    pub bits: u128,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct2912c9c54b07053d {
    pub tuple__pcnt_bv64__pcnt_bv640: u64,
    pub tuple__pcnt_bv64__pcnt_bv641: u64,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structace527123892b9bc {
    pub tuple__pcnt_struct_zFaultRecord__pcnt_struct_zAddressDescriptor0: Struct29530d10a7ab293e,
    pub tuple__pcnt_struct_zFaultRecord__pcnt_struct_zAddressDescriptor1: Struct5f3b6da595f30aca,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct2499516ce5817d1a {
    pub tuple__pcnt_enum_zConstraint__pcnt_bv0: u32,
    pub tuple__pcnt_enum_zConstraint__pcnt_bv1: Bits,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structc549f9bcfd9a2c5f {
    pub extflag: bool,
    pub merrorstate: u32,
    pub statuscode: u32,
    pub store64bstatus: u64,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct46a8fa297d4d4711 {
    pub tuple__pcnt_bool__pcnt_bv0: bool,
    pub tuple__pcnt_bool__pcnt_bv1: Bits,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct674abaa01b77071b {
    pub tuple__pcnt_bv64__pcnt_bool0: u64,
    pub tuple__pcnt_bv64__pcnt_bool1: bool,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structc8921d9034b768f1 {
    pub bits: u32,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structe2f620c8eb69267c {
    pub A: bool,
    pub ALLINT: bool,
    pub BTYPE: u8,
    pub C: bool,
    pub D: bool,
    pub DIT: bool,
    pub E: bool,
    pub EL: u8,
    pub EXLOCK: bool,
    pub F: bool,
    pub GE: u8,
    pub I: bool,
    pub IL: bool,
    pub IT: u8,
    pub J: bool,
    pub M: u8,
    pub N: bool,
    pub PAN: bool,
    pub PM: bool,
    pub PPEND: bool,
    pub Q: bool,
    pub SM: bool,
    pub SP: bool,
    pub SS: bool,
    pub SSBS: bool,
    pub T: bool,
    pub TCO: bool,
    pub UAO: bool,
    pub V: bool,
    pub Z: bool,
    pub ZA: bool,
    pub nRW: bool,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct80233863dd0943a0 {
    pub tuple__pcnt_struct_zFaultRecord__pcnt_struct_zAddressDescriptor__pcnt_enum_zSDFType0: Struct29530d10a7ab293e,
    pub tuple__pcnt_struct_zFaultRecord__pcnt_struct_zAddressDescriptor__pcnt_enum_zSDFType1: Struct5f3b6da595f30aca,
    pub tuple__pcnt_struct_zFaultRecord__pcnt_struct_zAddressDescriptor__pcnt_enum_zSDFType2: u32,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structb73c86e9813fbc6f {
    pub tuple__pcnt_bool__pcnt_bv20: bool,
    pub tuple__pcnt_bool__pcnt_bv21: u8,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structce3d4f74f0c035a1 {
    pub a32lsmd: bool,
    pub acctype: u32,
    pub acqpc: bool,
    pub acqsc: bool,
    pub atomicop: bool,
    pub cacheop: u32,
    pub cachetype: u32,
    pub contiguous: bool,
    pub el: u8,
    pub exclusive: bool,
    pub first: bool,
    pub firstfault: bool,
    pub limitedordered: bool,
    pub ls64: bool,
    pub modop: u32,
    pub mops: bool,
    pub mpam: Structcdab40780616cd2b,
    pub nonfault: bool,
    pub nontemporal: bool,
    pub opscope: u32,
    pub pan: bool,
    pub rcw: bool,
    pub rcws: bool,
    pub read: bool,
    pub relsc: bool,
    pub ss: u32,
    pub streamingsve: bool,
    pub tagaccess: bool,
    pub tagchecked: bool,
    pub toplevel: bool,
    pub transactional: bool,
    pub varange: u32,
    pub write: bool,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structa824a2637dac7ab {
    pub tuple__pcnt_bv4__pcnt_bv1280: u8,
    pub tuple__pcnt_bv4__pcnt_bv1281: u128,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct1c4617259271fd9 {
    pub tuple__pcnt_bool__pcnt_bool0: bool,
    pub tuple__pcnt_bool__pcnt_bool1: bool,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct3bd767e7a6f24086 {
    pub tuple__pcnt_struct_zGPCFRecord__pcnt_struct_zGPTEntry0: Struct70fb44e0b08fca48,
    pub tuple__pcnt_struct_zGPCFRecord__pcnt_struct_zGPTEntry1: Structe298ee60b912892e,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structa8e779f60a8f0b74 {
    pub tuple__pcnt_enum_zConstraint__pcnt_bv30: u32,
    pub tuple__pcnt_enum_zConstraint__pcnt_bv31: u8,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct17d57f6dfbd87bf {
    pub all_asid: bool,
    pub all_vmid: bool,
    pub asid: u16,
    pub is_asid_valid: bool,
    pub is_vmid_valid: bool,
    pub restriction: u32,
    pub security: u32,
    pub target_el: u8,
    pub vmid: u16,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct57c50f15ba5cdb68 {
    pub tuple__pcnt_struct_zFaultRecord__pcnt_bv1280: Struct29530d10a7ab293e,
    pub tuple__pcnt_struct_zFaultRecord__pcnt_bv1281: u128,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct7089f05824709303 {
    pub tuple__pcnt_enum_zConstraint__pcnt_bv1__pcnt_bv40: u32,
    pub tuple__pcnt_enum_zConstraint__pcnt_bv1__pcnt_bv41: bool,
    pub tuple__pcnt_enum_zConstraint__pcnt_bv1__pcnt_bv42: u8,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct21784028ef9bf8b3 {
    pub asid: u16,
    pub cnp: bool,
    pub ia: u64,
    pub includes_gpt_name: bool,
    pub includes_s1_name: bool,
    pub includes_s2_name: bool,
    pub ipaspace: u32,
    pub isd128: bool,
    pub level: i128,
    pub nG: bool,
    pub regime: u32,
    pub ss: u32,
    pub tg: u32,
    pub vmid: u16,
    pub xs: bool,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct489cd779642cf40c {
    pub tuple__pcnt_bv__pcnt_i0: Bits,
    pub tuple__pcnt_bv__pcnt_i1: i128,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct35b62305b7d637a0 {
    pub tuple__pcnt_enum_zConstraint__pcnt_bv80: u32,
    pub tuple__pcnt_enum_zConstraint__pcnt_bv81: u8,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structde0ae26d92ecc34a {
    pub NS: bool,
    pub exceptype: u32,
    pub ipaddress: u64,
    pub ipavalid: bool,
    pub paddress: Structd1e4e056bb52a442,
    pub pavalid: bool,
    pub syndrome: u32,
    pub syndrome2: u32,
    pub trappedsyscallinst: bool,
    pub vaddress: u64,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct6f1e02efdaf6c1e {
    pub tuple__pcnt_bool__pcnt_bv2__pcnt_bv64__pcnt_bv640: bool,
    pub tuple__pcnt_bool__pcnt_bv2__pcnt_bv64__pcnt_bv641: u8,
    pub tuple__pcnt_bool__pcnt_bv2__pcnt_bv64__pcnt_bv642: u64,
    pub tuple__pcnt_bool__pcnt_bv2__pcnt_bv64__pcnt_bv643: u64,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct2b035eb5949c4c68 {
    pub domain: u32,
    pub nXS: bool,
    pub types: u32,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct75f369856b46bcfc {
    pub tuple__pcnt_bv4__pcnt_bv0: u8,
    pub tuple__pcnt_bv4__pcnt_bv1: Bits,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct721486fe44046f3d {
    pub tuple__pcnt_bv1__pcnt_bv1__pcnt_bv1__pcnt_bv10: bool,
    pub tuple__pcnt_bv1__pcnt_bv1__pcnt_bv1__pcnt_bv11: bool,
    pub tuple__pcnt_bv1__pcnt_bv1__pcnt_bv1__pcnt_bv12: bool,
    pub tuple__pcnt_bv1__pcnt_bv1__pcnt_bv1__pcnt_bv13: bool,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structb8453f579cc11fbc {
    pub tuple__pcnt_bv1__pcnt_bv1__pcnt_bv1__pcnt_bv1__pcnt_bv1__pcnt_bv10: bool,
    pub tuple__pcnt_bv1__pcnt_bv1__pcnt_bv1__pcnt_bv1__pcnt_bv1__pcnt_bv11: bool,
    pub tuple__pcnt_bv1__pcnt_bv1__pcnt_bv1__pcnt_bv1__pcnt_bv1__pcnt_bv12: bool,
    pub tuple__pcnt_bv1__pcnt_bv1__pcnt_bv1__pcnt_bv1__pcnt_bv1__pcnt_bv13: bool,
    pub tuple__pcnt_bv1__pcnt_bv1__pcnt_bv1__pcnt_bv1__pcnt_bv1__pcnt_bv14: bool,
    pub tuple__pcnt_bv1__pcnt_bv1__pcnt_bv1__pcnt_bv1__pcnt_bv1__pcnt_bv15: bool,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct10cacb7143b8cc5b {
    pub tuple__pcnt_bv24__pcnt_bv110: u32,
    pub tuple__pcnt_bv24__pcnt_bv111: u16,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structf9edbf63b74146af {
    pub ap: u8,
    pub ap_table: u8,
    pub ndirty: bool,
    pub po_index: u8,
    pub ppi: u8,
    pub pxn: bool,
    pub pxn_table: bool,
    pub s2ap: u8,
    pub s2dirty: bool,
    pub s2pi: u8,
    pub s2po_index: u8,
    pub s2tag_na: bool,
    pub s2xn: bool,
    pub s2xnx: bool,
    pub upi: u8,
    pub uxn: bool,
    pub uxn_table: bool,
    pub xn: bool,
    pub xn_table: bool,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structad9a367f5ed3ed07 {
    pub device: u32,
    pub inner: Structe89015f692c2dc66,
    pub memtype: u32,
    pub notagaccess: bool,
    pub outer: Structe89015f692c2dc66,
    pub shareability: u32,
    pub tags: u32,
    pub xs: bool,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structcfae909247391754 {
    pub address: u64,
    pub asid: u16,
    pub attr: u32,
    pub d128: bool,
    pub d64: bool,
    pub end_address_name: u64,
    pub from_aarch64: bool,
    pub ipaspace: u32,
    pub level: u32,
    pub op: u32,
    pub regime: u32,
    pub security: u32,
    pub tg: u8,
    pub ttl: u8,
    pub vmid: u16,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct19c7112689f1b0d9 {
    pub tuple__pcnt_struct_zFaultRecord__pcnt_bool0: Struct29530d10a7ab293e,
    pub tuple__pcnt_struct_zFaultRecord__pcnt_bool1: bool,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structcdab40780616cd2b {
    pub mpam_sp: u32,
    pub partid: u16,
    pub pmg: u8,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct6202352d26f81765 {
    pub tlbrecord: Structcc766a8b1e22a4c4,
    pub valid_name: bool,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct70fb44e0b08fca48 {
    pub gpf: u32,
    pub level: i128,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structd84b34d2bb5d184d {
    pub tuple__pcnt_bool__pcnt_bool__pcnt_bool0: bool,
    pub tuple__pcnt_bool__pcnt_bool__pcnt_bool1: bool,
    pub tuple__pcnt_bool__pcnt_bool__pcnt_bool2: bool,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structe5c48b19f3b32b70 {
    pub acctype: u32,
    pub asid: u16,
    pub cacheop: u32,
    pub cachetype: u32,
    pub cpas: u32,
    pub is_asid_valid: bool,
    pub is_vmid_valid: bool,
    pub level: i128,
    pub opscope: u32,
    pub paddress: Structd1e4e056bb52a442,
    pub regval: u64,
    pub security: u32,
    pub setnum: i128,
    pub shareability: u32,
    pub translated: bool,
    pub vaddress: u64,
    pub vmid: u16,
    pub waynum: i128,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct5d60ad3c5091b98c {
    pub tuple__pcnt_string__pcnt_i0: &'static str,
    pub tuple__pcnt_string__pcnt_i1: i128,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct1f6d0e33d85bcca3 {
    pub tuple__pcnt_struct_zFaultRecord__pcnt_bv640: Struct29530d10a7ab293e,
    pub tuple__pcnt_struct_zFaultRecord__pcnt_bv641: u64,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct62e97a2b6f14adb0 {
    pub baseaddress: Structd1e4e056bb52a442,
    pub contiguous: bool,
    pub disch: bool,
    pub domain: u8,
    pub guardedpage: bool,
    pub istable: bool,
    pub level: i128,
    pub memattrs: Structad9a367f5ed3ed07,
    pub nG: bool,
    pub permissions: Structf9edbf63b74146af,
    pub s1assured: bool,
    pub s2assuredonly: bool,
    pub sdftype: u32,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct87ff22286408f417 {
    pub tuple__pcnt_bool__pcnt_i0: bool,
    pub tuple__pcnt_bool__pcnt_i1: i128,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct3287f841d2f7b211 {
    pub access_kind: Enumfabfd93ef17fdbf2,
    pub pa: Bits,
    pub size: i128,
    pub tag: bool,
    pub translation: Enum341d9ce549c82439,
    pub va: Enum3c2b85a331c35c26,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structb49b66991bcde391 {
    pub tuple__pcnt_bv32__pcnt_bv10: u32,
    pub tuple__pcnt_bv32__pcnt_bv11: bool,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structa19ed2e381f7e35b {
    pub tuple__pcnt_struct_zFaultRecord__pcnt_bv0: Struct29530d10a7ab293e,
    pub tuple__pcnt_struct_zFaultRecord__pcnt_bv1: Bits,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct81685a93a903c682 {
    pub tuple__pcnt_bv64__pcnt_i0: u64,
    pub tuple__pcnt_bv64__pcnt_i1: i128,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structdd965607ed85676a {
    pub tuple__pcnt_struct_zPhysMemRetStatus__pcnt_struct_zAddressDescriptor0: Structc549f9bcfd9a2c5f,
    pub tuple__pcnt_struct_zPhysMemRetStatus__pcnt_struct_zAddressDescriptor1: Struct5f3b6da595f30aca,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct6d81c1183b847fb4 {
    pub tuple__pcnt_enum_zGPCF__pcnt_struct_zGPTEntry0: u32,
    pub tuple__pcnt_enum_zGPCF__pcnt_struct_zGPTEntry1: Structe298ee60b912892e,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structb7bc265102d01f5d {
    pub tuple__pcnt_struct_zPhysMemRetStatus__pcnt_bv0: Structc549f9bcfd9a2c5f,
    pub tuple__pcnt_struct_zPhysMemRetStatus__pcnt_bv1: Bits,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structfd9a5d5252d38083 {
    pub tuple__pcnt_i__pcnt_i__pcnt_i0: i128,
    pub tuple__pcnt_i__pcnt_i__pcnt_i1: i128,
    pub tuple__pcnt_i__pcnt_i__pcnt_i2: i128,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct5a4c5310d3216a85 {
    pub tuple__pcnt_i__pcnt_i0: i128,
    pub tuple__pcnt_i__pcnt_i1: i128,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct90f78381011ed4b4 {
    pub tuple__pcnt_enum_z__InstrEnc__pcnt_bv320: u32,
    pub tuple__pcnt_enum_z__InstrEnc__pcnt_bv321: u32,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structbe856ac00ca579d {
    pub tuple__pcnt_bv1__pcnt_bv10: bool,
    pub tuple__pcnt_bv1__pcnt_bv11: bool,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structecc89dca6559e5c1 {
    pub asid: Enum3c2b85a331c35c26,
    pub memattrs: Structad9a367f5ed3ed07,
    pub regime: u32,
    pub s1level: Enum969da2c83668338c,
    pub s1params: Enumff0cbbffd1014693,
    pub s2info: Enumbc4610d1c4afb05,
    pub s2params: Enum43916b7a3a21b96d,
    pub va: u64,
    pub vmid: Enum3c2b85a331c35c26,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct4484c853bd9837b5 {
    pub gpt_entry: Structe298ee60b912892e,
    pub valid_name: bool,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structa9d8c5953cfa2a25 {
    pub tuple__pcnt_enum_zGPCF__pcnt_struct_zGPTTable0: u32,
    pub tuple__pcnt_enum_zGPCF__pcnt_struct_zGPTTable1: Struct5aa3e121b0be91ee,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct1204798632583a90 {
    pub tuple__pcnt_enum_zConstraint__pcnt_bv20: u32,
    pub tuple__pcnt_enum_zConstraint__pcnt_bv21: u8,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structb3d857da81231c91 {
    pub tuple__pcnt_enum_zSRType__pcnt_i0: u32,
    pub tuple__pcnt_enum_zSRType__pcnt_i1: i128,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct1c2679588071f943 {
    pub tuple__pcnt_bv16__pcnt_bool0: u16,
    pub tuple__pcnt_bv16__pcnt_bool1: bool,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct188a1c3bf231c64b {
    pub tuple__pcnt_bv__pcnt_bv40: Bits,
    pub tuple__pcnt_bv__pcnt_bv41: u8,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct84fe8b3b2be054b8 {
    pub strength: u32,
    pub variety: u32,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct10a4e724e2377a6f {
    pub tuple__pcnt_enum_zConstraint__pcnt_bv40: u32,
    pub tuple__pcnt_enum_zConstraint__pcnt_bv41: u8,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structd7b2f350a23f9906 {
    pub tuple__pcnt_struct_zFaultRecord__pcnt_struct_zTTWState0: Struct29530d10a7ab293e,
    pub tuple__pcnt_struct_zFaultRecord__pcnt_struct_zTTWState1: Struct62e97a2b6f14adb0,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structa79c7f841a890648 {
    pub tuple__pcnt_bv__pcnt_bv0: Bits,
    pub tuple__pcnt_bv__pcnt_bv1: Bits,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structd1583c616319206 {
    pub tuple__pcnt_bv32__pcnt_bv320: u32,
    pub tuple__pcnt_bv32__pcnt_bv321: u32,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct1eec22ff33779e77 {
    pub tuple__pcnt_i__pcnt_i__pcnt_i640: i128,
    pub tuple__pcnt_i__pcnt_i__pcnt_i641: i128,
    pub tuple__pcnt_i__pcnt_i__pcnt_i642: i64,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structa6a13401b33f65e4 {
    pub tuple__pcnt_bv4__pcnt_bv640: u8,
    pub tuple__pcnt_bv4__pcnt_bv641: u64,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct743d0656c8e2b3b3 {
    pub tuple__pcnt_i__pcnt_bv10: i128,
    pub tuple__pcnt_i__pcnt_bv11: bool,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structd26fb3afa197aaf4 {
    pub tuple__pcnt_i__pcnt_bv320: i128,
    pub tuple__pcnt_i__pcnt_bv321: u32,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structe852b87ae24edd79 {
    pub tuple__pcnt_i__pcnt_bv160: i128,
    pub tuple__pcnt_i__pcnt_bv161: u16,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structdac334e66d8ace61 {
    pub tuple__pcnt_bv32__pcnt_bool0: u32,
    pub tuple__pcnt_bv32__pcnt_bool1: bool,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structa1f3c754524ed819 {
    pub tuple__pcnt_enum_zSecurityState__pcnt_bv20: u32,
    pub tuple__pcnt_enum_zSecurityState__pcnt_bv21: u8,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct260b95b938846c29 {
    pub tuple__pcnt_bv1__pcnt_bv140: bool,
    pub tuple__pcnt_bv1__pcnt_bv141: u16,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structb087a10901f763f8 {
    pub tuple__pcnt_bv32__pcnt_bv40: u32,
    pub tuple__pcnt_bv32__pcnt_bv41: u8,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct709429a982f3daf1 {
    pub tuple__pcnt_struct_zFaultRecord__pcnt_struct_zAddressDescriptor__pcnt_struct_zTTWState__pcnt_bv1280: Struct29530d10a7ab293e,
    pub tuple__pcnt_struct_zFaultRecord__pcnt_struct_zAddressDescriptor__pcnt_struct_zTTWState__pcnt_bv1281: Struct5f3b6da595f30aca,
    pub tuple__pcnt_struct_zFaultRecord__pcnt_struct_zAddressDescriptor__pcnt_struct_zTTWState__pcnt_bv1282: Struct62e97a2b6f14adb0,
    pub tuple__pcnt_struct_zFaultRecord__pcnt_struct_zAddressDescriptor__pcnt_struct_zTTWState__pcnt_bv1283: u128,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structe298ee60b912892e {
    pub contig_size: i128,
    pub gpi: u8,
    pub level: i128,
    pub pa: u64,
    pub size: i128,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct74cbd850c10c35cd {
    pub tuple__pcnt_bv25__pcnt_bv240: u32,
    pub tuple__pcnt_bv25__pcnt_bv241: u32,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structfef2fde4e5b411a3 {
    pub tuple__pcnt_struct_zFaultRecord__pcnt_bv320: Struct29530d10a7ab293e,
    pub tuple__pcnt_struct_zFaultRecord__pcnt_bv321: u32,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structfeee1f220d723f51 {
    pub tuple__pcnt_bv64__pcnt_bv40: u64,
    pub tuple__pcnt_bv64__pcnt_bv41: u8,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structe04bc78b84625153 {
    pub tuple__pcnt_enum_zConstraint__pcnt_bv60: u32,
    pub tuple__pcnt_enum_zConstraint__pcnt_bv61: u8,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct5aa3e121b0be91ee {
    pub address: u64,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct3961b7c2b54bd49e {
    pub tuple__pcnt_struct_zPhysMemRetStatus__pcnt_bv640: Structc549f9bcfd9a2c5f,
    pub tuple__pcnt_struct_zPhysMemRetStatus__pcnt_bv641: u64,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structac221b9646824496 {
    pub tuple__pcnt_struct_zFaultRecord__pcnt_struct_zAddressDescriptor__pcnt_struct_zTTWState__pcnt_bv640: Struct29530d10a7ab293e,
    pub tuple__pcnt_struct_zFaultRecord__pcnt_struct_zAddressDescriptor__pcnt_struct_zTTWState__pcnt_bv641: Struct5f3b6da595f30aca,
    pub tuple__pcnt_struct_zFaultRecord__pcnt_struct_zAddressDescriptor__pcnt_struct_zTTWState__pcnt_bv642: Struct62e97a2b6f14adb0,
    pub tuple__pcnt_struct_zFaultRecord__pcnt_struct_zAddressDescriptor__pcnt_struct_zTTWState__pcnt_bv643: u64,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structa32f3d4dde1ac19f {
    pub assuredonly: bool,
    pub cmow: bool,
    pub d128: bool,
    pub ds: bool,
    pub ee: bool,
    pub emec: bool,
    pub fwb: bool,
    pub ha: bool,
    pub haft: bool,
    pub hd: bool,
    pub irgn: u8,
    pub nsa: bool,
    pub nsw: bool,
    pub orgn: u8,
    pub ps: u8,
    pub ptw: bool,
    pub s: bool,
    pub s2pie: bool,
    pub s2pir: Struct917b3b33dbf1754b,
    pub sa: bool,
    pub sh: u8,
    pub skl: u8,
    pub sl0: u8,
    pub sl2: bool,
    pub sw: bool,
    pub t0sz: u8,
    pub tgx: u32,
    pub tl0: bool,
    pub tl1: bool,
    pub txsz: u8,
    pub vm: bool,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structd1e4e056bb52a442 {
    pub address: u64,
    pub paspace: u32,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Structe3eca5d92e533b43 {
    pub A: bool,
    pub D: bool,
    pub F: bool,
    pub FFR: u64,
    pub FPCR: u64,
    pub FPSR: u64,
    pub GCSPR_ELx: u64,
    pub I: bool,
    pub ICC_PMR_EL1: u64,
    pub P: [u64; 16usize],
    pub Rt: i128,
    pub SP: u64,
    pub X: [u64; 31usize],
    pub Z: [u64; 32usize],
    pub depth: i128,
    pub nPC: u64,
    pub nzcv: u8,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct5b79d102506bcdb3 {
    pub gcs: bool,
    pub or: bool,
    pub overlay: bool,
    pub ow: bool,
    pub ox: bool,
    pub r: bool,
    pub w: bool,
    pub wxn: bool,
    pub x: bool,
}
#[derive(Default, Debug, Clone, Copy, PartialEq)]
#[repr(C)]
pub struct Struct948aff668ade9f1e {
    pub tuple__pcnt_enum_zSRType__pcnt_i640: u32,
    pub tuple__pcnt_enum_zSRType__pcnt_i641: i64,
}
#[derive(Debug, Clone, Copy, PartialEq)]
pub enum Enumff0cbbffd1014693 {
    None_RS1TTWParams_(()),
    Some_RS1TTWParams_(Struct51db15130d1af1bf),
}
impl Default for Enumff0cbbffd1014693 {
    fn default() -> Self {
        Self::None_RS1TTWParams_(Default::default())
    }
}
#[derive(Debug, Clone, Copy, PartialEq)]
pub enum Enumf433495b989ea3fe {
    None_RFaultRecord_(()),
    Some_RFaultRecord_(Struct29530d10a7ab293e),
}
impl Default for Enumf433495b989ea3fe {
    fn default() -> Self {
        Self::None_RFaultRecord_(Default::default())
    }
}
#[derive(Debug, Clone, Copy, PartialEq)]
pub enum Enumc101867477176eb7 {
    Err_Uoption_o____EFault_pcnt__(u32),
    Ok_Uoption_o____EFault_pcnt__(Enumf69731e192b14a6b),
}
impl Default for Enumc101867477176eb7 {
    fn default() -> Self {
        Self::Err_Uoption_o____EFault_pcnt__(Default::default())
    }
}
#[derive(Debug, Clone, Copy, PartialEq)]
pub enum Enum969da2c83668338c {
    None_i_(()),
    Some_i_(i128),
}
impl Default for Enum969da2c83668338c {
    fn default() -> Self {
        Self::None_i_(Default::default())
    }
}
#[derive(Debug, Clone, Copy, PartialEq)]
pub enum Enum341d9ce549c82439 {
    None_RTranslationInfo_(()),
    Some_RTranslationInfo_(Structecc89dca6559e5c1),
}
impl Default for Enum341d9ce549c82439 {
    fn default() -> Self {
        Self::None_RTranslationInfo_(Default::default())
    }
}
#[derive(Debug, Clone, Copy, PartialEq)]
pub enum Enum34719cbce221d72f {
    None_EInterruptID_pcnt__(()),
    Some_EInterruptID_pcnt__(u32),
}
impl Default for Enum34719cbce221d72f {
    fn default() -> Self {
        Self::None_EInterruptID_pcnt__(Default::default())
    }
}
#[derive(Debug, Clone, Copy, PartialEq)]
pub enum Enume8fa6f7e2c2caabf {
    Barrier_DMB(Struct2b035eb5949c4c68),
    Barrier_DSB(Struct2b035eb5949c4c68),
    Barrier_ISB(()),
    Barrier_PSSBB(()),
    Barrier_SB(()),
    Barrier_SSBB(()),
}
impl Default for Enume8fa6f7e2c2caabf {
    fn default() -> Self {
        Self::Barrier_DMB(Default::default())
    }
}
#[derive(Debug, Clone, Copy, PartialEq)]
pub enum Enum41fb7833ab6da036 {
    Error_ConstrainedUnpredictable(()),
    Error_ExceptionTaken(()),
    Error_ImplementationDefined(&'static str),
    Error_ReservedEncoding(()),
    Error_SError(bool),
    Error_See(&'static str),
    Error_Undefined(()),
    Error_Unpredictable(()),
}
impl Default for Enum41fb7833ab6da036 {
    fn default() -> Self {
        Self::Error_ConstrainedUnpredictable(Default::default())
    }
}
#[derive(Debug, Clone, Copy, PartialEq)]
pub enum Enum43916b7a3a21b96d {
    None_RS2TTWParams_(()),
    Some_RS2TTWParams_(Structa32f3d4dde1ac19f),
}
impl Default for Enum43916b7a3a21b96d {
    fn default() -> Self {
        Self::None_RS2TTWParams_(Default::default())
    }
}
#[derive(Debug, Clone, Copy, PartialEq)]
pub enum Enumf69731e192b14a6b {
    None_o_(()),
    Some_o_(bool),
}
impl Default for Enumf69731e192b14a6b {
    fn default() -> Self {
        Self::None_o_(Default::default())
    }
}
#[derive(Debug, Clone, Copy, PartialEq)]
pub enum Enum3c2b85a331c35c26 {
    None_b_(()),
    Some_b_(Bits),
}
impl Default for Enum3c2b85a331c35c26 {
    fn default() -> Self {
        Self::None_b_(Default::default())
    }
}
#[derive(Debug, Clone, Copy, PartialEq)]
pub enum Enumad583a36a667a94a {
    SAcc_ASIMD(bool),
    SAcc_AT(()),
    SAcc_DC(()),
    SAcc_DCZero(()),
    SAcc_GCS(()),
    SAcc_GPTW(()),
    SAcc_IC(()),
    SAcc_NV2(()),
    SAcc_SME(bool),
    SAcc_SPE(()),
    SAcc_SVE(bool),
}
impl Default for Enumad583a36a667a94a {
    fn default() -> Self {
        Self::SAcc_ASIMD(Default::default())
    }
}
#[derive(Debug, Clone, Copy, PartialEq)]
pub enum Enumbc4610d1c4afb05 {
    None__b_i__(()),
    Some__b_i__(Struct489cd779642cf40c),
}
impl Default for Enumbc4610d1c4afb05 {
    fn default() -> Self {
        Self::None__b_i__(Default::default())
    }
}
#[derive(Debug, Clone, Copy, PartialEq)]
pub enum Enumaae6f3004d2cf576 {
    Err__b_Uoption_o_____EFault_pcnt__(u32),
    Ok__b_Uoption_o_____EFault_pcnt__(Struct343b2d4a0306013a),
}
impl Default for Enumaae6f3004d2cf576 {
    fn default() -> Self {
        Self::Err__b_Uoption_o_____EFault_pcnt__(Default::default())
    }
}
#[derive(Debug, Clone, Copy, PartialEq)]
pub enum Enumfabfd93ef17fdbf2 {
    AK_arch_Uarm_acc_type___(Enumad583a36a667a94a),
    AK_explicit_Uarm_acc_type___(Struct84fe8b3b2be054b8),
    AK_ifetch_Uarm_acc_type___(()),
    AK_ttw_Uarm_acc_type___(()),
}
impl Default for Enumfabfd93ef17fdbf2 {
    fn default() -> Self {
        Self::AK_arch_Uarm_acc_type___(Default::default())
    }
}
// Variable length bitvector implementation
//
// Operations must zero unused bits before returning
#[derive(Clone, Copy, Debug)]
pub struct Bits {
    value: u128,
    length: u16,
}
impl Default for Bits {
    fn default() -> Self {
        Self::new(0, 128)
    }
}
impl Bits {
    pub fn new(value: u128, length: u16) -> Self {
        Self { value, length }.normalize()
    }
    pub fn value(&self) -> u128 {
        self.value
    }
    pub fn length(&self) -> u16 {
        self.length
    }
    fn normalize(self) -> Self {
        let mask = 1u128
            .checked_shl(u32::from(self.length()))
            .map(|i| i - 1)
            .unwrap_or(!0);
        Self {
            value: self.value() & mask,
            length: self.length(),
        }
    }
    pub fn zero_extend(&self, i: i128) -> Self {
        let length = u16::try_from(i).unwrap();
        Self {
            value: self.value(),
            length,
        }
            .normalize()
    }
    pub fn sign_extend(&self, i: i128) -> Self {
        let length = u16::try_from(i).unwrap();
        let shift_amount = 128 - self.length();
        Self {
            value: (((self.value() as i128) << shift_amount) >> shift_amount) as u128,
            length,
        }
            .normalize()
    }
    pub fn truncate(&self, i: i128) -> Self {
        Self {
            value: self.value(),
            length: u16::try_from(i).unwrap(),
        }
            .normalize()
    }
    // Returns the current value with `bits` inserted beginning at index
    // `start`
    pub fn insert(&self, insert: Bits, start: i128) -> Self {
        let shifted = insert.normalize().value() << start;
        if start > 128 {
            panic!();
        }
        if start + i128::from(insert.length()) > 128 {
            panic!();
        }
        let insert_mask = 1u128
            .checked_shl(u32::from(insert.length()))
            .map(|x| x - 1)
            .unwrap_or(!0);
        let mask = !(insert_mask << start);
        let result_value = (self.value() & mask) | shifted;
        let result_length = core::cmp::max(
            self.length(),
            insert.length() + u16::try_from(start).unwrap(),
        );
        Self::new(result_value, result_length)
    }
    pub fn arithmetic_shift_right(&self, amount: i128) -> Self {
        let length = self.length();
        let value = self.value();
        let signed_value = value as i128;
        let sign_extended = (signed_value << (128 - length)) >> (128 - length);
        let shifted = sign_extended >> amount;
        Bits::new(shifted as u128, length)
    }
}
impl core::ops::Shl<i128> for Bits {
    type Output = Self;
    fn shl(self, rhs: i128) -> Self::Output {
        Self {
            value: self.value().checked_shl(u32::try_from(rhs).unwrap()).unwrap_or(0),
            length: self.length(),
        }
            .normalize()
    }
}
impl core::ops::Shr<i128> for Bits {
    type Output = Self;
    fn shr(self, rhs: i128) -> Self::Output {
        Self {
            value: self.value().checked_shr(u32::try_from(rhs).unwrap()).unwrap_or(0),
            length: self.length(),
        }
            .normalize()
    }
}
impl core::ops::Shl for Bits {
    type Output = Self;
    fn shl(self, rhs: Bits) -> Self::Output {
        Self {
            value: self
                .value()
                .checked_shl(u32::try_from(rhs.value()).unwrap())
                .unwrap_or(0),
            length: self.length(),
        }
            .normalize()
    }
}
impl core::ops::BitAnd for Bits {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self::Output {
        Self {
            value: self.value() & rhs.value(),
            length: self.length(),
        }
            .normalize()
    }
}
impl core::ops::BitOr for Bits {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self::Output {
        Self {
            value: self.value() | rhs.value(),
            length: self.length(),
        }
            .normalize()
    }
}
impl core::ops::BitXor for Bits {
    type Output = Self;
    fn bitxor(self, rhs: Self) -> Self::Output {
        Self {
            value: self.value() ^ rhs.value(),
            length: self.length(),
        }
            .normalize()
    }
}
impl core::ops::Add for Bits {
    type Output = Self;
    fn add(self, rhs: Self) -> Self::Output {
        Self {
            value: self.value().wrapping_add(rhs.value()),
            length: self.length(),
        }
            .normalize()
    }
}
impl core::ops::Sub for Bits {
    type Output = Self;
    fn sub(self, rhs: Self) -> Self::Output {
        Self {
            value: self.value().wrapping_sub(rhs.value()),
            length: self.length(),
        }
            .normalize()
    }
}
impl core::ops::Not for Bits {
    type Output = Self;
    fn not(self) -> Self::Output {
        Self {
            value: !self.value(),
            length: self.length(),
        }
            .normalize()
    }
}
impl core::cmp::PartialEq for Bits {
    fn eq(&self, other: &Self) -> bool {
        self.value() == other.value()
    }
}
impl core::cmp::Eq for Bits {}
pub trait Tracer {
    fn begin(&self, instruction: u32, pc: u64);
    fn end(&self);
    fn read_register(&self, offset: usize, value: &dyn core::fmt::Debug);
    fn write_register(&self, offset: usize, value: &dyn core::fmt::Debug);
    fn read_memory(&self, address: usize, value: &dyn core::fmt::Debug);
    fn write_memory(&self, address: usize, value: &dyn core::fmt::Debug);
}
pub trait RatioExt {
    fn powi(&self, i: i32) -> Self;
    fn sqrt(&self) -> Self;
    fn abs(&self) -> Self;
}
impl RatioExt for num_rational::Ratio<i128> {
    fn powi(&self, i: i32) -> Self {
        self.pow(i)
    }
    fn sqrt(&self) -> Self {
        todo!();
    }
    fn abs(&self) -> Self {
        let n = *self.numer();
        let d = *self.denom();
        Self::new(n.abs(), d)
    }
}
#[derive(Debug)]
pub enum ExecuteResult {
    Ok,
    EndOfBlock,
    UndefinedInstruction,
}
